<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Feature Toggles on {code that works}</title>
    <link>https://sadique.io/series/feature-toggles/</link>
    <description>Recent content in Feature Toggles on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 30 Nov 2016 05:50:42 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/series/feature-toggles/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 4</title>
      <link>https://sadique.io/blog/2016/11/30/implementing-feature-toggles-for-a-spring-boot-application-part-4/</link>
      <pubDate>Wed, 30 Nov 2016 05:50:42 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2016/11/30/implementing-feature-toggles-for-a-spring-boot-application-part-4/</guid>
      <description>&lt;p&gt;In the fourth part of this &lt;a href=&#34;https://sadique.io/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing &lt;a href=&#34;https://sadique.io/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application-part-1/&#34;&gt;feature toggles&lt;/a&gt; for a Spring Boot application, we will take a look at how our implementation so far introduced a dependency on the application being restarted for changes to take place.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 3</title>
      <link>https://sadique.io/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-3/</link>
      <pubDate>Tue, 29 Nov 2016 05:50:39 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-3/</guid>
      <description>&lt;p&gt;In the third part of this &lt;a href=&#34;https://sadique.io/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will take a look at exposing the state of feature flags as a Spring Boot management end point for monitoring and testing purposes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 2</title>
      <link>https://sadique.io/blog/2016/11/27/implementing-feature-toggles-for-a-spring-boot-application-part-2/</link>
      <pubDate>Sun, 27 Nov 2016 05:48:48 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2016/11/27/implementing-feature-toggles-for-a-spring-boot-application-part-2/</guid>
      <description>&lt;p&gt;In the second part of this &lt;a href=&#34;https://sadique.io/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will look at exposing the features to the Angular front-end so that features can be toggled in UI components.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 1</title>
      <link>https://sadique.io/blog/2016/11/22/implementing-feature-toggles-for-a-spring-boot-application-part-1/</link>
      <pubDate>Tue, 22 Nov 2016 01:03:03 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2016/11/22/implementing-feature-toggles-for-a-spring-boot-application-part-1/</guid>
      <description>&lt;p&gt;In one of our recent projects at work, we implemented feature toggles for a Spring MVC / Angular JS code base and this &lt;a href=&#34;https://sadique.io/series/feature-toggles&#34;&gt;series of blog posts&lt;/a&gt; discusses our motivations and requirements, the approach we took and what we learned from it.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>