<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{code that works} on {code that works}</title>
    <link>https://sadique.io/?utm_source=site&amp;utm_medium=feed</link>
    <description>Recent content in {code that works} on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Mon, 02 Mar 2020 19:53:43 -0800</lastBuildDate>
    <atom:link href="/?utm_source=site&amp;utm_medium=feed" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Docker &#43; K8s Workshop - chroot example</title>
      <link>https://sadique.io/course/docker-k8s-part-1-chroot-demo/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Mon, 02 Mar 2020 19:53:43 -0800</pubDate>
      
      <guid>https://sadique.io/course/docker-k8s-part-1-chroot-demo/?utm_source=site&amp;utm_medium=feed</guid>
      <description>

&lt;h2 id=&#34;create-a-chroot-jail&#34;&gt;Create a chroot jail&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mkdir jail
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-directories-for-system-binaries&#34;&gt;Create directories for system binaries&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;mkdir jail/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;copy-the-bash-binary-from-the-host&#34;&gt;Copy the bash binary from the host&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;cp -v /bin/bash jail/bin
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-list-of-libraries-needed-for-the-binary-to-work&#34;&gt;Create a list of libraries needed for the binary to work&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;list_of_libs=&amp;quot;$(ldd /bin/bash | egrep -o &#39;/lib.*\.[0-9]&#39;)&amp;quot;
echo $list_of_libs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;copy-the-libraries-recursively&#34;&gt;Copy the libraries recursively&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;for i in $list_of_libs; do cp  -v --parents &amp;quot;$i&amp;quot; `pwd`/jail; done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;create-a-demo-script&#34;&gt;Create a demo script&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;let i=0;
while :
do
        let i++
        echo &amp;quot;Last value of i is ${i}&amp;quot;
        read -rep $&#39;Pausing for 5 seconds\n&#39; -t 5
done
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;copy-the-demo-script-to-the-jail&#34;&gt;Copy the demo script to the jail&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;chmod +x demos.sh
cp demo.sh jail/
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;enter-the-chroot&#34;&gt;Enter the chroot&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo chroot `pwd`/jail /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;in-the-chroot-execute-the-shell-script&#34;&gt;In the chroot, execute the shell script&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;/bin/bash -c ./demo.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker &#43; K8s Workshop - Setup for Part 1</title>
      <link>https://sadique.io/course/docker-k8s-part-1-basics/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Mon, 02 Mar 2020 19:53:43 -0800</pubDate>
      
      <guid>https://sadique.io/course/docker-k8s-part-1-basics/?utm_source=site&amp;utm_medium=feed</guid>
      <description>

&lt;h2 id=&#34;hello-world&#34;&gt;Hello World&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;docker run hello-world
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;explanation&#34;&gt;Explanation&lt;/h3&gt;

&lt;p&gt;Docker containers are run time instances of images. Think of a Docker image as a set of files (like the set of files we placed in the jail directory in the chroot demo).&lt;/p&gt;

&lt;p&gt;In this case, we are asking docker to create a container with the image &lt;code&gt;hello-world&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The image has to come from somewhere. By default, Docker searches in a public repository of images hosted by Docker at docker.io.&lt;/p&gt;

&lt;p&gt;It fetches the image and then creates a container from the image (file system)&lt;/p&gt;

&lt;h3 id=&#34;what-is-latest&#34;&gt;What is &lt;code&gt;latest&lt;/code&gt;?&lt;/h3&gt;

&lt;p&gt;Docker convention uses &lt;code&gt;latest&lt;/code&gt; to denote the very latest version of a particular image. This is just a convention - not all images have a version tagged &lt;code&gt;latest&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;By default, &lt;code&gt;docker run&lt;/code&gt; tries to run the &lt;code&gt;latest&lt;/code&gt; if no specific tag (version) is not specified.&lt;/p&gt;

&lt;h3 id=&#34;the-second-time&#34;&gt;The second time&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;docker run docker.io/hello-world:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This time Docker did not have to download a new image because this is the same image as before.&lt;/p&gt;

&lt;h3 id=&#34;image-name&#34;&gt;Image name&lt;/h3&gt;

&lt;p&gt;In &lt;code&gt;docker run docker.io/hello-world:latest&lt;/code&gt;:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Registry: &lt;code&gt;docker.io&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Product/Service name &lt;code&gt;hello-world&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Version &lt;code&gt;latest&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;versioning&#34;&gt;Versioning&lt;/h3&gt;

&lt;p&gt;Versions can be denoted in any format:&lt;/p&gt;

&lt;p&gt;Alpine:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run alpine:3.7 echo &amp;quot;Hello from Alpine&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;OpenJDK 15:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -it openjdk:15-slim-buster bash
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;creating-a-custom-image-from-scratch&#34;&gt;Creating a custom image from scratch.&lt;/h2&gt;

&lt;p&gt;We will build an image from the files we used for the chroot example.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download and unzip this [file]().&lt;/li&gt;
&lt;li&gt;Build the image in the directory using &lt;code&gt;docker build .&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Run the container using &lt;code&gt;docker run &amp;lt;id&amp;gt; /bin/bash -c /demo.sh&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;creating-a-custom-image-from-a-linux-base&#34;&gt;Creating a custom image from a Linux base.&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;FROM bash:latest
COPY demo.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker build .
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker run &amp;lt;id&amp;gt; bash -c  /demo.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tagging-an-image&#34;&gt;Tagging an image&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;docker tag &amp;lt;id&amp;gt; demo-app:v1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker image ls
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Tag as latest&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker tag demo-app:v1 demo-app:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tagging-during-build&#34;&gt;Tagging during build&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;docker build -t demo-app:v2 .
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;accessing-a-running-container&#34;&gt;Accessing a running container&lt;/h1&gt;

&lt;pre&gt;&lt;code&gt;docker exec -it &amp;lt;container-id&amp;gt; sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Note: It is the container id and not image id&lt;/p&gt;

&lt;p&gt;This can be improved if we name our containers.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run demo-app:latest --name demo-app
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;docker exec -it demoa-app sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h1 id=&#34;mounting-volumes&#34;&gt;Mounting volumes&lt;/h1&gt;

&lt;p&gt;Docker container&amp;rsquo;s disk is ephemeral.
External storage can be attached using &lt;code&gt;-v&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run -v external-dir:/external demo-app:v1 bash -c /demo.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Docker &#43; K8s Workshop - Setup for Part 1</title>
      <link>https://sadique.io/course/docker-k8s-part-1-setup/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Mon, 02 Mar 2020 19:53:43 -0800</pubDate>
      
      <guid>https://sadique.io/course/docker-k8s-part-1-setup/?utm_source=site&amp;utm_medium=feed</guid>
      <description>

&lt;h2 id=&#34;1-install-docker&#34;&gt;1. Install Docker&lt;/h2&gt;

&lt;h3 id=&#34;linux&#34;&gt;Linux&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install Docker Community Edition for your Linux distro based on instructions available at the official &lt;a href=&#34;https://docs.docker.com/install/#supported-platforms&#34;&gt;installation page&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that you can run Docker as a non-root user. Instructions for this are available &lt;a href=&#34;https://docs.docker.com/install/linux/linux-postinstall/#manage-docker-as-a-non-root-user&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test your set up by running the command &lt;code&gt;docker run hello-world&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;macos&#34;&gt;MacOS&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install Docker Desktop for MacOS using instruction available &lt;a href=&#34;https://docs.docker.com/docker-for-mac/install/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test your set up by running the command &lt;code&gt;docker run hello-world&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;windows&#34;&gt;Windows&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Install &lt;del&gt;Docker Desktop for Windows&lt;/del&gt; Docker Toolbox for Windows following instructions &lt;a href=&#34;https://docs.docker.com/toolbox/toolbox_install_windows/&#34;&gt;here&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;Test your set up by running the command &lt;code&gt;docker run hello-world&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;2-install-a-code-editor&#34;&gt;2. Install a code editor&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;If you are the sort of person with a favorite editor, it should suffice.&lt;/li&gt;
&lt;li&gt;For everyone else, &lt;a href=&#34;https://code.visualstudio.com/&#34;&gt;VS Code&lt;/a&gt; is a decent editor that won&amp;rsquo;t hold you back.&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Flushing Metrics in Dropwizard Commands</title>
      <link>https://sadique.io/blog/2019/08/02/flushing-metrics-in-dropwizard-commands/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 02 Aug 2019 18:19:32 -0700</pubDate>
      
      <guid>https://sadique.io/blog/2019/08/02/flushing-metrics-in-dropwizard-commands/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;Users of Dropwizard Metrics will be familiar with &lt;code&gt;ScheduledReporter&lt;/code&gt;  - it is a nice pattern that allows metrics reporting to be off loaded to a different thread which periodically sends out the collected metrics instead of making a network call every time a metric is collected. In most use cases, this works great - especially if you are running a server.&lt;/p&gt;

&lt;p&gt;However, the implementation of &lt;code&gt;ScheduledReporter&lt;/code&gt; comes with an interesting quirk - it reports metrics only on the configured schedule, but does not flush the metrics it has collected after the last flush when the reporter is closed.&lt;/p&gt;

&lt;p&gt;Datadog Metrics wires up ScheduledReporters that you configure as Dropwizard Lifecycle managed entities, guaranteeing that when your application shuts down, the reporter is closed.&lt;/p&gt;

&lt;p&gt;This results in metrics collected immediately before an application is shutdown being discarded. This is especially problematic for Dropwizard commands that have varying run times depending on how much data processing it performs.&lt;/p&gt;

&lt;p&gt;Imagine a Dropwizard command that when run downloads a file and processes it. Suppose the usual run time is in minutes, so you have configured your metric reporter&amp;rsquo;s frequency to be &lt;code&gt;1 minute&lt;/code&gt;, which is reasonable for this command. However, consider the situation where the downloaded file contains no data - the command will finish in seconds, thereby discarding any metric it has collected, as it hasn&amp;rsquo;t ran for long enough for the scheduled reporter&amp;rsquo;s executor to kick in.&lt;/p&gt;

&lt;h2 id=&#34;solution&#34;&gt;Solution&lt;/h2&gt;

&lt;p&gt;If you have the ability to override the specific &lt;code&gt;ScheduledReporter&lt;/code&gt; you are using, you could inherit from it and override the &lt;code&gt;#close()&lt;/code&gt; method to call &lt;code&gt;#report&lt;/code&gt; before issuing &lt;code&gt;#stop&lt;/code&gt;. For example, if you were using the &lt;code&gt;ConsoleReporter&lt;/code&gt;, you could override the method and then use a &lt;a href=&#34;https://docs.oracle.com/javase/tutorial/sound/SPI-intro.html&#34;&gt;Service Provider Interface&lt;/a&gt; to provide your new reporter to Datadog Metrics.&lt;/p&gt;

&lt;p&gt;The SPI goes in the file &lt;code&gt;src/main/resources/META-INF/services/io.dropwizard.metrics.ReporterFactory&lt;/code&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;io.sadique.dropwizard.metrics.flush.CustomReporterFactory
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; CustomReporterFactory &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; BaseReporterFactory {
  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;ScheduledReporter&lt;/span&gt; build(MetricRegistry &lt;span style=&#34;color:#c0f&#34;&gt;registry&lt;/span&gt;) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; FlushingReporter.&lt;span style=&#34;color:#309&#34;&gt;forRegistry&lt;/span&gt;(registry)
      .&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;If you are using a reporter like &lt;code&gt;DataogReporter&lt;/code&gt;, it is hard to override it as the constructor is marked private. In such situations, we can create a wrapper that provides the overridden behavior:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; FlushOnCloseReporter &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; ScheduledReporter  {
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;final&lt;/span&gt; ScheduledReporter &lt;span style=&#34;color:#c0f&#34;&gt;wrapped&lt;/span&gt;;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;FlushOnCloseReporter&lt;/span&gt;(ScheduledReporter &lt;span style=&#34;color:#c0f&#34;&gt;wrapped&lt;/span&gt;, MetricRegistry &lt;span style=&#34;color:#c0f&#34;&gt;registry&lt;/span&gt;, String &lt;span style=&#34;color:#c0f&#34;&gt;name&lt;/span&gt;,
                              MetricFilter &lt;span style=&#34;color:#c0f&#34;&gt;filter&lt;/span&gt;, TimeUnit &lt;span style=&#34;color:#c0f&#34;&gt;rateUnit&lt;/span&gt;, TimeUnit &lt;span style=&#34;color:#c0f&#34;&gt;durationUnit&lt;/span&gt;) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;super&lt;/span&gt;(registry, name, filter, rateUnit, durationUnit);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;wrapped&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; wrapped;
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; report(SortedMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String, Gauge&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;gauges&lt;/span&gt;, SortedMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String, Counter&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;counters&lt;/span&gt;,
                     SortedMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String, Histogram&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;histograms&lt;/span&gt;, SortedMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String, Meter&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;meters&lt;/span&gt;,
                     SortedMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String, Timer&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;timers&lt;/span&gt;) {
    wrapped.&lt;span style=&#34;color:#309&#34;&gt;report&lt;/span&gt;(gauges, counters, histograms, meters, timers);
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; start(&lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;long&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;period&lt;/span&gt;, TimeUnit &lt;span style=&#34;color:#c0f&#34;&gt;unit&lt;/span&gt;) {
    wrapped.&lt;span style=&#34;color:#309&#34;&gt;start&lt;/span&gt;(period, unit);
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; stop() {
    wrapped.&lt;span style=&#34;color:#309&#34;&gt;report&lt;/span&gt;();
    wrapped.&lt;span style=&#34;color:#309&#34;&gt;stop&lt;/span&gt;();
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And the reporter factory can be modified to wrap the &lt;code&gt;DatadogReporter&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; CustomReporterFactory &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; BaseReporterFactory {
  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;ScheduledReporter&lt;/span&gt; build(MetricRegistry &lt;span style=&#34;color:#c0f&#34;&gt;registry&lt;/span&gt;) {
    DatadogReporter &lt;span style=&#34;color:#c0f&#34;&gt;consoleReporter&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; DatadogReporter.&lt;span style=&#34;color:#309&#34;&gt;forRegistry&lt;/span&gt;(registry)
      .&lt;span style=&#34;color:#309&#34;&gt;filter&lt;/span&gt;(getFilter())
      .&lt;span style=&#34;color:#309&#34;&gt;convertDurationsTo&lt;/span&gt;(getDurationUnit())
      .&lt;span style=&#34;color:#309&#34;&gt;convertRatesTo&lt;/span&gt;(getRateUnit())
      .&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;();
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FlushOnCloseReporter(consoleReporter, registry, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;flush-on-close(DatadogReporter)&amp;#34;&lt;/span&gt;,
      getFilter(), getRateUnit(), getDurationUnit());
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will ensure that reports are always flushed before the reporter is shutdown by Dropwizard lifecycle.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Managing environment lifecycles for Dropwizard Commands</title>
      <link>https://sadique.io/blog/2019/07/28/managing-environment-lifecycles-for-dropwizard-commands/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sun, 28 Jul 2019 18:29:49 -0700</pubDate>
      
      <guid>https://sadique.io/blog/2019/07/28/managing-environment-lifecycles-for-dropwizard-commands/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;If you have built background workers or other non-server applications with Dropwizard, chances are that you used the Dropwizard Command pattern. In fact, even the sever you wrote with Dropwizard executes a command - specifically &lt;code&gt;io.dropwizard.cli.ServerCommand&lt;/code&gt;. While the server command is great, sometimes you want to build applications that have all the goodies that Dropwizard offers, but you dont want to start a server. Managing Lifecycles is one example of a Dropwizard feature that works great for server applications, but needs some tweaking to get working for non-server commands.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take the following example. We have the simplest Dropwizard command below. It doesn&amp;rsquo;t do much, except print some logs and sleep for a second in between.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; WaitingCommand &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; EnvironmentCommand&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;AppConfiguration&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; {

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;WaitingCommand&lt;/span&gt;(Application&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;AppConfiguration&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;application&lt;/span&gt;) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;super&lt;/span&gt;(application, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;wait&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Wait for a second.&amp;#34;&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; run(Environment &lt;span style=&#34;color:#c0f&#34;&gt;environment&lt;/span&gt;, Namespace &lt;span style=&#34;color:#c0f&#34;&gt;namespace&lt;/span&gt;, AppConfiguration &lt;span style=&#34;color:#c0f&#34;&gt;configuration&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {
    Logger.&lt;span style=&#34;color:#309&#34;&gt;getInstance&lt;/span&gt;(getClass()).&lt;span style=&#34;color:#309&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Starting command&amp;#34;&lt;/span&gt;);
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt; {
      Thread.&lt;span style=&#34;color:#309&#34;&gt;sleep&lt;/span&gt;(1000);
    } &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;catch&lt;/span&gt; (InterruptedException &lt;span style=&#34;color:#c0f&#34;&gt;e&lt;/span&gt;) {
      e.&lt;span style=&#34;color:#309&#34;&gt;printStackTrace&lt;/span&gt;();
    }
    Logger.&lt;span style=&#34;color:#309&#34;&gt;getInstance&lt;/span&gt;(getClass()).&lt;span style=&#34;color:#309&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Finished running command&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can wire this to our application.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; MetricsApplication &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; Application&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;AppConfiguration&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; {
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;main&lt;/span&gt;(String[] &lt;span style=&#34;color:#c0f&#34;&gt;args&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MetricsApplication().&lt;span style=&#34;color:#309&#34;&gt;run&lt;/span&gt;(args);
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; run(AppConfiguration &lt;span style=&#34;color:#c0f&#34;&gt;configuration&lt;/span&gt;, Environment &lt;span style=&#34;color:#c0f&#34;&gt;environment&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {

  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; initialize(Bootstrap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;AppConfiguration&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;bootstrap&lt;/span&gt;) {
    bootstrap.&lt;span style=&#34;color:#309&#34;&gt;addCommand&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; WaitingCommand(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;));

    bootstrap.&lt;span style=&#34;color:#309&#34;&gt;setConfigurationSourceProvider&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ResourceConfigurationSourceProvider());
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When our application runs with the &lt;code&gt;wait&lt;/code&gt; command (i.e. we invoke it as &lt;code&gt;java -jar app.jar wait config.yml&lt;/code&gt;), it does the little work we asked it to do.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO  [2019-07-29 01:42:43,703] org.eclipse.jetty.util.log: Logging initialized @2699ms to org.eclipse.jetty.util.log.Slf4jLog
INFO  [2019-07-29 01:42:43,952] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /
INFO  [2019-07-29 01:42:43,957] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /
INFO  [2019-07-29 01:42:43,960] io.sadique.dropwizard.WaitingCommand: Starting command
INFO  [2019-07-29 01:42:44,966] io.sadique.dropwizard.WaitingCommand: Finished running command
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;adding-a-lifecycle&#34;&gt;Adding a lifecycle&lt;/h2&gt;

&lt;p&gt;Let&amp;rsquo;s try adding an object whose lifecycle we intend to be managed by Dropwizard. Again, this entity in the example doesn&amp;rsquo;t do much - except log when it is started and stopped by Dropwizard.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;io&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;dropwizard&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;lifecycle&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;Managed&lt;/span&gt;;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;org&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;apache&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;log4j&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;Logger&lt;/span&gt;;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; ManagedObject &lt;span style=&#34;color:#c0f&#34;&gt;implements&lt;/span&gt; Managed {
  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; start() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {
    Logger.&lt;span style=&#34;color:#309&#34;&gt;getInstance&lt;/span&gt;(getClass()).&lt;span style=&#34;color:#309&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Starting managed object&amp;#34;&lt;/span&gt;);
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; stop() &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {
    Logger.&lt;span style=&#34;color:#309&#34;&gt;getInstance&lt;/span&gt;(getClass()).&lt;span style=&#34;color:#309&#34;&gt;info&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Stopping managed object&amp;#34;&lt;/span&gt;);
  }
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We will of course need to tell Dropwizard to manage this object:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; run(AppConfiguration &lt;span style=&#34;color:#c0f&#34;&gt;configuration&lt;/span&gt;, Environment &lt;span style=&#34;color:#c0f&#34;&gt;environment&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {
    environment.&lt;span style=&#34;color:#309&#34;&gt;lifecycle&lt;/span&gt;().&lt;span style=&#34;color:#309&#34;&gt;manage&lt;/span&gt;(&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ManagedObject());
  }&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the application is run with the &lt;code&gt;wait&lt;/code&gt; command, the log looks like:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO  [2019-07-29 01:50:28,510] org.eclipse.jetty.util.log: Logging initialized @1640ms to org.eclipse.jetty.util.log.Slf4jLog
INFO  [2019-07-29 01:50:28,640] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /
INFO  [2019-07-29 01:50:28,642] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /
INFO  [2019-07-29 01:50:28,647] io.sadique.dropwizard.WaitingCommand: Starting command
INFO  [2019-07-29 01:50:29,649] io.sadique.dropwizard.WaitingCommand: Finished running command
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Looks like the object we expected Dropwizard to start and stop was ignored. What if we run the application with the &lt;code&gt;server&lt;/code&gt; command?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO  [2019-07-29 02:09:17,067] org.eclipse.jetty.setuid.SetUIDListener: Opened application@680a66dd{HTTP/1.1,[http/1.1]}{0.0.0.0:8080}
INFO  [2019-07-29 02:09:17,067] org.eclipse.jetty.setuid.SetUIDListener: Opened admin@2dd8239{HTTP/1.1,[http/1.1]}{0.0.0.0:8081}
INFO  [2019-07-29 02:09:17,126] org.eclipse.jetty.server.Server: jetty-9.4.z-SNAPSHOT
INFO  [2019-07-29 02:09:17,143] io.sadique.dropwizard.ManagedObject: Starting managed object
...
...
...
INFO  [2019-07-29 02:09:21,747] org.eclipse.jetty.server.AbstractConnector: Stopped admin@2dd8239{HTTP/1.1,[http/1.1]}{0.0.0.0:8081}
INFO  [2019-07-29 02:09:21,751] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@2ee83775{/,null,UNAVAILABLE}
INFO  [2019-07-29 02:09:21,756] org.eclipse.jetty.server.handler.ContextHandler: Stopped i.d.j.MutableServletContextHandler@19382338{/,null,UNAVAILABLE}
INFO  [2019-07-29 02:09:21,760] io.sadique.dropwizard.ManagedObject: Stopping managed object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server seems to manage the lifecycle of the object as expected. Why is it the case that server command can manage the lifecycle, but our custom command can&amp;rsquo;t?&lt;/p&gt;

&lt;p&gt;It turns out, it is not enough to register an entity whose lifecycle needs to be managed, someone needs to attach a lifecycle container to the &lt;code&gt;LifecycleEnvironment&lt;/code&gt;. It is not an issue for the server command because it builds a server using &lt;code&gt;io.dropwizard.server.AbstractServerFactory#buildServer&lt;/code&gt;, which in turn &lt;a href=&#34;https://github.com/dropwizard/dropwizard/blob/master/dropwizard-core/src/main/java/io/dropwizard/server/AbstractServerFactory.java#L611&#34;&gt;attaches the container&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;building-a-lifecyclemanagedcommand&#34;&gt;Building a LifecycleManagedCommand&lt;/h2&gt;

&lt;p&gt;We can mimic the behavior of the server by constructing our own &lt;code&gt;ContainerLifecycle&lt;/code&gt; and starting it before our command performs it&amp;rsquo;s actions. This pattern can be generalized as a &lt;code&gt;LifecycleManagedCommand&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;LifecycleManagedCommand&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; Configuration&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;extends&lt;/span&gt; EnvironmentCommand&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; {

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;final&lt;/span&gt; ContainerLifeCycle &lt;span style=&#34;color:#c0f&#34;&gt;containerLifeCycle&lt;/span&gt;;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;LifecycleManagedCommand&lt;/span&gt;(Application&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;application&lt;/span&gt;, String &lt;span style=&#34;color:#c0f&#34;&gt;name&lt;/span&gt;, String &lt;span style=&#34;color:#c0f&#34;&gt;description&lt;/span&gt;) {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;super&lt;/span&gt;(application, name, description);
    containerLifeCycle &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ContainerLifeCycle();
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; run(Environment &lt;span style=&#34;color:#c0f&#34;&gt;environment&lt;/span&gt;, Namespace &lt;span style=&#34;color:#c0f&#34;&gt;namespace&lt;/span&gt;, T &lt;span style=&#34;color:#c0f&#34;&gt;configuration&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Exception&lt;/span&gt; {
    environment.&lt;span style=&#34;color:#309&#34;&gt;lifecycle&lt;/span&gt;().&lt;span style=&#34;color:#309&#34;&gt;getManagedObjects&lt;/span&gt;().&lt;span style=&#34;color:#309&#34;&gt;stream&lt;/span&gt;().&lt;span style=&#34;color:#309&#34;&gt;forEach&lt;/span&gt;(mo &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; containerLifeCycle.&lt;span style=&#34;color:#309&#34;&gt;addBean&lt;/span&gt;(mo));
    ShutdownThread.&lt;span style=&#34;color:#309&#34;&gt;register&lt;/span&gt;(containerLifeCycle);
    containerLifeCycle.&lt;span style=&#34;color:#309&#34;&gt;start&lt;/span&gt;();

    runManaged(environment, namespace, configuration);

    containerLifeCycle.&lt;span style=&#34;color:#309&#34;&gt;stop&lt;/span&gt;();
  }

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;abstract&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; runManaged(Environment &lt;span style=&#34;color:#c0f&#34;&gt;environment&lt;/span&gt;, Namespace &lt;span style=&#34;color:#c0f&#34;&gt;namespace&lt;/span&gt;, T &lt;span style=&#34;color:#c0f&#34;&gt;configuration&lt;/span&gt;);
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This command ensures that:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;A new &lt;code&gt;ContainerLifeCycle&lt;/code&gt; is built before running the command.&lt;/li&gt;
&lt;li&gt;Every managed object registered with the Lifecycle is added to the container.&lt;/li&gt;
&lt;li&gt;The container is started and registered with &lt;code&gt;ShutdownThread&lt;/code&gt;, which is Dropwizard&amp;rsquo;s shut down hook.&lt;/li&gt;
&lt;li&gt;The container is stopped after the command performs it&amp;rsquo;s action.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We can now now modify &lt;code&gt;WaitCommand&lt;/code&gt; to use this pattern.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;public class WaitingCommand extends LifecycleManagedCommand&amp;lt;AppConfiguration&amp;gt; {

  public WaitingCommand(Application&amp;lt;AppConfiguration&amp;gt; application) {
    super(application, &amp;quot;wait&amp;quot;, &amp;quot;Wait for a second.&amp;quot;);
  }

  @Override
  protected void runManaged(Environment environment, Namespace namespace, AppConfiguration configuration) {
    Logger.getInstance(getClass()).info(&amp;quot;Starting command&amp;quot;);
    try {
      Thread.sleep(1000);
    } catch (InterruptedException e) {
      e.printStackTrace();
    }
    Logger.getInstance(getClass()).info(&amp;quot;Finished running command&amp;quot;);
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;With this change, we can see that Dropwizard correctly handles the lifecycle when the &lt;code&gt;wait&lt;/code&gt; command is executed.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;INFO  [2019-07-29 02:26:34,560] io.dropwizard.server.DefaultServerFactory: Registering jersey handler with root path prefix: /
INFO  [2019-07-29 02:26:34,563] io.dropwizard.server.DefaultServerFactory: Registering admin handler with root path prefix: /
INFO  [2019-07-29 02:26:34,569] io.sadique.dropwizard.ManagedObject: Starting managed object
INFO  [2019-07-29 02:26:34,569] io.sadique.dropwizard.WaitingCommand: Starting command
INFO  [2019-07-29 02:26:35,575] io.sadique.dropwizard.WaitingCommand: Finished running command
INFO  [2019-07-29 02:26:35,575] io.sadique.dropwizard.ManagedObject: Stopping managed object
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The server command will of course continue to work as expected.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Looking up Enum types and values in Postgres</title>
      <link>https://sadique.io/blog/2019/05/09/looking-up-enum-types-and-values-in-postgres/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Thu, 09 May 2019 17:10:23 -0700</pubDate>
      
      <guid>https://sadique.io/blog/2019/05/09/looking-up-enum-types-and-values-in-postgres/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;In this blog post, we will explore how Postgres stores Enum types and how to query for Enum types and their values. Postgres&amp;rsquo; Enum, like their counterparts in many programming languags are data types that allow only a predefined set of values to be assigned to them. An interesting difference is that compared to programming languages, Postgres does allow blanks within the values of Enums.&lt;/p&gt;

&lt;p&gt;Postgres Enums are created using the &lt;code&gt;CREATE TYPE&lt;/code&gt; statement. The values are ordered in the order in which they are specified in the &lt;code&gt;CREATE&lt;/code&gt; statement.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;TYPE&lt;/span&gt; weather &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; ENUM (
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;sunny&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rainy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;cloudy&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;snow&amp;#39;&lt;/span&gt;
  );

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;TYPE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Postgres stores Enums in the &lt;code&gt;pg_type&lt;/code&gt; catalog. This catalog assigns a &lt;code&gt;typcategory&lt;/code&gt; to every type and Enums &lt;a href=&#34;https://www.postgresql.org/docs/current/catalog-pg-type.html#CATALOG-TYPCATEGORY-TABLE&#34;&gt;have category&lt;/a&gt; &lt;code&gt;E&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt; pg_type
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; typcategory &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;E&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--+----------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;typname        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; weather
typnamespace   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2200&lt;/span&gt;
typowner       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;24576&lt;/span&gt;
typlen         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
typbyval       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
typtype        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; e
typcategory    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; E
typispreferred &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
typisdefined   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
typdelim       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; ,
typrelid       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typelem        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typarray       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41019&lt;/span&gt;
typinput       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_in
typoutput      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_out
typreceive     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_recv
typsend        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_send
typmodin       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;
typmodout      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;
typanalyze     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;
typalign       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; i
typstorage     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; p
typnotnull     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
typbasetype    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typtypmod      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
typndims       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typcollation   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typdefaultbin  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
typdefault     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
typacl         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This shows us that the name of the enum is &lt;code&gt;weather&lt;/code&gt;. How do we find the possible values of this Enum? Values are stored in the catalog &lt;code&gt;pg_enum&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt; pg_enum;

 enumtypid &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enumsortorder &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enumlabel
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-----------+---------------+-----------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; sunny
     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; rainy
     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; cloudy
     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; snow
(&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is worth noting that each of the enum values are in separate rows of the catalog, with each row using the same &lt;code&gt;enumtypid&lt;/code&gt;. The &lt;code&gt;enumtypid&lt;/code&gt; is referring to the &lt;code&gt;oid&lt;/code&gt; of the enum entry in &lt;code&gt;pg_type&lt;/code&gt; catalog. We can verify that we are indeed looking at the same type. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt; pg_type
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt; oid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--+----------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;typname        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; weather
typnamespace   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2200&lt;/span&gt;
typowner       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;24576&lt;/span&gt;
typlen         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;
typbyval       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
typtype        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; e
typcategory    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; E
typispreferred &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
typisdefined   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
typdelim       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; ,
typrelid       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typelem        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typarray       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41019&lt;/span&gt;
typinput       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_in
typoutput      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_out
typreceive     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_recv
typsend        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enum_send
typmodin       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;
typmodout      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;
typanalyze     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;
typalign       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; i
typstorage     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; p
typnotnull     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
typbasetype    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typtypmod      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
typndims       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typcollation   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
typdefaultbin  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
typdefault     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
typacl         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can use the information we have so far to perform a &lt;code&gt;JOIN&lt;/code&gt; on these catalogs to get all Enum types. To test that values and types are fetched correctly, lets create another enum.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;TYPE&lt;/span&gt; transport &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; ENUM (
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;bus&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;tram&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;rail&amp;#39;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;ferry&amp;#39;&lt;/span&gt;
);

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;TYPE&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This enum will create more entries in &lt;code&gt;pg_enum&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt; pg_enum;

 enumtypid &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enumsortorder &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; enumlabel
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-----------+---------------+-----------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; sunny
     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; rainy
     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; cloudy
     &lt;span style=&#34;color:#f60&#34;&gt;41020&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; snow
     &lt;span style=&#34;color:#f60&#34;&gt;41030&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; bus
     &lt;span style=&#34;color:#f60&#34;&gt;41030&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; tram
     &lt;span style=&#34;color:#f60&#34;&gt;41030&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; rail
     &lt;span style=&#34;color:#f60&#34;&gt;41030&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;             &lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; ferry
(&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can now perform the &lt;code&gt;JOIN&lt;/code&gt;&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;.typname,
  enum.enumlabel &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; value
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt; pg_enum &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; enum
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_type &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;.oid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; enum.enumtypid)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;BY&lt;/span&gt; enum.enumlabel,
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;.typname;

  typname  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; value
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-----------+--------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt; weather   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; cloudy
 transport &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; ferry
 transport &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; bus
 transport &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; tram
 transport &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; rail
 weather   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; rainy
 weather   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; sunny
 weather   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; snow
(&lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This query needs a &lt;code&gt;GROUP BY&lt;/code&gt; due to the fact that there are multiple rows representing a single Enum&amp;rsquo;s values.&lt;/p&gt;

&lt;p&gt;This result gives us everything we want in most cases. But sometimes we want to get a single row with an Enum and all it&amp;rsquo;s values. This can be accomplished by the use of Postgres&amp;rsquo; &lt;a href=&#34;https://www.postgresql.org/docs/9.0/functions-aggregate.html&#34;&gt;&lt;code&gt;string_agg&lt;/code&gt;&lt;/a&gt; function.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;.typname &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; name,
  string_agg(enum.enumlabel, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;|&amp;#39;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; value
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt; pg_enum &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; enum
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_type &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; (&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;.oid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; enum.enumtypid)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;GROUP&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;BY&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;type&lt;/span&gt;.typname;

   name    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;          value
&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-----------+-------------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt; transport &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; bus&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;tram&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;rail&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;ferry
 weather   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; sunny&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;rainy&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;cloudy&lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;snow
(&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our choice of &lt;code&gt;|&lt;/code&gt; as the separator is arbitrary, but it is important to remember that Postgres does allow blanks in Enum values and using blank as the separator will lead to unexpected and wrong results. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Postgres does not display values of &lt;code&gt;oid&lt;/code&gt; columns of catalogs by default. It has to be explicitly queried for.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Being bit hard by this issue is how I learned about this.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Viewing Sequence ownership information in Postgres</title>
      <link>https://sadique.io/blog/2019/05/07/viewing-sequence-ownership-information-in-postgres/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Tue, 07 May 2019 18:04:42 -0700</pubDate>
      
      <guid>https://sadique.io/blog/2019/05/07/viewing-sequence-ownership-information-in-postgres/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;This blog post is an exercise in identifying all the &lt;code&gt;sequences&lt;/code&gt; in a PostgreSQL database that is associated with a table column via an &lt;code&gt;OWNED BY&lt;/code&gt; relationship. Figuring out how to do this was harder than it should have been and this journals my understanding of it.&lt;/p&gt;

&lt;p&gt;When I first started looking at this, I ended up at this Stack Overflow &lt;a href=&#34;https://stackoverflow.com/questions/9900346/how-do-you-view-new-sequence-ownership-information-in-postgres-after-using-alter&#34;&gt;answer&lt;/a&gt; from 2012. While that seemed to work, it is fair to say that I had no idea what it did. So, I set out to understand it and hopefully improve it.&lt;/p&gt;

&lt;p&gt;We will start by creating a &lt;code&gt;table&lt;/code&gt; that we will later associate a &lt;code&gt;sequence&lt;/code&gt; with.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;TABLE&lt;/span&gt; users
  (
     id   &lt;span style=&#34;color:#366&#34;&gt;BIGINT&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;NULL&lt;/span&gt;,
     NAME &lt;span style=&#34;color:#366&#34;&gt;VARCHAR&lt;/span&gt;(&lt;span style=&#34;color:#f60&#34;&gt;40&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;NOT&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;NULL&lt;/span&gt;
  );&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Next, we will create a sequence that is not going to be owned by any columns - a freehanging sequence.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SEQUENCE freehanging;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Postgres stores &lt;code&gt;sequence&lt;/code&gt;s across two different catalogs - &lt;a href=&#34;https://www.postgresql.org/docs/current/catalog-pg-sequence.html&#34;&gt;&lt;code&gt;pg_sequence&lt;/code&gt;&lt;/a&gt; and &lt;a href=&#34;https://www.postgresql.org/docs/current/catalog-pg-class.html&#34;&gt;&lt;code&gt;pg_class&lt;/code&gt;&lt;/a&gt;. Catalog &lt;code&gt;pg_sequence&lt;/code&gt; contains sequence parameters like &lt;code&gt;seqstart&lt;/code&gt;, &lt;code&gt;seqincrement&lt;/code&gt; etc. The rest of the information gets stored in &lt;code&gt;pg_class&lt;/code&gt; catalog with the &lt;code&gt;seqlrelid&lt;/code&gt; column in &lt;code&gt;pg_sequence&lt;/code&gt; pointing to the corresponding &lt;code&gt;pg_class&lt;/code&gt; entry.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;\&lt;/span&gt;x
Expanded display &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;is&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;on&lt;/span&gt;.

&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_sequence;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;seqrelid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41000&lt;/span&gt;
seqtypid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;
seqstart     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqincrement &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqmax       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9223372036854775807&lt;/span&gt;
seqmin       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqcache     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqcycle     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That has the information that Postgres can use, but it does not look particularly useful to a human being. Luckily, Postgres provides a &lt;code&gt;view&lt;/code&gt; named &lt;a href=&#34;https://www.postgresql.org/docs/10/view-pg-sequences.html&#34;&gt;&lt;code&gt;pg_sequences&lt;/code&gt;&lt;/a&gt; that shows us more information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_sequences;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;-+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;schemaname    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt;
sequencename  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; freehanging
sequenceowner &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; todo
data_type     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bigint&lt;/span&gt;
start_value   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
min_value     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
max_value     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9223372036854775807&lt;/span&gt;
increment_by  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;cycle&lt;/span&gt;         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
cache_size    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
last_value    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can query &lt;code&gt;pg_class&lt;/code&gt; with our &lt;code&gt;seqrelid&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  relfilenode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41000&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------+------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;relname             &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; freehanging
relnamespace        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2200&lt;/span&gt;
reltype             &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41001&lt;/span&gt;
reloftype           &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relowner            &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;24576&lt;/span&gt;
relam               &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relfilenode         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41000&lt;/span&gt;
reltablespace       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relpages            &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
reltuples           &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
relallvisible       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
reltoastrelid       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relhasindex         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relisshared         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relpersistence      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; p
relkind             &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; S
relnatts            &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;
relchecks           &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relhasoids          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relhasrules         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relhastriggers      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relhassubclass      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relrowsecurity      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relforcerowsecurity &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relispopulated      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
relreplident        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; n
relispartition      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relrewrite          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relfrozenxid        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relminmxid          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relacl              &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
reloptions          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
relpartbound        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can create a second sequence we want to associate with the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SEQUENCE users_id_seq;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;CREATE&lt;/span&gt; SEQUENCE&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will now show up in our queries.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_sequence;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;seqrelid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41000&lt;/span&gt;
seqtypid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;
seqstart     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqincrement &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqmax       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9223372036854775807&lt;/span&gt;
seqmin       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqcache     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqcycle     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;seqrelid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41002&lt;/span&gt;
seqtypid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;
seqstart     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqincrement &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqmax       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9223372036854775807&lt;/span&gt;
seqmin       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqcache     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
seqcycle     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f

&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_sequences;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;-+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;schemaname    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt;
sequencename  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; freehanging
sequenceowner &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; todo
data_type     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bigint&lt;/span&gt;
start_value   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
min_value     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
max_value     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9223372036854775807&lt;/span&gt;
increment_by  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;cycle&lt;/span&gt;         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
cache_size    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
last_value    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;-+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;--------------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;schemaname    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt;
sequencename  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users_id_seq
sequenceowner &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; todo
data_type     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;bigint&lt;/span&gt;
start_value   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
min_value     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
max_value     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;9223372036854775807&lt;/span&gt;
increment_by  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;cycle&lt;/span&gt;         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
cache_size    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
last_value    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can perform a &lt;code&gt;join&lt;/code&gt; on these catalogs.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; seqclass.relname,
       seqclass.relfilenode
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seqclass
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_sequence &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seq
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seqclass.relfilenode );

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;relname     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; freehanging
relfilenode &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41000&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;relname     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users_id_seq
relfilenode &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41002&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can go ahead and associate the new sequence with the &lt;code&gt;users&lt;/code&gt; table by specifying &lt;code&gt;OWNED BY&lt;/code&gt;. By setting &lt;code&gt;OWNED BY&lt;/code&gt;, we are specifying that if the column is dropped, we want the sequence to be dropped as well.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;=&amp;gt; ALTER SEQUENCE users_id_seq OWNED BY users.id;

ALTER SEQUENCE
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This association is recorded by Postgres in the &lt;a href=&#34;https://www.postgresql.org/docs/current/catalog-pg-depend.html&#34;&gt;&lt;code&gt;pg_depend&lt;/code&gt;&lt;/a&gt; catalog, using an &lt;code&gt;a&lt;/code&gt; dependency type.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;DEPENDENCY_AUTO (a)&lt;/p&gt;

&lt;p&gt;The dependent object can be dropped separately from the referenced object, and should be automatically dropped (regardless of RESTRICT or CASCADE mode) if the referenced object is dropped. Example: a named constraint on a table is made autodependent on the table, so that it will go away if the table is dropped.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_depend
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  objid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41002&lt;/span&gt;
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AND&lt;/span&gt; deptype &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;classid     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1259&lt;/span&gt;
objid       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41002&lt;/span&gt;
objsubid    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
refclassid  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1259&lt;/span&gt;
refobjid    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;
refobjsubid &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
deptype     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; a&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also verify that the &lt;code&gt;freehanging&lt;/code&gt; sequence has no dependencies of type &lt;code&gt;a&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_depend
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  objid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41000&lt;/span&gt;
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AND&lt;/span&gt; deptype &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;a&amp;#39;&lt;/span&gt;;

(&lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;rows&lt;/span&gt;)&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a dependency identified for this relationship, we can verify that the dependency is indeed with the &lt;code&gt;users&lt;/code&gt; table. For this, we will query using the dependency&amp;rsquo;s &lt;code&gt;refobjid&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  relfilenode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------+------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;relname             &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users
relnamespace        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2200&lt;/span&gt;
reltype             &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40999&lt;/span&gt;
reloftype           &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relowner            &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;24576&lt;/span&gt;
relam               &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relfilenode         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;
reltablespace       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relpages            &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
reltuples           &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relallvisible       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
reltoastrelid       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relhasindex         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relisshared         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relpersistence      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; p
relkind             &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; r
relnatts            &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;
relchecks           &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relhasoids          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relhasrules         &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relhastriggers      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relhassubclass      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relrowsecurity      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relforcerowsecurity &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relispopulated      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
relreplident        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; d
relispartition      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
relrewrite          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
relfrozenxid        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;5021&lt;/span&gt;
relminmxid          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
relacl              &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
reloptions          &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
relpartbound        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can indeed see that the dependency is on the &lt;code&gt;users&lt;/code&gt; table.&lt;/p&gt;

&lt;p&gt;What about the column associated with this dependency? Postgres stores information about table columns in &lt;a href=&#34;https://www.postgresql.org/docs/current/catalog-pg-attribute.html&#34;&gt;&lt;code&gt;pg_attribute&lt;/code&gt;&lt;/a&gt; catalog. We can verify that the dependency is on the &lt;code&gt;id&lt;/code&gt; column, by querying &lt;code&gt;pg_attribute&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;*&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_attribute
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  attrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AND&lt;/span&gt; attnum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;-+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;attrelid      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;
attname       &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; id
atttypid      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;20&lt;/span&gt;
attstattarget &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
attlen        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;8&lt;/span&gt;
attnum        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
attndims      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
attcacheoff   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
atttypmod     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;
attbyval      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
attstorage    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; p
attalign      &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; d
attnotnull    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
atthasdef     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
atthasmissing &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
attidentity   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
attisdropped  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; f
attislocal    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; t
attinhcount   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
attcollation  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;0&lt;/span&gt;
attacl        &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
attoptions    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
attfdwoptions &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;
attmissingval &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can see that the column corresponding to the dependency is indeed &lt;code&gt;id&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Our &lt;code&gt;join&lt;/code&gt; can now be improved to use this information. First, we will add the table name:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; seqclass.relname     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; sequence_name,
       seqclass.relfilenode &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; sequenceref,
       dep.refobjid         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; depobjref,
       depclass.relname     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seqclass
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_sequence &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seq
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seqclass.relfilenode )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_depend &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; dep
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.objid )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; depclass
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( dep.refobjid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; depclass.relfilenode );

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;sequence_name &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users_id_seq
sequenceref  &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41002&lt;/span&gt;
depobjref    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We have to join twice on the &lt;code&gt;pg_class&lt;/code&gt; catalog - once to get the &lt;code&gt;sequence&lt;/code&gt;&amp;rsquo;s columns and once to get the &lt;code&gt;dependency&lt;/code&gt;&amp;rsquo;s columns. This leaves us with the name of the table and the sequence name.&lt;/p&gt;

&lt;p&gt;Finally, we can perform a join on &lt;code&gt;pg_attribute&lt;/code&gt; to get column information.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; seqclass.relname     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; sequence_name,
       seqclass.relfilenode &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; sequenceref,
       dep.refobjid         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; depobjref,
       depclass.relname     &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; tabl_ename,
       attrib.attname       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;column_name&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seqclass
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_sequence &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seq
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seqclass.relfilenode )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_depend &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; dep
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.objid )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; depclass
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( dep.refobjid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; depclass.relfilenode )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_attribute &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; attrib
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( attrib.attnum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.refobjsubid
              &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AND&lt;/span&gt; attrib.attrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.refobjid );

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;sequence_name &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users_id_seq
sequenceref   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;41002&lt;/span&gt;
depobjref     &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;40997&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;column_name&lt;/span&gt;   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can drop &lt;code&gt;sequenceref&lt;/code&gt; and &lt;code&gt;depobjref&lt;/code&gt; from the result as it is not of particular interest to us when reporting this.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; seqclass.relname &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; sequence_name,
       depclass.relname &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;,
       attrib.attname   &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;column_name&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seqclass
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_sequence &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seq
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; seqclass.relfilenode )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_depend &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; dep
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seq.seqrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.objid )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; depclass
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( dep.refobjid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; depclass.relfilenode )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_attribute &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; attrib
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( attrib.attnum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.refobjsubid
              &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AND&lt;/span&gt; attrib.attrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.refobjid );

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;sequenc_ename &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users_id_seq
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;column_name&lt;/span&gt;   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;postgres-versions-before-10&#34;&gt;Postgres versions before 10&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;pg_sequence&lt;/code&gt; catalog was introduced in Postgres 10. For versions before 10, we need another way to get hold of the sequence&amp;rsquo;s representation in &lt;code&gt;pg_class&lt;/code&gt; so that we can look up the dependencies. Luckily, &lt;code&gt;pg_class&lt;/code&gt; has a column &lt;code&gt;relkind&lt;/code&gt; that holds this informations. For a sequence, this column will be &lt;code&gt;S&lt;/code&gt;. We can use this in the &lt;code&gt;join&lt;/code&gt; instead of &lt;code&gt;pg_sequence&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sql&#34; data-lang=&#34;sql&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;=&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;SELECT&lt;/span&gt; seqclass.relname &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; sequence_name,
       depclass.relname &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;,
       attrib.attname   &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;column_name&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;FROM&lt;/span&gt;   pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; seqclass
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_depend &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; dep
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( seqclass.relfilenode &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.objid )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_class &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; depclass
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( dep.refobjid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; depclass.relfilenode )
       &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;JOIN&lt;/span&gt; pg_attribute &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AS&lt;/span&gt; attrib
         &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;ON&lt;/span&gt; ( attrib.attnum &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.refobjsubid
              &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;AND&lt;/span&gt; attrib.attrelid &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; dep.refobjid )
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;WHERE&lt;/span&gt;  seqclass.relkind &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;S&amp;#39;&lt;/span&gt;;

&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;[ RECORD &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; ]&lt;span style=&#34;color:#555&#34;&gt;-+&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;-------------
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;sequence_name &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users_id_seq
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;table_name&lt;/span&gt;    &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; users
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;column_name&lt;/span&gt;   &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; id&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This seems like information that should be surfaced by Postgres in an easier to access way. In fact there is a patch from &lt;a href=&#34;https://web.archive.org/web/20190508035646/https://www.postgresql.org/message-id/1228622212.10877.59.camel%40godzilla.local.scalefeather.com&#34;&gt;2008&lt;/a&gt; that would have introduced this capability. When Postgres 10 introduced the &lt;a href=&#34;https://web.archive.org/web/20190508035646/https://www.postgresql.org/message-id/1228622212.10877.59.camel%40godzilla.local.scalefeather.com&#34;&gt;&lt;code&gt;pg_sequences&lt;/code&gt;&lt;/a&gt; catalog, it stopped at surfacing the id of the user who owns the sequence.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Understanding trailing @ processing in SAS input</title>
      <link>https://sadique.io/blog/2019/03/23/understanding-trailing-processing-in-sas-input/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 23 Mar 2019 19:46:08 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2019/03/23/understanding-trailing-processing-in-sas-input/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;One of the first things I noticed when I started poking around in SAS code is that the &lt;code&gt;input&lt;/code&gt; statement is very powerful, flexible and hence sometimes hard to understand. It can read pretty much anything in to a dataset as long as you tell it what to do.&lt;/p&gt;

&lt;p&gt;The use of trailing &lt;code&gt;@&lt;/code&gt;s to take control of how SAS advances the input pointer is a powerful technique to read from input files where the data is laid out in non-standard formats. In this blog post, we will try to understand how trailing &lt;code&gt;@&lt;/code&gt; processing works with the help of some &lt;code&gt;infile&lt;/code&gt; statement options and the &lt;code&gt;putlog&lt;/code&gt; statement to write to the SAS log.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take this example from the excellent paper &lt;em&gt;The Input Statement: Where It&amp;rsquo;s @&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; - given an put file where the first variable has to be read beginning from a particular column in the input line based on the value of the second variable.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;Age  Type
23   1
  44 2&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A first pass at trying to do this will result in code like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;data ages;
  input @6 type $1.;

  if type=&amp;#39;1&amp;#39; then
    input @1 age 2.;
  else if type=&amp;#39;2&amp;#39; then
    input @3 age 2.;
  drop type;
  datalines;
23   1
  44 2
;
run;

proc print data=ages;
  title &amp;#34;Age read without trailing @&amp;#34;;
run;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The result we get is not what we expect.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;| Obs | Age |
|-----|-----|
| 1   | .   |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can understand how SAS read this input using the &lt;code&gt;line=&lt;/code&gt; and &lt;code&gt;column=&lt;/code&gt; options of the &lt;code&gt;infile&lt;/code&gt; statement. While the code in the above listing does not explicitly use &lt;code&gt;infile&lt;/code&gt; to point at the &lt;code&gt;datalines&lt;/code&gt;, this can be done when we want to use &lt;code&gt;infile&lt;/code&gt;&amp;rsquo;s options with &lt;code&gt;datalines&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This is a good time to remind us what the &lt;code&gt;line=&lt;/code&gt; and &lt;code&gt;column=&lt;/code&gt; options of &lt;code&gt;infile&lt;/code&gt; does. From the &lt;a href=&#34;https://documentation.sas.com/?docsetId=lestmtsref&amp;amp;docsetTarget=n1rill4udj0tfun1fvce3j401plo.htm&amp;amp;docsetVersion=9.4&amp;amp;locale=en&#34;&gt;documentation&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;LINE=variable&lt;/p&gt;

&lt;p&gt;specifies a variable that SAS sets to the line location of the input pointer in the input buffer. As with automatic variables, the LINE= variable is not written to the data set.&lt;/p&gt;

&lt;p&gt;COLUMN=variable&lt;/p&gt;

&lt;p&gt;names a variable that SAS uses to assign the current column location of the input pointer. As with automatic variables, the COLUMN= variable is not written to the data set.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;We can modify our code to set these options and then print the value of all variables including these options using the &lt;code&gt;_all_&lt;/code&gt; variable that prints the &lt;em&gt;Program Data Vector (PDV)&lt;/em&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;data ages;
  infile datalines line=line column=col;

  input @6 type $1.;
  putlog &amp;#34;After reading type, before reading age: &amp;#34; _all_ ;

  if type=&amp;#39;1&amp;#39; then
    input @1 age 2.;
  else if type=&amp;#39;2&amp;#39; then
    input @3 age 2.;
  putlog &amp;#34;After reading age: &amp;#34; _all_ ;
  putlog &amp;#34;&amp;#34;;

  drop type;
  datalines;
23   1
  44 2
;
run;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When the code runs, the following can be seen in the SAS logs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt; After reading type, before reading age: line=1 col=7 type=1 age=. _ERROR_=0 _N_=1
 After reading age: line=2 col=3 type=1 age=. _ERROR_=0 _N_=1
 &amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After &lt;code&gt;type&lt;/code&gt; is read, we can see that the pointer is at line &lt;code&gt;1&lt;/code&gt; and column &lt;code&gt;7&lt;/code&gt;, which makes sense considering that the code instructs SAS to go to column &lt;code&gt;6&lt;/code&gt; and read &lt;code&gt;1&lt;/code&gt; character. But then we notice that when &lt;code&gt;age&lt;/code&gt; is read, the pointer has moved to &lt;code&gt;2&lt;/code&gt; and column &lt;code&gt;3&lt;/code&gt; as instructed in the first branch of the &lt;code&gt;if else&lt;/code&gt; condition. Since there is nothing at column &lt;code&gt;1-2&lt;/code&gt; of line &lt;code&gt;2&lt;/code&gt; in the input, a missing value is stored in &lt;code&gt;age&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;What we want is some way to tell &lt;code&gt;input&lt;/code&gt; to ot move the pointer after the first input statement. This is where the single trailing &lt;code&gt;@&lt;/code&gt; comes in. It intructs &lt;code&gt;input&lt;/code&gt; to stay on the same line for the next &lt;code&gt;input&lt;/code&gt; statement in the &lt;code&gt;data&lt;/code&gt; step. The above listing modified to use trailing &lt;code&gt;@&lt;/code&gt; is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;data trailing;
  infile datalines line=line column=col;

  input @6 type $1. @;
  putlog &amp;#34;After reading type, before reading age: &amp;#34; _all_ ;

  if type=&amp;#39;1&amp;#39; then
    input @1 age 2.;
  else if type=&amp;#39;2&amp;#39; then
    input @3 age 2.;
  putlog &amp;#34;After reading age: &amp;#34; _all_ ;
  putlog &amp;#34;&amp;#34;;

  drop type;
  datalines;
23   1
  44 2
;
run;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The following log lines are written:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt; After reading type, before reading age: line=1 col=7 type=1 age=. _ERROR_=0 _N_=1
 After reading age: line=1 col=3 type=1 age=23 _ERROR_=0 _N_=1
 &amp;#34;
 After reading type, before reading age: line=1 col=7 type=2 age=. _ERROR_=0 _N_=2
 After reading age: line=1 col=5 type=2 age=44 _ERROR_=0 _N_=2
 &amp;#34;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The log shows that &lt;code&gt;input&lt;/code&gt; stayed on line &lt;code&gt;1&lt;/code&gt; even after reading the &lt;code&gt;type&lt;/code&gt; variable.&lt;/p&gt;

&lt;p&gt;The new dataset has the expected values:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;| Obs | Age |
|-----|-----|
| 1   | 23  |
| 2   | 44  |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here is another example that you often run in to on the internet when discussing trailing &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;data  colors;
  infile datalines line=linenum column=col;
  input @1 Var1 $ @8 Var2 $ @;
  putlog &amp;#34;After reading Var1 and Var2: &amp;#34; _all_;

  input @1 Var3 $ @8 Var4 $ ;
  putlog &amp;#34;After reading Var3 and Var4: &amp;#34; _all_;
  putlog &amp;#34;&amp;#34;;

  datalines;
RED    ORANGE  YELLOW  GREEN
BLUE   INDIGO  PURPLE  VIOLET
CYAN   WHITE   FUCSIA  BLACK
GRAY   BROWN   PINK    MAGENTA
;
run;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This results in the following dataset:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;|Obs  | Var1 | Var2   | Var3 | Var4   |
|-----|------|--------|------|--------|
| 1   | RED  | ORANGE | RED  | ORANGE |
| 2   | BLUE | INDIGO | BLUE | INDIGO |
| 3   | CYAN | WHITE  | CYAN | WHITE  |
| 4   | GRAY | BROWN  | GRAY | BROWN  |&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Because of the trailing &lt;code&gt;@&lt;/code&gt; in the first &lt;code&gt;input&lt;/code&gt; statement, the values of &lt;code&gt;Var1&lt;/code&gt; and &lt;code&gt;Var3&lt;/code&gt; for all the observations are the same, as both are read from column &lt;code&gt;1&lt;/code&gt;. Similarly &lt;code&gt;Var2&lt;/code&gt; and &lt;code&gt;Var4&lt;/code&gt; are the same as they are read from column &lt;code&gt;8&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;The Input Statement: Where It&amp;rsquo;s @. Paper 253-29, SUGI 29 Proceedings.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Importing the SASUSER datasets in SAS Studio</title>
      <link>https://sadique.io/blog/2019/03/23/importing-the-sasuser-datasets-in-sas-studio/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 23 Mar 2019 18:14:06 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2019/03/23/importing-the-sasuser-datasets-in-sas-studio/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;I have been playing around with SAS for the last two weeks. I started with a SAS University Edition running on a VirtualBox instance on my MacBook, but soon realized that it was way more convenient to use a SAS OnDemand account. Having made the switch, I realized that all learning materials made references to and used examples with datsets from a library named &lt;code&gt;SASUSER&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It was not clear how to get these datasets and use them in SAS Studio. After a bunch of searches, I found &lt;a href=&#34;https://communities.sas.com/t5/SAS-Certification/How-to-get-SASUSER-library-s-data-sets/m-p/306631/highlight/true#M124&#34;&gt;this page&lt;/a&gt; that pointed at data set up scripts for these datasets. The URL it pointed to had of course been repurposed and now redirected to a marketing page. After going back through multiple versions of the page on Internet Archive, I finally managed to find a &lt;a href=&#34;https://web.archive.org/web/20151005165134/http://support.sas.com:80/publishing/cert/basecertguide3.html&#34;&gt;snapshot&lt;/a&gt; that linked to a set up file that worked.&lt;/p&gt;

&lt;p&gt;Here are the steps to use the setup script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://support.sas.com/content/dam/SAS/support/en/books/data/sampledata.txt&#34;&gt;script&lt;/a&gt;. Depending on the version of the material you are using, you may want to grab an &lt;a href=&#34;https://web.archive.org/web/20150921023746/http://support.sas.com/publishing/cert/sampdata.txt&#34;&gt;older snapshot&lt;/a&gt; from the Internet Archive.&lt;/li&gt;
&lt;li&gt;Rename the file so that it&amp;rsquo;s extension is changed to &lt;code&gt;.sas&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a directory under your home directory in SAS Studio, for example &lt;code&gt;sasuser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Upload the sample data script from step 1 to this folder, using the web interface.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Create a new SAS source file named &lt;code&gt;libname.sas&lt;/code&gt; with the following content:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;libname sasuser &amp;#34;~/sasuser&amp;#34;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Execute this script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Now execute the sample data script.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;It should create all the datsets you need in the library named &lt;code&gt;sasuser&lt;/code&gt;. You can verify this using the following script:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;proc contents data=sasuser._all_ nods;
run;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>My talk at GraphQL Summit 2018</title>
      <link>https://sadique.io/blog/2018/11/10/my-talk-at-graphql-summit-2018/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 10 Nov 2018 02:12:47 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/11/10/my-talk-at-graphql-summit-2018/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;I had the opportunity to give a talk at &lt;a href=&#34;https://summit.graphql.com/&#34;&gt;GraphQL Summit 2018&lt;/a&gt; about the experience of introducing GraphQL for our &lt;a href=&#34;https://graphql.braintreepayments.com/&#34;&gt;Payments API&lt;/a&gt; at &lt;a href=&#34;https://www.braintreepayments.com/&#34;&gt;Braintree&lt;/a&gt;. It was well received, as far as I could tell - I received a lot of nice feedback and had great conversations with members of the community.&lt;/p&gt;

&lt;p&gt;The slides are available here on &lt;a href=&#34;https://speakerdeck.com/sdqali/graphql-for-a-payments-api&#34;&gt;SpeakerDeck&lt;/a&gt;. &lt;del&gt;I will update this post with links to the video of my talk when it becomes available&lt;/del&gt; The video of the talk is available &lt;a href=&#34;https://www.youtube.com/watch?v=NKMDBH0CWHs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Francesca Guiducci took this photo:
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This was the only time I read &amp;quot;java&amp;quot; on the big screen during this conference that was not part of the word &amp;quot;javascript&amp;quot;! Thanks &lt;a href=&#34;https://twitter.com/sdqali?ref_src=twsrc%5Etfw&#34;&gt;@sdqali&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/graphqlsummit?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#graphqlsummit&lt;/a&gt; &lt;a href=&#34;https://t.co/3zAO5TLdYY&#34;&gt;pic.twitter.com/3zAO5TLdYY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Francesca Guiducci (@engfragui) &lt;a href=&#34;https://twitter.com/engfragui/status/1060683834058956800?ref_src=twsrc%5Etfw&#34;&gt;November 9, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formatting Java Instant for resolutions</title>
      <link>https://sadique.io/blog/2018/06/09/formatting-java-instant-for-resolutions/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 09 Jun 2018 18:55:23 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/06/09/formatting-java-instant-for-resolutions/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;I have had to look up how to format Java&amp;rsquo;s Instant with a given resolution - for example in microseconds or nanoseconds. After fiddling with various formatters, I was happy to finally get this right.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;void&lt;/span&gt; shouldFormatWith7Decimals() {
  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;resolution&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; 7;
  DateTimeFormatter &lt;span style=&#34;color:#c0f&#34;&gt;dateTimeFormatter&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; DateTimeFormatterBuilder()
    .&lt;span style=&#34;color:#309&#34;&gt;appendInstant&lt;/span&gt;(resolution)
    .&lt;span style=&#34;color:#309&#34;&gt;toFormatter&lt;/span&gt;();
  Instant &lt;span style=&#34;color:#c0f&#34;&gt;instant&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Instant.&lt;span style=&#34;color:#309&#34;&gt;now&lt;/span&gt;();
  System.&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;(dateTimeFormatter.&lt;span style=&#34;color:#309&#34;&gt;format&lt;/span&gt;(instant));
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>FreeBuilder plugin for IntelliJ</title>
      <link>https://sadique.io/blog/2018/05/05/freebuilder-plugin-for-intellij/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 05 May 2018 05:27:35 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/05/05/freebuilder-plugin-for-intellij/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;My work uses &lt;a href=&#34;http://freebuilder.inferred.org/&#34;&gt;FreeBuilder&lt;/a&gt; extensively to generate the &lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder&lt;/a&gt; pattern for Java classes. In addition to this, we use the generated Builder classes to deserialize the data calsses using Jackson. After a while it became tiresome to type &lt;code&gt;@FreeBuilder&lt;/code&gt; and &lt;code&gt;class Builder extends ...&lt;/code&gt; everywhere. So I decided to write and IntelliJ IDEA plugin that does it for me.&lt;/p&gt;

&lt;p&gt;These are the things I wanted the plugin to do for me:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Annotate the public class from the current file with &lt;code&gt;@FreeBuilder&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Create an inner class for the annotated class - this should be a &lt;code&gt;static&lt;/code&gt; class if the annotated class is an &lt;code&gt;abstract&lt;/code&gt; class and a child class if the annotated class is an &lt;code&gt;interface&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that the generated &lt;code&gt;Builder&lt;/code&gt; class is annotated with &lt;code&gt;@JsonIgnoreProperties(ignoreUnknown=true)&lt;/code&gt; because this is a convention we like to follow.&lt;/li&gt;
&lt;li&gt;Ensure that the parent class gets annotated with &lt;code&gt;@JsonDeserialize(builder=...)&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Rebuild the project so that the annotation processing for FreeBuilder runs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After poking around the IntelliJ Plugin development documentation, I was able to write a simple enough plugin that does it. For whatever reason, trying to find how to achieve simple things like how to create a new class that you can add as a child to an existing class was painful.&lt;/p&gt;

&lt;p&gt;The plugin is available &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10705-freebuilder-plugin&#34;&gt;here&lt;/a&gt; from the IntelliJ plugin repository and the source code is here on &lt;a href=&#34;https://github.com/sdqali/freebuilder-intellij-plugin&#34;&gt;GitHub&lt;/a&gt;. In addition to the above mentioned features, I wanted to make sure that the annotations gets added only if the annoattion classes were in the classpath of the current module. The plugin also displayes messages when it decides to skip a step because an annotation class was not in the classpath or because nnotations already exist on the class.&lt;/p&gt;

&lt;p&gt;A short demo of the plugin in action is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sadique.io/images/freebuilder-plugin-demo.gif&#34; alt=&#34;&amp;quot;FreeBuilder Plugin Demo&amp;quot;&#34; title=&#34;FreeBuilder Plugin Demo&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Command line clients for gRPC - polyglot</title>
      <link>https://sadique.io/blog/2018/04/06/command-line-clients-for-grpc-polyglot/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 06 Apr 2018 05:45:08 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/04/06/command-line-clients-for-grpc-polyglot/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;Polyglot was the second gRPC client that I looked at. One of the things that I liked about it is the fact that it does not need users to generate &lt;code&gt;protoset&lt;/code&gt; files. It generates the protoset files in flight every time it runs. This, combined with the fact that it is written in Java does have a disadvantage - every time the client makes a call, it has to fire up a JVM, generate protosets and make the request.&lt;/p&gt;

&lt;p&gt;You run polyglot by using the distributed polyglot jar. To list all the services available on an endpoint, polyglot can be executed as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;list_services &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --proto_discovery_root&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$PROTO_DISCOVERY_ROOT&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:

manualflowcontrol.StreamingGreeter -&amp;gt; /Users/sdqali/src/grpc/grpc-java/examples/src/proto/hello_streaming.proto
manualflowcontrol.StreamingGreeter/SayHelloStreaming

routeguide.RouteGuide -&amp;gt; /Users/sdqali/src/grpc/grpc-java/examples/src/proto/route_guide.proto
routeguide.RouteGuide/GetFeature
routeguide.RouteGuide/ListFeatures
routeguide.RouteGuide/RecordRoute
routeguide.RouteGuide/RouteChat

helloworld.Greeter -&amp;gt; /Users/sdqali/src/grpc/grpc-java/examples/src/proto/helloworld.proto
helloworld.Greeter/SayHello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;code&gt;call&lt;/code&gt; can be issued to execute a particular service method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{&amp;#39;name&amp;#39;: &amp;#39;World&amp;#39;}&amp;#34;&lt;/span&gt; | java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;call &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --full_method&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;helloworld.Greeter/SayHello &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --endpoint&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;localhost:50051 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --proto_discovery_root&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$PROTO_DISCOVERY_ROOT&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating channel to: localhost:50051
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Using proto descriptors obtained from protoc
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating dynamic grpc client
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Making rpc with &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; to endpoint &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;localhost:50051&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.grpc.DynamicGrpcClient - Making unary call
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;grpc-default-executor-0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.io.LoggingStatsWriter - Got response message
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;grpc-default-executor-0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.io.LoggingStatsWriter - Completed rpc with &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; response&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how we are passing path to proto files and polyglot executes &lt;code&gt;protoc&lt;/code&gt; on them to get protosets.
With reflection turned ON, we no longer need to provide a path to the proto files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{&amp;#39;name&amp;#39;: &amp;#39;World&amp;#39;}&amp;#34;&lt;/span&gt; | java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;call &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --full_method&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;helloworld.Greeter/SayHello &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --endpoint&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;localhost:50051 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --use_reflection&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating channel to: localhost:50051
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Using proto descriptors fetched by reflection
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating dynamic grpc client
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Making rpc with &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; to endpoint &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;localhost:50051&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.grpc.DynamicGrpcClient - Making unary call
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;grpc-default-executor-0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.io.LoggingStatsWriter - Got response message
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is nice, except that reflection does not work for listing services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;list_services &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --endpoint&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;localhost:50051 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --use_reflection&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; WARN me.dinowernli.grpc.polyglot.Main - Caught top-level exception during &lt;span style=&#34;color:#366&#34;&gt;command&lt;/span&gt; execution
java.lang.IllegalArgumentException: A proto discovery root is required &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; proto analysis
  at com.google.common.base.Preconditions.checkArgument&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Preconditions.java:122&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.protobuf.ProtocInvoker.forConfig&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;ProtocInvoker.java:36&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.getFileDescriptorSet&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:93&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.main&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:62&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
Exception in thread &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt; java.lang.RuntimeException: java.lang.IllegalArgumentException: A proto discovery root is required &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; proto analysis
  at me.dinowernli.grpc.polyglot.Main.main&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:86&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
Caused by: java.lang.IllegalArgumentException: A proto discovery root is required &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; proto analysis
  at com.google.common.base.Preconditions.checkArgument&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Preconditions.java:122&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.protobuf.ProtocInvoker.forConfig&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;ProtocInvoker.java:36&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.getFileDescriptorSet&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:93&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.main&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:62&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was unexpected, as adding this capability to Polyglot should not be too diffcult, considering that they already support reflection for executing services. This is something that I am interested in implementing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Command line clients for gRPC - grpcurl</title>
      <link>https://sadique.io/blog/2018/04/04/command-line-clients-for-grpc-grpcurl/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Wed, 04 Apr 2018 05:40:08 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/04/04/command-line-clients-for-grpc-grpcurl/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;We are in the middle of considering replacing JSON over HTTP with gRPC for communication between our internal services. One of my concerns about this was how we would be able to debug and poke around things in a world where we will no longer be able to use cURL. I have been looking at cURL like command line utilities we can use to replace most of the capabilities, if not all of cURL. So far, I have looked at &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;grpcurl&lt;/a&gt;, &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md&#34;&gt;grpc_cli&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc-ecosystem/polyglot&#34;&gt;polyglot&lt;/a&gt; .In these blog posts, we will try and compare these tools.&lt;/p&gt;

&lt;p&gt;In this example, we will be running the example implementations provided by the &lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples&#34;&gt;grpc-java&lt;/a&gt; project and using the command line tools against the services from these examples. We will also be running these services without enabling reflection.&lt;/p&gt;

&lt;h2 id=&#34;grpcurl&#34;&gt;grpcurl&lt;/h2&gt;

&lt;p&gt;One of the things that immediately struck me when I started looking at grpcurl was how neat it&amp;rsquo;s command line interface was, especially in comparison with that of polyglot. grpcurl is written in Go and expects you to provide &lt;code&gt;protoset&lt;/code&gt; files that contain service descriptors exported from the &lt;code&gt;proto&lt;/code&gt; files of the service.&lt;/p&gt;

&lt;p&gt;For example, for the &lt;code&gt;hello-world&lt;/code&gt; service from the examples, the &lt;code&gt;protoset&lt;/code&gt; files can be generated using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span style=&#34;color:#366&#34;&gt;pwd&lt;/span&gt;
grpc-java/examples/src/main/proto
&amp;gt; protoc --proto_path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./ &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --descriptor_set_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;helloworld.protoset &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --include_imports &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    ./helloworld.proto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce a &lt;code&gt;protoset&lt;/code&gt; file named &lt;code&gt;helloworld.protoset&lt;/code&gt;. Using this, we can now list the services available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -protoset ./helloworld.protoset list
helloworld.Greeter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also list all the methods available in a service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -protoset ./helloworld.protoset list helloworld.Greeter
SayHello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also a describe command that produces description of a service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -protoset ./helloworld.protoset describe helloworld.Greeter
helloworld.Greeter is a service:
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Greeter&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SayHello&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inputType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.helloworld.HelloRequest&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.helloworld.HelloReply&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can execute the method on this service running on a server by specifying the address and the path to the method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -plaintext -protoset ./helloworld.protoset -d &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;World&amp;#34;}&amp;#39;&lt;/span&gt; localhost:50051 helloworld.Greeter/SayHello
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It can also read the JSON data to pass to the server from STDIN, by setting the value of &lt;code&gt;-d&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;World&amp;#34;}&amp;#39;&lt;/span&gt; | grpcurl -plaintext -protoset ./helloworld.protoset -d @ localhost:50051 helloworld.Greeter/SayHello
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In both these examples, we passed the &lt;code&gt;-plaintext&lt;/code&gt; switch because our server is not running with TLS.&lt;/p&gt;

&lt;p&gt;If we were to &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/master/documentation/server-reflection-tutorial.md&#34;&gt;turn on reflection&lt;/a&gt;, we will no longer need to depend on the &lt;code&gt;protoset&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;World&amp;#34;}&amp;#39;&lt;/span&gt; | grpcurl -plaintext -d @ localhost:50051 helloworld.Greeter/SayHello
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Overall, I like what the creator of grpcurl have done. The only thing I dont like is the fact that when reflection is turned off, we have to generate &lt;code&gt;protoset&lt;/code&gt; files. It would have been great if it could just look at the existing &lt;code&gt;proto&lt;/code&gt; files, which is what &lt;code&gt;polyglot&lt;/code&gt; does. We will look at polyglot in the next blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Jackson and FreeBuilder quirk</title>
      <link>https://sadique.io/blog/2018/03/23/a-jackson-and-freebuilder-quirk/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 23 Mar 2018 05:21:42 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/03/23/a-jackson-and-freebuilder-quirk/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;Jackson is a great tool to have in your tool set if you deal with JSON or XML. It facilitates easy serialization and de-serialization to and from Java classes with a convenient annotation based interface. With the same set of annotations, we can achieve both XML and JSON serialization and de-serialization. With Jackson&amp;rsquo;s &lt;code&gt;data-format-xml&lt;/code&gt; it is even possible to give the same Class a different JSON and XML representation.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlRootElement&lt;/span&gt;(localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user-account&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#99f&#34;&gt;@JsonRootName&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;class&lt;/span&gt; Account {
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;String&lt;/span&gt; name;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;String&lt;/span&gt; emailAddress;

  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;(localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;String&lt;/span&gt; getName() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; name;
  }

  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;(localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;String&lt;/span&gt; getEmailAddress() {
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; emailAddress;
  }

  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When this gets used, it does the serialization and de-serializaion to and from XML and JSON in different forms:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;jsonMapper &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ObjectMapper();
jsonMapper.&lt;span style=&#34;color:#309&#34;&gt;configure&lt;/span&gt;(WRAP_ROOT_VALUE, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;);
jsonMapper.&lt;span style=&#34;color:#309&#34;&gt;configure&lt;/span&gt;(UNWRAP_ROOT_VALUE, &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;);
xmlMapper &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; XmlMapper();

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
Account &lt;span style=&#34;color:#c0f&#34;&gt;account&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Account(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;);

String &lt;span style=&#34;color:#c0f&#34;&gt;jsonString&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper.&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;(account);
System.&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;(jsonString);
Account &lt;span style=&#34;color:#c0f&#34;&gt;deSerializedAccount&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper.&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;(jsonString, Account.&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;);
assertEquals(account, deSerializedAccount);

String &lt;span style=&#34;color:#c0f&#34;&gt;xmlString&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper.&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;(account);
System.&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;(xmlString);
deSerializedAccount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper.&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;(xmlString, Account.&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;);
assertEquals(account, deSerializedAccount);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}}&lt;/span&gt;
&amp;lt;user-account&amp;gt;&amp;lt;name&amp;gt;John Doe&amp;lt;/name&amp;gt;&amp;lt;email-address&amp;gt;john@example.com&amp;lt;/email-address&amp;gt;&amp;lt;/user-account&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things get really interesting when we introduce &lt;a href=&#34;http://freebuilder.inferred.org/&#34;&gt;FreeBuilder&lt;/a&gt;. FreeBuilder supports Jackson and we will be able to do serialization correctly. However, XML de-serialization does not work as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;cksonXmlRootElement(localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user-account&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#99f&#34;&gt;@JsonRootName&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#99f&#34;&gt;@FreeBuilder&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@JsonDeserialize&lt;/span&gt;(builder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Account.&lt;span style=&#34;color:#309&#34;&gt;Builder&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;interface&lt;/span&gt; Account {
  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;(localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;)
  String &lt;span style=&#34;color:#c0f&#34;&gt;getName&lt;/span&gt;();

  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;)
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;(localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;)
  String &lt;span style=&#34;color:#c0f&#34;&gt;getEmailAddress&lt;/span&gt;();

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;extends&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;Account_Builder&lt;/span&gt; {}
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Account &lt;span style=&#34;color:#c0f&#34;&gt;account&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Account.&lt;span style=&#34;color:#309&#34;&gt;Builder&lt;/span&gt;()
    .&lt;span style=&#34;color:#309&#34;&gt;setEmailAddress&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;)
    .&lt;span style=&#34;color:#309&#34;&gt;setName&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;)
    .&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;();

String &lt;span style=&#34;color:#c0f&#34;&gt;jsonString&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper.&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;(account);
System.&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;(jsonString);
Account &lt;span style=&#34;color:#c0f&#34;&gt;deSerializedAccount&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper.&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;(jsonString, Account.&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;);
assertEquals(account, deSerializedAccount);

String &lt;span style=&#34;color:#c0f&#34;&gt;xmlString&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper.&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;(account);
System.&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;.&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;(xmlString);
deSerializedAccount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper.&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;(xmlString, Account.&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;);
assertEquals(account, deSerializedAccount);&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will cause Jackson to throw an error while de-serializing XML, even though de-serializing to JSON works as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}}&lt;/span&gt;
&amp;lt;user-account&amp;gt;&amp;lt;name&amp;gt;John Doe&amp;lt;/name&amp;gt;&amp;lt;email-address&amp;gt;john@example.com&amp;lt;/email-address&amp;gt;&amp;lt;/user-account&amp;gt;

com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;class in.sdqali.json.Account&lt;span style=&#34;color:#033&#34;&gt;$Builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;, not marked as ignorable &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; known properties: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;emailAddress&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;])&lt;/span&gt;
 at &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;Source: &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;StringReader&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;; line: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column: &lt;span style=&#34;color:#f60&#34;&gt;83&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;through reference chain: in.sdqali.json.Account&lt;span style=&#34;color:#033&#34;&gt;$Builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After digging around, it turns out that FreeBuilder &lt;a href=&#34;https://github.com/inferred/FreeBuilder/blob/master/src/main/java/org/inferred/freebuilder/processor/JacksonSupport.java#L40&#34;&gt;keeps only&lt;/a&gt; the &lt;code&gt;@JsonProperty&lt;/code&gt; annotation on methods that it finds. This in turn causes the object created by the builder to have methods whose &lt;code&gt;@JacksonXmlProperty&lt;/code&gt; annotations are stripped of, which in turn causes Jackson to look for the camel-cased versions of the attribute names. I have opened a new &lt;a href=&#34;https://github.com/inferred/FreeBuilder/issues/294&#34;&gt;GitHub issue&lt;/a&gt; for this.&lt;/p&gt;

&lt;p&gt;Until this is resolved, if you use FreeBuilder and need to have different XML and JSON representation, you will have to write a custom Jackson &lt;a href=&#34;https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers&#34;&gt;Serializer&lt;/a&gt; and Deserializer.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
