<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{code that works} on {code that works}</title>
    <link>https://sdqali.in/?utm_source=site&amp;utm_medium=feed</link>
    <description>Recent content in {code that works} on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 23 Mar 2019 11:14:06 -0700</lastBuildDate>
    <atom:link href="/?utm_source=site&amp;utm_medium=feed" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Importing the SASUSER datasets in SAS Studio</title>
      <link>https://sdqali.in/blog/2019/03/23/importing-the-sasuser-datasets-in-sas-studio/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 23 Mar 2019 11:14:06 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2019/03/23/importing-the-sasuser-datasets-in-sas-studio/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;I have been playing around with SAS for the last two weeks. I started with a SAS University Edition running on a VirtualBox instance on my MacBook, but soon realized that it was way more convenient to use a SAS OnDemand account. Having made the switch, I realized that all learning materials made references to and used examples with datsets from a library named &lt;code&gt;SASUSER&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It was not clear how to get these datasets and use them in SAS Studio. After a bunch of searches, I found &lt;a href=&#34;https://communities.sas.com/t5/SAS-Certification/How-to-get-SASUSER-library-s-data-sets/m-p/306631/highlight/true#M124&#34;&gt;this page&lt;/a&gt; that pointed at data set up scripts for these datasets. The URL it pointed to had of course been repurposed and now redirected to a marketing page. After going back through multiple versions of the page on Internet Archive, I finally managed to find a &lt;a href=&#34;https://web.archive.org/web/20151005165134/http://support.sas.com:80/publishing/cert/basecertguide3.html&#34;&gt;snapshot&lt;/a&gt; that linked to a set up file that worked.&lt;/p&gt;

&lt;p&gt;Here are the steps to use the setup script:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Download the &lt;a href=&#34;https://support.sas.com/content/dam/SAS/support/en/books/data/sampledata.txt&#34;&gt;script&lt;/a&gt;. Depending on the version of the material you are using, you may want to grab an &lt;a href=&#34;https://web.archive.org/web/20150921023746/http://support.sas.com/publishing/cert/sampdata.txt&#34;&gt;older snapshot&lt;/a&gt; from the Internet Archive.&lt;/li&gt;
&lt;li&gt;Rename the file so that it&amp;rsquo;s extension is changed to &lt;code&gt;.sas&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Create a directory under your home directory in SAS Studio, for example &lt;code&gt;sasuser&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Upload the sample data script from step 1 to this folder, using the web interface.&lt;/li&gt;
&lt;li&gt;Create a new SAS source file named &lt;code&gt;libname.sas&lt;/code&gt; with the following content:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;libname sasuser &amp;#34;~/sasuser&amp;#34;;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;ul&gt;
&lt;li&gt;Execute this script.&lt;/li&gt;
&lt;li&gt;Now execute the sample data script.&lt;/li&gt;
&lt;li&gt;It should create all the datsets you need in the library named &lt;code&gt;sasuser&lt;/code&gt;. You can verify this using the following script:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-sas&#34; data-lang=&#34;sas&#34;&gt;proc contents data=sasuser._all_ nods;
run;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>My talk at GraphQL Summit 2018</title>
      <link>https://sdqali.in/blog/2018/11/09/my-talk-at-graphql-summit-2018/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 09 Nov 2018 18:12:47 -0800</pubDate>
      
      <guid>https://sdqali.in/blog/2018/11/09/my-talk-at-graphql-summit-2018/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;I had the opportunity to give a talk at &lt;a href=&#34;https://summit.graphql.com/&#34;&gt;GraphQL Summit 2018&lt;/a&gt; about the experience of introducing GraphQL for our &lt;a href=&#34;https://graphql.braintreepayments.com/&#34;&gt;Payments API&lt;/a&gt; at &lt;a href=&#34;https://www.braintreepayments.com/&#34;&gt;Braintree&lt;/a&gt;. It was well received, as far as I could tell - I received a lot of nice feedback and had great conversations with members of the community.&lt;/p&gt;

&lt;p&gt;The slides are available here on &lt;a href=&#34;https://speakerdeck.com/sdqali/graphql-for-a-payments-api&#34;&gt;SpeakerDeck&lt;/a&gt;. I will update this post with links to the video of my talk when it becomes available.&lt;/p&gt;

&lt;p&gt;Francesca Guiducci took this photo:
&lt;blockquote class=&#34;twitter-tweet&#34; data-lang=&#34;en&#34;&gt;&lt;p lang=&#34;en&#34; dir=&#34;ltr&#34;&gt;This was the only time I read &amp;quot;java&amp;quot; on the big screen during this conference that was not part of the word &amp;quot;javascript&amp;quot;! Thanks &lt;a href=&#34;https://twitter.com/sdqali?ref_src=twsrc%5Etfw&#34;&gt;@sdqali&lt;/a&gt; &lt;a href=&#34;https://twitter.com/hashtag/graphqlsummit?src=hash&amp;amp;ref_src=twsrc%5Etfw&#34;&gt;#graphqlsummit&lt;/a&gt; &lt;a href=&#34;https://t.co/3zAO5TLdYY&#34;&gt;pic.twitter.com/3zAO5TLdYY&lt;/a&gt;&lt;/p&gt;&amp;mdash; Francesca Guiducci (@engfragui) &lt;a href=&#34;https://twitter.com/engfragui/status/1060683834058956800?ref_src=twsrc%5Etfw&#34;&gt;November 9, 2018&lt;/a&gt;&lt;/blockquote&gt;
&lt;script async src=&#34;https://platform.twitter.com/widgets.js&#34; charset=&#34;utf-8&#34;&gt;&lt;/script&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Formatting Java Instant for resolutions</title>
      <link>https://sdqali.in/blog/2018/06/09/formatting-java-instant-for-resolutions/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 09 Jun 2018 11:55:23 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/06/09/formatting-java-instant-for-resolutions/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;I have had to look up how to format Java&amp;rsquo;s Instant with a given resolution - for example in microseconds or nanoseconds. After fiddling with various formatters, I was happy to finally get this right.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Test&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;shouldFormatWith7Decimals&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;int&lt;/span&gt; resolution &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; 7&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  DateTimeFormatter dateTimeFormatter &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; DateTimeFormatterBuilder&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;appendInstant&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;resolution&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;toFormatter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
  Instant instant &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Instant&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
  System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;dateTimeFormatter&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;format&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;instant&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>FreeBuilder plugin for IntelliJ</title>
      <link>https://sdqali.in/blog/2018/05/04/freebuilder-plugin-for-intellij/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 04 May 2018 22:27:35 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/05/04/freebuilder-plugin-for-intellij/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;My work uses &lt;a href=&#34;http://freebuilder.inferred.org/&#34;&gt;FreeBuilder&lt;/a&gt; extensively to generate the &lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder&lt;/a&gt; pattern for Java classes. In addition to this, we use the generated Builder classes to deserialize the data calsses using Jackson. After a while it became tiresome to type &lt;code&gt;@FreeBuilder&lt;/code&gt; and &lt;code&gt;class Builder extends ...&lt;/code&gt; everywhere. So I decided to write and IntelliJ IDEA plugin that does it for me.&lt;/p&gt;

&lt;p&gt;These are the things I wanted the plugin to do for me:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Annotate the public class from the current file with &lt;code&gt;@FreeBuilder&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Create an inner class for the annotated class - this should be a &lt;code&gt;static&lt;/code&gt; class if the annotated class is an &lt;code&gt;abstract&lt;/code&gt; class and a child class if the annotated class is an &lt;code&gt;interface&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;Ensure that the generated &lt;code&gt;Builder&lt;/code&gt; class is annotated with &lt;code&gt;@JsonIgnoreProperties(ignoreUnknown=true)&lt;/code&gt; because this is a convention we like to follow.&lt;/li&gt;
&lt;li&gt;Ensure that the parent class gets annotated with &lt;code&gt;@JsonDeserialize(builder=...)&lt;/code&gt; annotation.&lt;/li&gt;
&lt;li&gt;Rebuild the project so that the annotation processing for FreeBuilder runs.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;After poking around the IntelliJ Plugin development documentation, I was able to write a simple enough plugin that does it. For whatever reason, trying to find how to achieve simple things like how to create a new class that you can add as a child to an existing class was painful.&lt;/p&gt;

&lt;p&gt;The plugin is available &lt;a href=&#34;https://plugins.jetbrains.com/plugin/10705-freebuilder-plugin&#34;&gt;here&lt;/a&gt; from the IntelliJ plugin repository and the source code is here on &lt;a href=&#34;https://github.com/sdqali/freebuilder-intellij-plugin&#34;&gt;GitHub&lt;/a&gt;. In addition to the above mentioned features, I wanted to make sure that the annotations gets added only if the annoattion classes were in the classpath of the current module. The plugin also displayes messages when it decides to skip a step because an annotation class was not in the classpath or because nnotations already exist on the class.&lt;/p&gt;

&lt;p&gt;A short demo of the plugin in action is shown below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sdqali.in/images/freebuilder-plugin-demo.gif&#34; alt=&#34;&amp;quot;FreeBuilder Plugin Demo&amp;quot;&#34; title=&#34;FreeBuilder Plugin Demo&#34; /&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Command line clients for gRPC - polyglot</title>
      <link>https://sdqali.in/blog/2018/04/05/command-line-clients-for-grpc-polyglot/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Thu, 05 Apr 2018 22:45:08 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/04/05/command-line-clients-for-grpc-polyglot/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;Polyglot was the second gRPC client that I looked at. One of the things that I liked about it is the fact that it does not need users to generate &lt;code&gt;protoset&lt;/code&gt; files. It generates the protoset files in flight every time it runs. This, combined with the fact that it is written in Java does have a disadvantage - every time the client makes a call, it has to fire up a JVM, generate protosets and make the request.&lt;/p&gt;

&lt;p&gt;You run polyglot by using the distributed polyglot jar. To list all the services available on an endpoint, polyglot can be executed as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;list_services &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --proto_discovery_root&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$PROTO_DISCOVERY_ROOT&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:

manualflowcontrol.StreamingGreeter -&amp;gt; /Users/sdqali/src/grpc/grpc-java/examples/src/proto/hello_streaming.proto
manualflowcontrol.StreamingGreeter/SayHelloStreaming

routeguide.RouteGuide -&amp;gt; /Users/sdqali/src/grpc/grpc-java/examples/src/proto/route_guide.proto
routeguide.RouteGuide/GetFeature
routeguide.RouteGuide/ListFeatures
routeguide.RouteGuide/RecordRoute
routeguide.RouteGuide/RouteChat

helloworld.Greeter -&amp;gt; /Users/sdqali/src/grpc/grpc-java/examples/src/proto/helloworld.proto
helloworld.Greeter/SayHello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The command &lt;code&gt;call&lt;/code&gt; can be issued to execute a particular service method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{&amp;#39;name&amp;#39;: &amp;#39;World&amp;#39;}&amp;#34;&lt;/span&gt; | java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;call &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --full_method&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;helloworld.Greeter/SayHello &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --endpoint&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;localhost:50051 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --proto_discovery_root&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;$PROTO_DISCOVERY_ROOT&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating channel to: localhost:50051
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Using proto descriptors obtained from protoc
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating dynamic grpc client
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Making rpc with &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; to endpoint &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;localhost:50051&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.grpc.DynamicGrpcClient - Making unary call
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;grpc-default-executor-0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.io.LoggingStatsWriter - Got response message
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;grpc-default-executor-0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.io.LoggingStatsWriter - Completed rpc with &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; response&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how we are passing path to proto files and polyglot executes &lt;code&gt;protoc&lt;/code&gt; on them to get protosets.
With reflection turned ON, we no longer need to provide a path to the proto files.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;{&amp;#39;name&amp;#39;: &amp;#39;World&amp;#39;}&amp;#34;&lt;/span&gt; | java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;call &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --full_method&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;helloworld.Greeter/SayHello &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --endpoint&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;localhost:50051 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --use_reflection&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating channel to: localhost:50051
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Using proto descriptors fetched by reflection
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Creating dynamic grpc client
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.command.ServiceCall - Making rpc with &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; request&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;s&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; to endpoint &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;localhost:50051&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.grpc.DynamicGrpcClient - Making unary call
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;grpc-default-executor-0&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.io.LoggingStatsWriter - Got response message
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;That is nice, except that reflection does not work for listing services.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;java -jar ~/Downloads/polyglot.jar --command&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;list_services &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --endpoint&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;localhost:50051 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --deadline_ms&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3000&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  --use_reflection&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Polyglot version: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.6.0
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; INFO me.dinowernli.grpc.polyglot.Main - Loaded configuration:
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;main&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; WARN me.dinowernli.grpc.polyglot.Main - Caught top-level exception during &lt;span style=&#34;color:#366&#34;&gt;command&lt;/span&gt; execution
java.lang.IllegalArgumentException: A proto discovery root is required &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; proto analysis
  at com.google.common.base.Preconditions.checkArgument&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Preconditions.java:122&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.protobuf.ProtocInvoker.forConfig&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;ProtocInvoker.java:36&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.getFileDescriptorSet&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:93&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.main&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:62&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
Exception in thread &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;main&amp;#34;&lt;/span&gt; java.lang.RuntimeException: java.lang.IllegalArgumentException: A proto discovery root is required &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; proto analysis
  at me.dinowernli.grpc.polyglot.Main.main&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:86&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
Caused by: java.lang.IllegalArgumentException: A proto discovery root is required &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt; proto analysis
  at com.google.common.base.Preconditions.checkArgument&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Preconditions.java:122&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.protobuf.ProtocInvoker.forConfig&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;ProtocInvoker.java:36&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.getFileDescriptorSet&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:93&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  at me.dinowernli.grpc.polyglot.Main.main&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Main.java:62&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This was unexpected, as adding this capability to Polyglot should not be too diffcult, considering that they already support reflection for executing services. This is something that I am interested in implementing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Command line clients for gRPC - grpcurl</title>
      <link>https://sdqali.in/blog/2018/04/03/command-line-clients-for-grpc-grpcurl/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Tue, 03 Apr 2018 22:40:08 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/04/03/command-line-clients-for-grpc-grpcurl/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;We are in the middle of considering replacing JSON over HTTP with gRPC for communication between our internal services. One of my concerns about this was how we would be able to debug and poke around things in a world where we will no longer be able to use cURL. I have been looking at cURL like command line utilities we can use to replace most of the capabilities, if not all of cURL. So far, I have looked at &lt;a href=&#34;https://github.com/fullstorydev/grpcurl&#34;&gt;grpcurl&lt;/a&gt;, &lt;a href=&#34;https://github.com/grpc/grpc/blob/master/doc/command_line_tool.md&#34;&gt;grpc_cli&lt;/a&gt; and &lt;a href=&#34;https://github.com/grpc-ecosystem/polyglot&#34;&gt;polyglot&lt;/a&gt; .In these blog posts, we will try and compare these tools.&lt;/p&gt;

&lt;p&gt;In this example, we will be running the example implementations provided by the &lt;a href=&#34;https://github.com/grpc/grpc-java/tree/master/examples&#34;&gt;grpc-java&lt;/a&gt; project and using the command line tools against the services from these examples. We will also be running these services without enabling reflection.&lt;/p&gt;

&lt;h2 id=&#34;grpcurl&#34;&gt;grpcurl&lt;/h2&gt;

&lt;p&gt;One of the things that immediately struck me when I started looking at grpcurl was how neat it&amp;rsquo;s command line interface was, especially in comparison with that of polyglot. grpcurl is written in Go and expects you to provide &lt;code&gt;protoset&lt;/code&gt; files that contain service descriptors exported from the &lt;code&gt;proto&lt;/code&gt; files of the service.&lt;/p&gt;

&lt;p&gt;For example, for the &lt;code&gt;hello-world&lt;/code&gt; service from the examples, the &lt;code&gt;protoset&lt;/code&gt; files can be generated using:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span style=&#34;color:#366&#34;&gt;pwd&lt;/span&gt;
grpc-java/examples/src/main/proto
&amp;gt; protoc --proto_path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./ &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --descriptor_set_out&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;helloworld.protoset &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    --include_imports &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    ./helloworld.proto&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will produce a &lt;code&gt;protoset&lt;/code&gt; file named &lt;code&gt;helloworld.protoset&lt;/code&gt;. Using this, we can now list the services available:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -protoset ./helloworld.protoset list
helloworld.Greeter&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We can also list all the methods available in a service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -protoset ./helloworld.protoset list helloworld.Greeter
SayHello&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There is also a describe command that produces description of a service:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -protoset ./helloworld.protoset describe helloworld.Greeter
helloworld.Greeter is a service:
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Greeter&amp;#34;&lt;/span&gt;,
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;method&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;SayHello&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;inputType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.helloworld.HelloRequest&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;outputType&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;.helloworld.HelloReply&amp;#34;&lt;/span&gt;,
      &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;,
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;options&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can execute the method on this service running on a server by specifying the address and the path to the method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; grpcurl -plaintext -protoset ./helloworld.protoset -d &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;:&amp;#34;World&amp;#34;}&amp;#39;&lt;/span&gt; localhost:50051 helloworld.Greeter/SayHello
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It can also read the JSON data to pass to the server from STDIN, by setting the value of &lt;code&gt;-d&lt;/code&gt; to &lt;code&gt;@&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;World&amp;#34;}&amp;#39;&lt;/span&gt; | grpcurl -plaintext -protoset ./helloworld.protoset -d @ localhost:50051 helloworld.Greeter/SayHello
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In both these examples, we passed the &lt;code&gt;-plaintext&lt;/code&gt; switch because our server is not running with TLS.&lt;/p&gt;

&lt;p&gt;If we were to &lt;a href=&#34;https://github.com/grpc/grpc-java/blob/master/documentation/server-reflection-tutorial.md&#34;&gt;turn on reflection&lt;/a&gt;, we will no longer need to depend on the &lt;code&gt;protoset&lt;/code&gt; file.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; &lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{&amp;#34;name&amp;#34;: &amp;#34;World&amp;#34;}&amp;#39;&lt;/span&gt; | grpcurl -plaintext -d @ localhost:50051 helloworld.Greeter/SayHello
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;Hello World&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Overall, I like what the creator of grpcurl have done. The only thing I dont like is the fact that when reflection is turned off, we have to generate &lt;code&gt;protoset&lt;/code&gt; files. It would have been great if it could just look at the existing &lt;code&gt;proto&lt;/code&gt; files, which is what &lt;code&gt;polyglot&lt;/code&gt; does. We will look at polyglot in the next blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Jackson and FreeBuilder quirk</title>
      <link>https://sdqali.in/blog/2018/03/22/a-jackson-and-freebuilder-quirk/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Thu, 22 Mar 2018 22:21:42 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/03/22/a-jackson-and-freebuilder-quirk/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;Jackson is a great tool to have in your tool set if you deal with JSON or XML. It facilitates easy serialization and de-serialization to and from Java classes with a convenient annotation based interface. With the same set of annotations, we can achieve both XML and JSON serialization and de-serialization. With Jackson&amp;rsquo;s &lt;code&gt;data-format-xml&lt;/code&gt; it is even possible to give the same Class a different JSON and XML representation.&lt;/p&gt;

&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlRootElement&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user-account&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@JsonRootName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Account&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; String name&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; String emailAddress&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#c0f&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; name&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#c0f&#34;&gt;getEmailAddress&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; emailAddress&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When this gets used, it does the serialization and de-serializaion to and from XML and JSON in different forms:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;jsonMapper &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; ObjectMapper&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
jsonMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;WRAP_ROOT_VALUE&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
jsonMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;UNWRAP_ROOT_VALUE&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
xmlMapper &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; XmlMapper&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
Account account &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;

String jsonString &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;jsonString&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
Account deSerializedAccount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;jsonString&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
assertEquals&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; deSerializedAccount&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;

String xmlString &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;xmlString&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
deSerializedAccount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;xmlString&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
assertEquals&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; deSerializedAccount&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}}&lt;/span&gt;
&amp;lt;user-account&amp;gt;&amp;lt;name&amp;gt;John Doe&amp;lt;/name&amp;gt;&amp;lt;email-address&amp;gt;john@example.com&amp;lt;/email-address&amp;gt;&amp;lt;/user-account&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Things get really interesting when we introduce &lt;a href=&#34;http://freebuilder.inferred.org/&#34;&gt;FreeBuilder&lt;/a&gt;. FreeBuilder supports Jackson and we will be able to do serialization correctly. However, XML de-serialization does not work as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;cksonXmlRootElement&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user-account&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@JsonRootName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@FreeBuilder&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@JsonDeserialize&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;builder &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Account&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  String &lt;span style=&#34;color:#c0f&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@JacksonXmlProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;localName &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  String &lt;span style=&#34;color:#c0f&#34;&gt;getEmailAddress&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;Builder&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;extends&lt;/span&gt; Account_Builder &lt;span style=&#34;color:#555&#34;&gt;{}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;Account account &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;Builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setEmailAddress&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

String jsonString &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;jsonString&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
Account deSerializedAccount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; jsonMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;jsonString&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
assertEquals&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; deSerializedAccount&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;

String xmlString &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;writeValueAsString&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
System&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;xmlString&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
deSerializedAccount &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; xmlMapper&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;readValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;xmlString&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Account&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
assertEquals&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;account&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; deSerializedAccount&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will cause Jackson to throw an error while de-serializing XML, even though de-serializing to JSON works as expected.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-shell&#34; data-lang=&#34;shell&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;John Doe&amp;#34;&lt;/span&gt;,&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;:&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;john@example.com&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;}}&lt;/span&gt;
&amp;lt;user-account&amp;gt;&amp;lt;name&amp;gt;John Doe&amp;lt;/name&amp;gt;&amp;lt;email-address&amp;gt;john@example.com&amp;lt;/email-address&amp;gt;&amp;lt;/user-account&amp;gt;

com.fasterxml.jackson.databind.exc.UnrecognizedPropertyException: Unrecognized field &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;class in.sdqali.json.Account&lt;span style=&#34;color:#033&#34;&gt;$Builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;, not marked as ignorable &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt; known properties: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;emailAddress&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email_address&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;])&lt;/span&gt;
 at &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;Source: &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;StringReader&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;; line: &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;, column: &lt;span style=&#34;color:#f60&#34;&gt;83&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;through reference chain: in.sdqali.json.Account&lt;span style=&#34;color:#033&#34;&gt;$Builder&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;email-address&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;])&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After digging around, it turns out that FreeBuilder &lt;a href=&#34;https://github.com/inferred/FreeBuilder/blob/master/src/main/java/org/inferred/freebuilder/processor/JacksonSupport.java#L40&#34;&gt;keeps only&lt;/a&gt; the &lt;code&gt;@JsonProperty&lt;/code&gt; annotation on methods that it finds. This in turn causes the object created by the builder to have methods whose &lt;code&gt;@JacksonXmlProperty&lt;/code&gt; annotations are stripped of, which in turn causes Jackson to look for the camel-cased versions of the attribute names. I have opened a new &lt;a href=&#34;https://github.com/inferred/FreeBuilder/issues/294&#34;&gt;GitHub issue&lt;/a&gt; for this.&lt;/p&gt;

&lt;p&gt;Until this is resolved, if you use FreeBuilder and need to have different XML and JSON representation, you will have to write a custom Jackson &lt;a href=&#34;https://github.com/FasterXML/jackson-docs/wiki/JacksonHowToCustomSerializers&#34;&gt;Serializer&lt;/a&gt; and Deserializer.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Net::HTTP and the simplest of explanations</title>
      <link>https://sdqali.in/blog/2018/03/21/nethttp-and-the-simplest-of-explanations/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Wed, 21 Mar 2018 19:44:03 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/03/21/nethttp-and-the-simplest-of-explanations/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;&lt;em&gt;This blog post exists purely to remind myself that Ruby&amp;rsquo;s &lt;code&gt;Net::HTTP&lt;/code&gt; expects a &lt;code&gt;host&lt;/code&gt; and a &lt;code&gt;port&lt;/code&gt; as parameters when creating a new connection and not a &lt;code&gt;url&lt;/code&gt; string.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;This is a story about how many layers of abstractions and indirections one works through on a daily basis as a developer and the effort required to dive through these layers, all the while ignoring the simplest of explanations of why things may have gone wrong in the first place.&lt;/p&gt;

&lt;p&gt;At work, we have a homegrown orchestration tool that brings up Docker containers and configures dependencies and network access between them - essentially an abstraction over &lt;code&gt;docker-compose&lt;/code&gt;. In our continuous integration environment, this tool sets up all the different components of our system and then starts another container in which &lt;code&gt;RSpec&lt;/code&gt; based integration tests that exercise various inetractions between the components of the system are run.&lt;/p&gt;

&lt;p&gt;We added a new component and wanted a library used by the specs to use an API provided by this component. This essentially meant this for us:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Change our configurations so that the Docker container with the new component is started before the test container is started.&lt;/li&gt;
&lt;li&gt;Ensure that the test container can talk to the new component container.&lt;/li&gt;
&lt;li&gt;Tell the test container, through environment variables the &lt;code&gt;host&lt;/code&gt; and the &lt;code&gt;port&lt;/code&gt; of the new component.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;So, off we went and configured everything:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;env.NEWAPP_HOST=http://new-app.local
env.NEWAPP_PORT=1313
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We ran the tests and boom:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SocketError (Failed to open TCP connection to http://new-app.local:1313 (getaddrinfo: nodename nor servname provided, or not known))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Well, that does not look right. We double check all the configurations and run the test again. Same result. May be we should be using a Ruby &lt;code&gt;Symbol&lt;/code&gt; instead of a &lt;code&gt;String&lt;/code&gt; in that particular config? May be. We try that, same result.&lt;/p&gt;

&lt;p&gt;At this point, we hop on to the test container and ping &lt;code&gt;new-app.local&lt;/code&gt;. It can connect.
What if the app is not available? We should totally &lt;code&gt;telnet&lt;/code&gt; it. Well, this container does not have &lt;code&gt;telnet&lt;/code&gt;. We can totally install it, right? Right. What kind of distro is this running? Well &lt;code&gt;cat /etc/*release*&lt;/code&gt;. Debian, huh? &lt;code&gt;apt-get install telnet&lt;/code&gt;. Wooh. Back to &lt;code&gt;telnet&lt;/code&gt; then. That looks good.&lt;/p&gt;

&lt;p&gt;At this point, the attention turns to the RSpec tests. What if the tests have some environment variables? Let&amp;rsquo;s debug it and look for things in Ruby&amp;rsquo;s &lt;code&gt;ENV&lt;/code&gt;. Hmmm, nothing interesting there. Can the Ruby process even connect to &lt;code&gt;new-app&lt;/code&gt;? We have &lt;code&gt;Faraday&lt;/code&gt;, let&amp;rsquo;s try that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-irb&#34; data-lang=&#34;irb&#34;&gt;&amp;gt; require &amp;#39;faraday&amp;#39;
=&amp;gt; true
&amp;gt; resp = Faraday.get &amp;#34;http://google.com&amp;#34;
&amp;gt; resp.status
200&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Okay, does the library we use for the test even use &lt;code&gt;Faraday&lt;/code&gt;? Let&amp;rsquo;s open the source code for that and poke around. Nah, it uses &lt;code&gt;Net::Http&lt;/code&gt;. Let&amp;rsquo;s try the example from &lt;a href=&#34;https://ruby-doc.org/stdlib-2.5.0/libdoc/net/http/rdoc/Net/HTTP.html&#34;&gt;it&amp;rsquo;s documentation&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-irb&#34; data-lang=&#34;irb&#34;&gt;&amp;gt; require &amp;#39;net/http&amp;#39;
=&amp;gt; true
&amp;gt; Net::HTTP.get_response(URI(&amp;#34;http://new-app.local:1313&amp;#34;))
=&amp;gt; #&amp;lt;Net::HTTPOK 200 OK readbody=true&amp;gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Looks good. Well, wait! Our library uses &lt;code&gt;Net::HTTP.new&lt;/code&gt; to create a connection. Let&amp;rsquo;s try that:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-irb&#34; data-lang=&#34;irb&#34;&gt;&amp;gt; conn = Net::HTTP.new(&amp;#34;http://new-app.local&amp;#34;, 1313)
=&amp;gt; #&amp;lt;Net::HTTP http://new-app.local:1313 open=false&amp;gt;
&amp;gt; conn.get(&amp;#34;/&amp;#34;)
Traceback (most recent call last):
.
.
.
SocketError (Failed to open TCP connection to http://new-app.local:1313 (getaddrinfo: nodename nor servname provided, or not known))&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;At this point, we are covered in a mix of disappointment and excitement. We are annoyed that things are not working. But, may be, may be we have uncovered some obscure bug somewhere in the toolset? We would learn later that this is the point where we should have known what&amp;rsquo;s up? But we didn&amp;rsquo;t and the story continues.&lt;/p&gt;

&lt;p&gt;At this point, we ping the Slack channels of the teams involved in building the library we consume. They have not seen this before. Someone suggests that they have had issues with Ruby inside Docker containers. We finally find a GitHub issue for a different project where someone encountered their container setting the &lt;code&gt;HTTP_PROXY&lt;/code&gt; env variable and that causing &lt;code&gt;Net::HTTP&lt;/code&gt; to fail. We pore over everything to make sure that there is no proxy set. What now?&lt;/p&gt;

&lt;p&gt;What if we attempt to connect to the new app from a Ruby process running on one of the other 10 containers we run?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; docker exec -it 51dbf9f75ca8 ruby -e &#39;require &amp;quot;net/http&amp;quot;; conn = Net::HTTP.new(&amp;quot;http://new-app.local&amp;quot;, 1313); conn.get(&amp;quot;/&amp;quot;)&#39;
Traceback (most recent call last):
.
.
.
SocketError (Failed to open TCP connection to http://new-app.local:1313 (getaddrinfo: nodename nor servname provided, or not known))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That is interesting, isn&amp;rsquo;t it? Is it happening to only our systems? What if we just tried to hit Google?&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; docker exec -it 51dbf9f75ca8 ruby -e &#39;require &amp;quot;net/http&amp;quot;; conn = Net::HTTP.new(&amp;quot;http://google.com&amp;quot;, 80); conn.get(&amp;quot;/&amp;quot;)&#39;
Traceback (most recent call last):
.
.
.
SocketError (Failed to open TCP connection to http://google.com:80 (getaddrinfo: nodename nor servname provided, or not known))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What if somehow our orchestration tool or containers created by us are causing it? Let&amp;rsquo;s try a random container from DockerHub:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; docker run -it ruby:2.5-slim ruby -e &#39;require &amp;quot;net/http&amp;quot;; conn = Net::HTTP.new(&amp;quot;http://google.com&amp;quot;,80); conn.get(&amp;quot;/&amp;quot;)&#39;
Traceback (most recent call last):
.
.
.
SocketError (Failed to open TCP connection to http://google.com:80 (getaddrinfo: nodename nor servname provided, or not known))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;At this point, light bulbs are beginning to go off. Let&amp;rsquo;s try this on our laptops? Same result. And then it struck us. It says it can&amp;rsquo;t open a TCP connection to a URL with &lt;code&gt;http&lt;/code&gt; in it.  Of course, it cant. It should be looking for &lt;code&gt;google.com&lt;/code&gt;, should not it? Yes:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-irb&#34; data-lang=&#34;irb&#34;&gt;&amp;gt; docker run -it ruby:2.5-slim ruby -e &amp;#39;require &amp;#34;net/http&amp;#34;; conn = Net::HTTP.new(&amp;#34;google.com&amp;#34;, 80); res = conn.get(&amp;#34;/&amp;#34;); puts res.code&amp;#39;
301&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And with a lot of excitement and some shame, we realize that the library really meant &lt;code&gt;host&lt;/code&gt; when it asked for the &lt;code&gt;NEWAPP_HOST&lt;/code&gt; environment variable.&lt;/p&gt;

&lt;p&gt;I don&amp;rsquo;t think there are any big lessons in this story other than that, sometimes the simplest explanation of a problems makes a lot more sense than you would think it does. Also, if you ever use &lt;code&gt;Net::HTTP.new&lt;/code&gt;, remember that it expects you to provide a &lt;code&gt;host&lt;/code&gt; as the first param, not a URL.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Python URL manipulation revisited</title>
      <link>https://sdqali.in/blog/2017/09/25/python-url-manipulation-revisited/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Mon, 25 Sep 2017 21:22:39 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2017/09/25/python-url-manipulation-revisited/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;My &lt;a href=&#34;https://sdqali.in/blog/2017/08/17/uploading-a-standalone-artifact-to-nexus-3/&#34;&gt;last blog post&lt;/a&gt; about publishing standalone files to Nexus repositories prompted me to revisit URL manipulation in Python. When I did this &lt;a href=&#34;https://sdqali.in/blog/2013/09/26/decomposing-urls-in-python/&#34;&gt;the last time&lt;/a&gt;, I used Python stand library&amp;rsquo;s &lt;code&gt;urlparse&lt;/code&gt; and it did the job. This time around, I needed to do a different kind of manipulation. Given a URL, I had to set credentials on it.&lt;/p&gt;

&lt;p&gt;I started at &lt;code&gt;urlparse&lt;/code&gt; and soon realized that Python3 moved this module to &lt;a href=&#34;https://docs.python.org/3/library/urllib.parse.html&#34;&gt;urllib.parse&lt;/a&gt;. That is not too bad, I thought. After playing around with it, it became clear that &lt;code&gt;urllib.parse&lt;/code&gt; can&amp;rsquo;t manipulate credentials in a URL.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;urllib&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; parse

In [&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]: url &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; parse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;urlparse(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt;(url)
ParseResult(scheme&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;http&amp;#39;&lt;/span&gt;, netloc&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;example.com&amp;#39;&lt;/span&gt;, path&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, params&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, query&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;, fragment&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]: url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;
&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;AttributeError&lt;/span&gt;                            Traceback (most recent call last)
&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;ipython&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;input&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;60e52&lt;/span&gt;fe02603&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#000;font-weight:bold&#34;&gt;in&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;module&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt;()
&lt;span style=&#34;color:#555&#34;&gt;----&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt; url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;username&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#c00;font-weight:bold&#34;&gt;AttributeError&lt;/span&gt;: can&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;t set attribute&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;In [5]: url.password = &amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;---------------------------------------------------------------------------&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;AttributeError                            Traceback (most recent call last)&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;lt;ipython-input-5-4f64c7192b99&amp;gt; in &amp;lt;module&amp;gt;()&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;----&amp;gt; 1 url.password = &amp;#34;password&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;AttributeError: can&amp;#39;&lt;/span&gt;t &lt;span style=&#34;color:#366&#34;&gt;set&lt;/span&gt; attribute

In [&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;]: url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; None
Out[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;]: True

In [&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;]: url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;password &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; None
Out[&lt;span style=&#34;color:#f60&#34;&gt;7&lt;/span&gt;]: True&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;After spending time with various URL manipulation libraries in Python, &lt;a href=&#34;https://github.com/gruns/furl&#34;&gt;furl&lt;/a&gt; was the only library that I found to be capable of this seemingly simple and common enough operation.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;In [&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;]: &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;from&lt;/span&gt; &lt;span style=&#34;color:#0cf;font-weight:bold&#34;&gt;furl&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;import&lt;/span&gt; furl

In [&lt;span style=&#34;color:#f60&#34;&gt;2&lt;/span&gt;]: url &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; furl(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]: url
Out[&lt;span style=&#34;color:#f60&#34;&gt;3&lt;/span&gt;]: furl(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;http://example.com&amp;#39;&lt;/span&gt;)

In [&lt;span style=&#34;color:#f60&#34;&gt;4&lt;/span&gt;]: url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;password &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;password&amp;#34;&lt;/span&gt;

In [&lt;span style=&#34;color:#f60&#34;&gt;5&lt;/span&gt;]: url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;username &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;user&amp;#34;&lt;/span&gt;

In [&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;]: url&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;tostr()
Out[&lt;span style=&#34;color:#f60&#34;&gt;6&lt;/span&gt;]: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;http://user:password@example.com&amp;#39;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Uploading a standalone artifact to Nexus 3</title>
      <link>https://sdqali.in/blog/2017/08/17/uploading-a-standalone-artifact-to-nexus-3/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Thu, 17 Aug 2017 21:00:43 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2017/08/17/uploading-a-standalone-artifact-to-nexus-3/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;This is one of those &amp;ldquo;I had to figure out how to do this today, so the next time I google this, I have a place to look&amp;rdquo; blog posts.
Today, I had to upload a zip file as a build artifact to our Nexus 3 repository. The zip file had been generated by custom shell scripts that did not have a Maven, Ivy or Gradle projects to wrap them.&lt;/p&gt;

&lt;p&gt;The obvious way to do this seemed like using the Nexus 3 REST API, invoked like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;curl -v -u &amp;lt;username&amp;gt;:&amp;lt;password&amp;gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;   --upload-file artifact.zip &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;   https://&amp;lt;nexus-server&amp;gt;/repository/maven-releases/com/example/artifact/1.0.0/artifact-1.0.0.zip&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This works and the file is available in the repository. However, this method has the following shortcomings:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;There will not be a &lt;code&gt;POM&lt;/code&gt; file generated for this artifact.&lt;/li&gt;
&lt;li&gt;The maven metadata associated with this artifact will not be updated.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Using Maven Deploy Plugin&amp;rsquo;s &lt;a href=&#34;http://maven.apache.org/plugins/maven-deploy-plugin/deploy-file-mojo.html&#34;&gt;deploy file mojo&lt;/a&gt; in this situation will help us satisfy the above requirements. The mojo is capable of running in arbitrary directories without the need for a &lt;code&gt;pom.xml&lt;/code&gt; to be present. However, it does expect you to specify authentication parameters in a &lt;code&gt;settings.xml&lt;/code&gt; file. In my situation, I did not want to write credentials in a &lt;code&gt;settings.xml&lt;/code&gt;, so I had to improvise.&lt;/p&gt;

&lt;p&gt;This is what I ended up using and it works like a charm:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;mvn deploy:deploy-file &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -DgroupId&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;com.example &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -DartifactId&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;artifact &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -Dversion&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#f60&#34;&gt;1&lt;/span&gt;.0.0 &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -Dpackaging&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;zip &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -Dfile&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;artifact.zip &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -DgeneratePom&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -DupdateReleaseInfo&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#366&#34;&gt;true&lt;/span&gt; &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;    -Durl&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;https://&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;NEXUS_USERNAME&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;:&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;${&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;NEXUS_PASSWORD&lt;/span&gt;&lt;span style=&#34;color:#a00&#34;&gt;}&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;@&amp;lt;nexus-server&amp;gt;/repository/maven-releases/&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 4</title>
      <link>https://sdqali.in/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-4/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Tue, 29 Nov 2016 22:50:42 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-4/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;In the fourth part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing &lt;a href=&#34;https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application---part-1/&#34;&gt;feature toggles&lt;/a&gt; for a Spring Boot application, we will take a look at how our implementation so far introduced a dependency on the application being restarted for changes to take place.&lt;/p&gt;

&lt;p&gt;In &lt;a href=&#34;https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application---part-1/&#34;&gt;part 1&lt;/a&gt;, we modified the &lt;code&gt;FeatureToggle&lt;/code&gt; annotation to support toggling beans and decided to use that for toggling features at the controller level. If we had a system capable of providing the feature toggle information to the application without restarts, the change in the state of the controller level toggles will have no effect because the controller is not going to be re-wired for request mapping, unless the application is restarted.&lt;/p&gt;

&lt;p&gt;This raises the interesting question - Are bean level switches really feature toggles, considering that they can never be altered without application restarts? A better approach would be to consider bean switches as purely configurations and use facades that route commands to either of the beans based on a feature flag. In the example configuration provided, is treating the choice between storing sessions in-memory / Redis an actual feature, considering it does not provide any value to the end-user?&lt;/p&gt;

&lt;p&gt;To ensure that we are not tying feature toggling to restarts, we will remove the meta-annotation we introduced to &lt;code&gt;FeatureToggle&lt;/code&gt; in &lt;a href=&#34;https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application---part-1/&#34;&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Target&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;({&lt;/span&gt;ElementType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ElementType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;METHOD&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Retention&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Documented&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;@interface&lt;/span&gt; FeatureToggle &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  String &lt;span style=&#34;color:#c0f&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;expectedToBeOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this change, we no longer have the ability to toggle off an entire controller. Having to annotate all handler methods in a controller is going to be a painful, error-prone approach. In order to provide the ability to toggle entire controllers, we can modify the &lt;code&gt;FeatureInterceptor&lt;/code&gt; to look for annotations present on the controller class in addition to annotations present on the handler methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureInterceptor&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerInterceptor &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;FeatureInterceptor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;featureRepository&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;preHandle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletRequest httpServletRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; HttpServletResponse httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    HandlerMethod handlerMethod &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HandlerMethod&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; handler&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;handleMethodAnnotation&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;handlerMethod&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt;
        handleTypeAnnotation&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;handlerMethod&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getBeanType&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()))&lt;/span&gt;  &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setStatus&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;SC_NOT_FOUND&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;handleTypeAnnotation&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Class&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; controllerType&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    FeatureToggle controllerTypeAnnotation &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; controllerType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getAnnotation&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureToggle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; checkFeatureState&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;controllerTypeAnnotation&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;handleMethodAnnotation&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HandlerMethod handlerMethod&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    FeatureToggle methodAnnotation &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; handlerMethod&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getMethodAnnotation&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureToggle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; checkFeatureState&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;checkFeatureState&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureToggle methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;expectedToBeOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;postHandle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletRequest httpServletRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; HttpServletResponse httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object o&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ModelAndView modelAndView&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;afterCompletion&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletRequest httpServletRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; HttpServletResponse httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object o&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Exception e&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will correctly intercept requests routed to handler methods even if the annotation is at the controller level instead of the method level.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@FeatureToggle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;feature &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FooController&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Map &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello foo!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a feature toggling mechanism in place that no longer depends on application restarts, in the next part, we will look at providing this information to the application from a source that does not require restarts.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 3</title>
      <link>https://sdqali.in/blog/2016/11/28/implementing-feature-toggles-for-a-spring-boot-application-part-3/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Mon, 28 Nov 2016 22:50:39 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/28/implementing-feature-toggles-for-a-spring-boot-application-part-3/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;In the third part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will take a look at exposing the state of feature flags as a Spring Boot management end point for monitoring and testing purposes.&lt;/p&gt;

&lt;p&gt;Spring Boot Actuator exposes a number of &lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html&#34;&gt;end points&lt;/a&gt; to monitor and administer the application. The most commonly used of these in my experience are the &lt;code&gt;info&lt;/code&gt; and &lt;code&gt;health&lt;/code&gt; end points. These end points are used to communicate to load balancers that a particular instance is ready to accept traffic and to monitor the state of the application.&lt;/p&gt;

&lt;h2 id=&#34;features-management-end-point&#34;&gt;Features management end point&lt;/h2&gt;

&lt;p&gt;In our case, this end point will be used by administrators, QA engineers and sometimes business stake holders to see what features are available in a particular environment running the application. Of course, we could have re-used the end point we built in the [last blog post]() for this purpose, but creating an management end point allows us to:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Control the HTTP end point together with other end points by using the &lt;code&gt;management.context-path&lt;/code&gt; property. This will allow us to provide certain nodes in our network access to only the management end points without having to expose application behavior to them.&lt;/li&gt;
&lt;li&gt;Make this information available in a more human readable form for it’s consumers. Even though the information exposed in the &lt;code&gt;/features&lt;/code&gt; end point is detailed, the format was designed for consumption by code.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Because this is for human consumption, the end point will display the feature state in the following format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;{
  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;available&amp;#34;&lt;/span&gt;: [
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.bar&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
  ],
  &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;: [
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
  ]
}&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Management end points in Spring Boot are created by implementing the &lt;code&gt;EndPoint&lt;/code&gt; interface. In our case, the end point will depend on &lt;code&gt;FeatureRepository&lt;/code&gt; to do the heavy lifting.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureEndpoint&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;implements&lt;/span&gt; Endpoint&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Set&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; String ID &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;features&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;FeatureEndpoint&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;featureRepository&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color:#c0f&#34;&gt;getId&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; ID&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isEnabled&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;isSensitive&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Set&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;invoke&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Set&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
    map&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;enabledKeys&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
    map&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;available&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;featureKeys&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In order to retrieve the keys for features that are toggled on, we will create an &lt;code&gt;enabledKeys&lt;/code&gt; method in the repository.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureRepository&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Set&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;enabledKeys&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; featureKeys&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;f &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; isOn&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;f&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;toSet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this end point in place and the &lt;code&gt;management.context-path&lt;/code&gt; set to &lt;code&gt;management&lt;/code&gt; in our properties, this end point will produce the following output.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; curl &lt;span style=&#34;color:#555&#34;&gt;-&lt;/span&gt;s &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;http://localhost:8080/management/features&amp;#34;&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;|&lt;/span&gt; jq &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;available&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;],&lt;/span&gt;
  &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;enabled&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;:&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It is important to note that our end point has it’s sensitivity flag set to false by default. You should consider the &lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html#_security_with_healthindicators&#34;&gt;security implications&lt;/a&gt; of that before choosing to leave it false.&lt;/p&gt;

&lt;p&gt;In the next blog post in this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt;, we will explore how our feature toggle mechanism so far have introduced a dependency on the application being restarted and how to eliminate this dependency.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 2</title>
      <link>https://sdqali.in/blog/2016/11/26/implementing-feature-toggles-for-a-spring-boot-application-part-2/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Sat, 26 Nov 2016 22:48:48 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/26/implementing-feature-toggles-for-a-spring-boot-application-part-2/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;In the second part of this [series](&amp;ldquo;/series/feature-toggles/&amp;rdquo;) about implementing feature toggles for a Spring Boot application, we will look at exposing the features to the Angular front-end so that features can be toggled in UI components.&lt;/p&gt;

&lt;h2 id=&#34;toggling-at-the-front-end&#34;&gt;Toggling at the front end&lt;/h2&gt;

&lt;p&gt;We decided to use the &lt;a href=&#34;https://github.com/mjt01/angular-feature-flags&#34;&gt;angular-feature-flags&lt;/a&gt; library to toggle features at the front end because it provided us the three features that we were looking for:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to load the state of feature flags &lt;a href=&#34;https://github.com/mjt01/angular-feature-flags#setting-flag-data&#34;&gt;from an HTTP end point&lt;/a&gt; instead of having to generate JS code through templates.&lt;/li&gt;
&lt;li&gt;The ability to toggle entire html components through the &lt;code&gt;feature-flag&lt;/code&gt; attribute directive.&lt;/li&gt;
&lt;li&gt;The ability to expose these features to services and components to make if-else decisions through &lt;code&gt;featureFlagsProvider&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;features-end-point&#34;&gt;Features end point&lt;/h2&gt;

&lt;p&gt;The library expects feature flags to be provided to &lt;code&gt;featureFlagsProvider&lt;/code&gt; in the following format:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-json&#34; data-lang=&#34;json&#34;&gt;[
    { &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;active&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt;, &lt;span style=&#34;color:#309;font-weight:bold&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;...&amp;#34;&lt;/span&gt; },
    &lt;span style=&#34;color:#a00;background-color:#faa&#34;&gt;...&lt;/span&gt;
]&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;FeatureController&lt;/code&gt; will use the &lt;code&gt;FeatureRepository&lt;/code&gt; to expose this will look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/features&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureController&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@Autowired&lt;/span&gt;
  FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;Map&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;features&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;allFeatures&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;entrySet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;entry &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
          &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
            put&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
            put&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;active&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getValue&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
            put&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
            put&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; entry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
          &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;})&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;toList&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;We are using the double brace initialization technique to construct the map representing each feature. Initializing a map given a set of keys and values is still an exercise that requires a bunch of &lt;a href=&#34;https://minborgsjavapot.blogspot.com/2014/12/java-8-initializing-maps-in-smartest-way.html&#34;&gt;boiler plate&lt;/a&gt; code in Java. You can get around this by using the convenient ImmutableMap.of() provided by &lt;a href=&#34;https://mvnrepository.com/artifact/com.google.collections/google-collections/1.0&#34;&gt;Google Collections&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is also important to change our &lt;code&gt;AppConfig&lt;/code&gt; to initialize the instance of &lt;code&gt;Featurerepository&lt;/code&gt; as a bean.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;AppConfig&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;extends&lt;/span&gt; WebMvcConfigurerAdapter &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@Autowired&lt;/span&gt;
  Environment env&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;// ...
&lt;/span&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; FeatureRepository &lt;span style=&#34;color:#c0f&#34;&gt;featureRepository&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FeatureRepository&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;env&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With this configuration, we can get the feature state from the end point:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&amp;gt; curl -s &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;http://localhost:8080/features&amp;#34;&lt;/span&gt; | jq .
&lt;span style=&#34;color:#555&#34;&gt;[&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;active&amp;#34;&lt;/span&gt;: false,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;,
  &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;name&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;active&amp;#34;&lt;/span&gt;: true,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;description&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;,
    &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;key&amp;#34;&lt;/span&gt;: &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;]&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For our use case, we were comfortable re-using the feature key as the name and description of the feature. You may want to capture these meta data in your application configuration and expose this using Spring Boot’s &lt;a href=&#34;http://docs.spring.io/spring-boot/docs/1.1.7.RELEASE/api/org/springframework/boot/context/properties/ConfigurationProperties.html&#34;&gt;ConfigurationProperties&lt;/a&gt;. You can find an example of how use structured configurations in &lt;a href=&#34;https://github.com/sdqali/config-properties&#34;&gt;my example project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;In the next part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt;, we will take a look at how to expose the feature information as an &lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-endpoints.html&#34;&gt;admin end point&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 1</title>
      <link>https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application-part-1/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Mon, 21 Nov 2016 17:03:03 -0800</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application-part-1/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;In one of our recent projects at work, we implemented feature toggles for a Spring MVC / Angular JS code base and this &lt;a href=&#34;https://sdqali.in/series/feature-toggles&#34;&gt;series of blog posts&lt;/a&gt; discusses our motivations and requirements, the approach we took and what we learned from it.&lt;/p&gt;

&lt;h2 id=&#34;introduction&#34;&gt;Introduction&lt;/h2&gt;

&lt;p&gt;Feature Toggles are a mechanism to change the behavior of software without having to re-deploy code. Pete Hogdson has a comprehensive &lt;a href=&#34;http://martinfowler.com/articles/feature-toggles.html&#34;&gt;blog post&lt;/a&gt; explaining the complexities of feature toggles.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sdqali.in/images/feature-toggles.svg&#34; alt=&#34;Feature toggles&#34; title=&#34;Feature toggles&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;requirements&#34;&gt;Requirements&lt;/h2&gt;

&lt;p&gt;Our application is a Spring Boot web application that gets deployed in a Tomcat instance. The application is deployed via Chef and chef sets up the appropriate configuration parameters for the application as Tomcat &lt;a href=&#34;https://tomcat.apache.org/tomcat-8.0-doc/config/context.html#Environment_Entries&#34;&gt;Environment&lt;/a&gt; entries. Since feature toggles are ultimately application parameters &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;, we started by setting them as Tomcat environment variables. Having considered this, we identified the following requirements:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The ability to toggle dependency injection. For example, in some environments, we wanted to use Redis to store our sessions, while in some test environments, they were to be stored in memory.&lt;/li&gt;
&lt;li&gt;Ability to toggle entire Spring Controllers or individual controller methods.&lt;/li&gt;
&lt;li&gt;The ability to expose the state of feature toggles to our front end so that Angular JS components can use the feature toggles.&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;our-initial-approach&#34;&gt;Our initial approach&lt;/h2&gt;

&lt;h3 id=&#34;toggling-dependency-injection&#34;&gt;Toggling dependency injection.&lt;/h3&gt;

&lt;p&gt;We started by using configuration parameters with the &lt;code&gt;feature&lt;/code&gt; prefix to toggle features. With this convention in place, we started using the &lt;code&gt;@ConditionalOnProperty&lt;/code&gt; annotation in our configuration classes to toggle the beans that got wired up. For example, to toggle between Redis and in-memory store for sessions, we ended up with the following configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;AppConfig&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@ConditionalOnProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.redis.session.store&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; havingValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;false&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; SessionRepository &lt;span style=&#34;color:#c0f&#34;&gt;mapSessionRepository&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MapSessionRepository&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@ConditionalOnProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.redis.session.store&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; havingValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; SessionRepository &lt;span style=&#34;color:#c0f&#34;&gt;redisSessionRepository&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;RedisConnectionFactory factory&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; RedisOperationsSessionRepository&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;factory&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;toggling-individual-controller-methods&#34;&gt;Toggling individual controller methods&lt;/h3&gt;

&lt;p&gt;In order to prevent end points defined by controllers and controller methods that are toggled off from being accessed, we decided to configure a &lt;code&gt;HandlerInterceptor&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; to intercept requests to these end points.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureInterceptor&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;implements&lt;/span&gt; HandlerInterceptor &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;FeatureInterceptor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureRepository featureRepository&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;featureRepository&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;preHandle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletRequest httpServletRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; HttpServletResponse httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    HandlerMethod handlerMethod &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HandlerMethod&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; handler&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    FeatureToggle methodAnnotation &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; handlerMethod&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getMethodAnnotation&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureToggle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;expectedToBeOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; featureRepository&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;methodAnnotation&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

    httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;setStatus&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletResponse&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;SC_NOT_FOUND&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;postHandle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletRequest httpServletRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; HttpServletResponse httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object o&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ModelAndView modelAndView&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;afterCompletion&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;HttpServletRequest httpServletRequest&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; HttpServletResponse httpServletResponse&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object o&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Exception e&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;

  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This feature interceptor uses the &lt;code&gt;FeatureToggle&lt;/code&gt; looks for the annotation, and the looks at a feature repository to see if the state of the feature flag is set to what the annotation expects and if it does not, returns a 404. The annotation has two attributes - &lt;code&gt;isOn&lt;/code&gt; and &lt;code&gt;feature&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Target&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;({&lt;/span&gt;ElementType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ElementType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;METHOD&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Retention&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Documented&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;@interface&lt;/span&gt; FeatureToggle &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  String &lt;span style=&#34;color:#c0f&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;expectedToBeOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This annotation can be used on a controller method as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;MessageController&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@FeatureToggle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;feature &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.hello&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Map &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello world!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;FeatureRepository&lt;/code&gt; has to look at all the properties that are available in the applications environment and filter out the ones that start with &lt;code&gt;feature.&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;Collecting all the properties available in an environment is &lt;a href=&#34;https://stackoverflow.com/questions/23506471/spring-access-all-environment-properties-as-a-map-or-properties-object&#34;&gt;surprisingly complex&lt;/a&gt;, owing to the number of ways properties can be injected. Based on the approach discussed in that question, we can create a &lt;code&gt;FeatureRepository&lt;/code&gt; as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureRepository&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; String FEATURE_PREFIX &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;final&lt;/span&gt; Environment env&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;FeatureRepository&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Environment env&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;env&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; env&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Set&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;featureKeys&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    Map&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;for&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Iterator it &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;((&lt;/span&gt;AbstractEnvironment&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; env&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getPropertySources&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;iterator&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt; it&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;hasNext&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      PropertySource propertySource &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;PropertySource&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; it&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;next&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;propertySource &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;instanceof&lt;/span&gt; MapPropertySource&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
        map&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;putAll&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(((&lt;/span&gt;MapPropertySource&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; propertySource&lt;span style=&#34;color:#555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getSource&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
      &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;keySet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;k &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; k&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;startsWith&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FEATURE_PREFIX&lt;span style=&#34;color:#555&#34;&gt;))&lt;/span&gt;
        &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;toSet&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Boolean &lt;span style=&#34;color:#c0f&#34;&gt;isOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;String key&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; allFeatures&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Map&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Boolean&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;allFeatures&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; featureKeys&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;toMap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;k &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; k&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; k &lt;span style=&#34;color:#555&#34;&gt;-&amp;gt;&lt;/span&gt; Boolean&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;parseBoolean&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;env&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;k&lt;span style=&#34;color:#555&#34;&gt;))));&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;toggling-entire-controllers&#34;&gt;Toggling entire controllers&lt;/h3&gt;

&lt;p&gt;Since Spring controllers are wired up as beans, the &lt;code&gt;ConditionalOnProperty&lt;/code&gt; annotation can be used to toggle on entire controllers.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@ConditionalOnProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; havingValue &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;true&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FooController&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Map &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello foo!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;However, now we have two different mechanisms to toggle methods and controllers. It will be nice to consolidate them and doing so will allow us to use the same mechanism for toggling beans. This can be done by annotating &lt;code&gt;FeatureToggle&lt;/code&gt; with the &lt;a href=&#34;https://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/&#34;&gt;meta annotation&lt;/a&gt; &lt;code&gt;Conditional&lt;/code&gt; that looks up the state of feature toggles using the custom condition &lt;code&gt;FeatureCondition&lt;/code&gt;. This will change &lt;code&gt;FeatureToggle&lt;/code&gt; to:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Target&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;({&lt;/span&gt;ElementType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; ElementType&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;METHOD&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Retention&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Documented&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@Conditional&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureCondition&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#99f&#34;&gt;@interface&lt;/span&gt; FeatureToggle &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  String &lt;span style=&#34;color:#c0f&#34;&gt;feature&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;

  &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;expectedToBeOn&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The &lt;code&gt;FearureCondition&lt;/code&gt; uses the meta annotation attributes provided to it and the environment to decide the state to be returned:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FeatureCondition&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;implements&lt;/span&gt; Condition &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;matches&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;ConditionContext conditionContext&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; AnnotatedTypeMetadata annotatedTypeMetadata&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;annotatedTypeMetadata&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;isAnnotated&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureToggle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCanonicalName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()))&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
      Map&lt;span style=&#34;color:#555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color:#555&#34;&gt;&amp;gt;&lt;/span&gt; annotationAttributes &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; annotatedTypeMetadata
          &lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getAnnotationAttributes&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;FeatureToggle&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getCanonicalName&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;());&lt;/span&gt;
      String feature &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; annotationAttributes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
      &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; expectedToBeOn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Boolean&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;parseBoolean&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;valueOf&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;annotationAttributes&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;expectedToBeOn&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)));&lt;/span&gt;
      &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;boolean&lt;/span&gt; isOn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; Boolean&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;parseBoolean&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;conditionContext&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getEnvironment&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;getProperty&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;feature&lt;span style=&#34;color:#555&#34;&gt;));&lt;/span&gt;
      &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; expectedToBeOn &lt;span style=&#34;color:#555&#34;&gt;==&lt;/span&gt; isOn&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now that we have a unified mechanism to toggle controllers, beans and controller methods, we can use this annotation. The &lt;code&gt;FooController&lt;/code&gt; would now look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#99f&#34;&gt;@FeatureToggle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;feature &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.foo&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;FooController&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; Map &lt;span style=&#34;color:#c0f&#34;&gt;hello&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;message&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;hello foo!&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And our &lt;code&gt;AppConfig&lt;/code&gt; will be like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-java&#34; data-lang=&#34;java&#34;&gt;&lt;span style=&#34;color:#99f&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color:#0a8;font-weight:bold&#34;&gt;AppConfig&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;extends&lt;/span&gt; WebMvcConfigurerAdapter &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@Autowired&lt;/span&gt;
  Environment env&lt;span style=&#34;color:#555&#34;&gt;;&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@FeatureToggle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;feature &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.redis.session.store&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;,&lt;/span&gt; expectedToBeOn &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; SessionRepository &lt;span style=&#34;color:#c0f&#34;&gt;mapSessionRepository&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; MapSessionRepository&lt;span style=&#34;color:#555&#34;&gt;();&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Bean&lt;/span&gt;
  &lt;span style=&#34;color:#99f&#34;&gt;@FeatureToggle&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;feature &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;feature.redis.session.store&amp;#34;&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; SessionRepository &lt;span style=&#34;color:#c0f&#34;&gt;redisSessionRepository&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;RedisConnectionFactory factory&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; RedisOperationsSessionRepository&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;factory&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;

  &lt;span style=&#34;color:#99f&#34;&gt;@Override&lt;/span&gt;
  &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color:#078;font-weight:bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color:#c0f&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;InterceptorRegistry registry&lt;span style=&#34;color:#555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;{&lt;/span&gt;
    registry&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addInterceptor&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FeatureInterceptor&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;new&lt;/span&gt; FeatureRepository&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;env&lt;span style=&#34;color:#555&#34;&gt;)));&lt;/span&gt;
    &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color:#309&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;(&lt;/span&gt;registry&lt;span style=&#34;color:#555&#34;&gt;);&lt;/span&gt;
  &lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color:#555&#34;&gt;}&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In the second part of &lt;a href=&#34;https://sdqali.in/series/feature-toggles&#34;&gt;this series&lt;/a&gt;, we will explore how the feature toggle can be exposed to the front end and how to consume this and use it for toggling features in the Angular components.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;While feature toggles are just like any other application parameter, treating them as such in our stack resulted in errors, which we address later in this series.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;HandlerInterceptor
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Setting up a secure etcd cluster behind a proxy</title>
      <link>https://sdqali.in/blog/2016/11/11/setting-up-a-secure-etcd-cluster-behind-a-proxy/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 11 Nov 2016 13:07:32 -0800</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/11/setting-up-a-secure-etcd-cluster-behind-a-proxy/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;This is a blog post that explains how to set up a highly available etcd cluster behind a proxy and securing the communication between a client and the proxy, between the proxy and the individual member in the cluster and between members in the cluster.&lt;/p&gt;

&lt;p&gt;CoreOS&amp;rsquo;s etcd is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; a distributed key value store that provides a reliable way to store data across a cluster of machines. It’s open-source and available on GitHub. etcd gracefully handles leader elections during network partitions and will tolerate machine failure, including the leader.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s highly available distributed nature makes it a great choice for storing application configuration. Kubernetes, for example uses etcd to store all it&amp;rsquo;s API objects.&lt;/p&gt;

&lt;p&gt;The proxy mode in etcd allows etcd to run as a transparent proxy for a cluster. This makes it possible to expose only the proxy to the clients and abstract away discovery and leader election away from the client. The client needs to know only about the proxy.&lt;/p&gt;

&lt;p&gt;Communications to an etcd cluster and between members in a cluster can be secured through a PKI setup. Since an etcd proxy is in effect an etcd node that does not participate in leader election, communication between a client and a proxy can also be secured with similar infrastructure.&lt;/p&gt;

&lt;p&gt;In this example, we will set up a cluster of 3 etcd nodes. We will use a key pair for the nodes and proxy to communicate between each other and another key pair for clients to communicate with the proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sdqali.in/images/etcd-secure-cluster-proxy.svg&#34; alt=&#34;Diagram of a Secure Etcd Cluster with Proxy&#34; title=&#34;Secure Etcd Cluster with Proxy&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;generating-keys&#34;&gt;Generating Keys&lt;/h2&gt;

&lt;p&gt;This section borrows heavily from Kelsey Hightower&amp;rsquo;s &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kubernetes the Hard Way tutorial&lt;/a&gt;. For the purposes of this blog post, we are going to assume that we will be running the three nodes and the proxy on a local machine. There will be changes that need to be made to the key configurations if these are deployed elsewhere. The instructions also assume that you are on OS X. Please make the necessary adjustments if you are on Linux.&lt;/p&gt;

&lt;h3 id=&#34;install-cloudflare-pki-toolkit&#34;&gt;Install CloudFlare PKI toolkit&lt;/h3&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Install the csffl utility&lt;/span&gt;
wget https://pkg.cfssl.org/R1.2/cfssl_darwin-amd64
chmod +x cfssl_darwin-amd64
sudo mv cfssl_darwin-amd64 /usr/local/bin/cfssl

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# Install cfssljson utility&lt;/span&gt;
wget https://pkg.cfssl.org/R1.2/cfssljson_darwin-amd64
chmod +x cfssljson_darwin-amd64
sudo mv cfssljson_darwin-amd64 /usr/local/bin/cfssljson&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3 id=&#34;create-ca-key-and-certificate&#34;&gt;Create CA key and certificate&lt;/h3&gt;

&lt;p&gt;The first step will be to create a Certificate Authority configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;signing&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;default&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;expiry&amp;#34;: &amp;#34;8760h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    },
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;profiles&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;etcd-node&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;usages&amp;#34;: [&amp;#34;signing&amp;#34;, &amp;#34;key encipherment&amp;#34;, &amp;#34;server auth&amp;#34;, &amp;#34;client auth&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;expiry&amp;#34;: &amp;#34;8760h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      },
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;etcd-proxy&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;usages&amp;#34;: [&amp;#34;signing&amp;#34;, &amp;#34;key encipherment&amp;#34;, &amp;#34;server auth&amp;#34;, &amp;#34;client auth&amp;#34;],
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;        &amp;#34;expiry&amp;#34;: &amp;#34;8760h&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      }
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  }
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; ca-config.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here we are specifying two different profiles - one for the node key and one for the proxy key. We will then create a configuration for certificate signing request (CSR) for the CA key and certificate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;CN&amp;#34;: &amp;#34;Etcd&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;key&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;algo&amp;#34;: &amp;#34;rsa&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;size&amp;#34;: 2048
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  },
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;names&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;C&amp;#34;: &amp;#34;US&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;L&amp;#34;: &amp;#34;San Francisco&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;O&amp;#34;: &amp;#34;Infra&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;OU&amp;#34;: &amp;#34;CA&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;ST&amp;#34;: &amp;#34;California&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  ]
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; ca-csr.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Finally, we will generate the certificate and key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cfssl gencert -initca ca-csr.json | cfssljson -bare ca&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will generate the three files: &lt;code&gt;ca-key.pem&lt;/code&gt; - private key for the CA, &lt;code&gt;ca.pem&lt;/code&gt; - certificate for the CA and &lt;code&gt;ca.csr&lt;/code&gt; - certificate signing request for the CA.&lt;/p&gt;

&lt;h3 id=&#34;create-node-certificate-and-key&#34;&gt;Create Node certificate and key&lt;/h3&gt;

&lt;p&gt;Once we have the CA certificate and key in place, we can generate the TLS key for securing the communications between nodes and proxy. We will start by creating a configuration for this certificate. Since we are running everything locally, the hosts allowed to authenticate with this certificate include only &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;CN&amp;#34;: &amp;#34;etcd-node&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;hosts&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;localhost&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;0.0.0.0&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;127.0.0.1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  ],
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;key&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;algo&amp;#34;: &amp;#34;rsa&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;size&amp;#34;: 2048
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  },
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;names&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;C&amp;#34;: &amp;#34;US&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;L&amp;#34;: &amp;#34;San Francisco&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;O&amp;#34;: &amp;#34;Infra&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;OU&amp;#34;: &amp;#34;Cluster&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;ST&amp;#34;: &amp;#34;California&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  ]
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; etcd-node-csr.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can generate the node certificate and key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cfssl gencert &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -ca&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ca.pem &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -ca-key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ca-key.pem &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -config&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ca-config.json &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -profile&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;etcd-node &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  etcd-node-csr.json | cfssljson -bare etcd-node&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create three files: &lt;code&gt;etcd-node.pem&lt;/code&gt;- the node certificate, &lt;code&gt;etcd-node-key.pem&lt;/code&gt; the key for this certificate and &lt;code&gt;etcd-node.csr&lt;/code&gt; - the certificate signing request.&lt;/p&gt;

&lt;h3 id=&#34;create-proxy-certificate-and-key&#34;&gt;Create Proxy certificate and key&lt;/h3&gt;

&lt;p&gt;We can now generate the TLS key for securing the communications between the client and the proxy. We will start by creating a configuration for this certificate. Since our client and proxy are running locally, the hosts allowed to authenticate with this certificate include only &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;{
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;CN&amp;#34;: &amp;#34;etcd-proxy&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;hosts&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;localhost&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;0.0.0.0&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;127.0.0.1&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  ],
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;key&amp;#34;: {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;algo&amp;#34;: &amp;#34;rsa&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    &amp;#34;size&amp;#34;: 2048
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  },
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  &amp;#34;names&amp;#34;: [
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    {
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;C&amp;#34;: &amp;#34;US&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;L&amp;#34;: &amp;#34;San Francisco&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;O&amp;#34;: &amp;#34;Infra&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;OU&amp;#34;: &amp;#34;Cluster&amp;#34;,
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;      &amp;#34;ST&amp;#34;: &amp;#34;California&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    }
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;  ]
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; etcd-proxy-csr.json&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can generate the proxy certificate and key&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;cfssl gencert &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -ca&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ca.pem &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -ca-key&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ca-key.pem &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -config&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;ca-config.json &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  -profile&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;etcd-proxy &lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;\
&lt;/span&gt;&lt;span style=&#34;color:#c30;font-weight:bold&#34;&gt;&lt;/span&gt;  etcd-proxy-csr.json | cfssljson -bare etcd-proxy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will create three files: &lt;code&gt;etcd-proxy.pem&lt;/code&gt;- the proxy certificate, &lt;code&gt;etcd-proxy-key.pem&lt;/code&gt; the key for this certificate and &lt;code&gt;etcd-proxy.csr&lt;/code&gt; - the certificate signing request.&lt;/p&gt;

&lt;h2 id=&#34;running-the-nodes-securely&#34;&gt;Running the nodes securely&lt;/h2&gt;

&lt;p&gt;Now that we have the certificates and keys, we will start the three nodes that form our etcd cluster. We will create three shell scripts that does this for us. In each of these, we will pass the appropriate parameters to etcd so that it uses the node certificate and key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#script for node1&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;etcd \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--name=&amp;#39;&lt;/span&gt;node1&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--listen-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1179&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--advertise-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1179&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--listen-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1180&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-advertise-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1180&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster-token=&amp;#39;&lt;/span&gt;etcd-cluster-token&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster-state=&amp;#39;&lt;/span&gt;new&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--data-dir=./nodes/node1 \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-node1.sh

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# script for node2&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;etcd \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--name=&amp;#39;&lt;/span&gt;node2&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--listen-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1279&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--advertise-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1279&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--listen-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1280&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-advertise-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1280&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster-token=&amp;#39;&lt;/span&gt;etcd-cluster-token&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster-state=&amp;#39;&lt;/span&gt;new&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--data-dir=./nodes/node2 \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-node2.sh

&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;#script for node3&lt;/span&gt;
&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;etcd \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--name=&amp;#39;&lt;/span&gt;node3&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--listen-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1379&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--advertise-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1379&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--listen-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-advertise-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster-token=&amp;#39;&lt;/span&gt;etcd-cluster-token&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--initial-cluster-state=&amp;#39;&lt;/span&gt;new&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--data-dir=./nodes/node3 \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;--peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-node3.sh

chmod +x ./start-node1.sh ./start-node2.sh ./start-node3.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once these scripts are executed, we have an etcd cluster of three nodes. We can test that this cluster is started correctly with the right security using &lt;code&gt;etcdctl&lt;/code&gt; client. For this purpose, we will be using the node certificate and key temporarily. We will also be assuming that we know what the individual nodes are. It is important to note that in our final configuration, the client will not have access to this certificate and key. It will have access only to the proxy key and there is no guarantee that the client knows what the individual nodes are.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ etcdctl --cert-file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./etcd-node.pem  --key-file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./etcd-node-key.pem --ca-file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./ca.pem --endpoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://0.0.0.0:1179,https://0.0.0.0:1279,https://0.0.0.0:1379 cluster-health
member 5a68dbeefb870ed1 is healthy: got healthy result from https://localhost:1179
member 772c76fe731a3914 is healthy: got healthy result from https://localhost:1379
member aa3bff8d4d84db66 is healthy: got healthy result from https://localhost:1279
cluster is healthy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2 id=&#34;configuring-the-secure-proxy&#34;&gt;Configuring the secure proxy&lt;/h2&gt;

&lt;p&gt;Once we have the cluster running, we can run the proxy. To secure it, we will tell etcd to use the etcd-node key for communicating with the nodes and to use the etcd-proxy certificate to accept connection from clients.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;#!/usr/bin/env sh
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;etcd \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;    --name=&amp;#39;&lt;/span&gt;proxy&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --proxy=on \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --listen-client-urls https://localhost:2379 \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --initial-cluster &amp;#39;&lt;/span&gt;&lt;span style=&#34;color:#033&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --peer-cert-file=./etcd-node.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --peer-key-file=./etcd-node-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --peer-trusted-ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39; \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --ca-file=./ca.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --cert-file=./etcd-proxy.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --key-file=./etcd-proxy-key.pem \
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;     --data-dir=./nodes/proxy
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-proxy.sh

chmod +x start-proxy.sh&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once we have the proxy running with these parameters, we can test that the cluster and the proxy is configured correctly. This time, we will be using only the proxy certificate and the proxy end point.&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;$ etcdctl --cert-file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./etcd-proxy.pem  --key-file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./etcd-proxy-key.pem --ca-file&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;./ca.pem --endpoints&lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt;https://0.0.0.0:2379 cluster-health
member 5a68dbeefb870ed1 is healthy: got healthy result from https://localhost:1179
member 772c76fe731a3914 is healthy: got healthy result from https://localhost:1379
member aa3bff8d4d84db66 is healthy: got healthy result from https://localhost:1279
cluster is healthy&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This set up gives us a secure etcd cluster with a secure proxy in front of it. Communications between client and proxy, proxy and nodes and among nodes are all secured.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
