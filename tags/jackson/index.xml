<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jackson on {code that works}</title>
    <link>https://sdqali.in/tags/jackson/</link>
    <description>Recent content in Jackson on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 22 Mar 2018 22:21:42 -0700</lastBuildDate>
    
	<atom:link href="https://sdqali.in/tags/jackson/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>A Jackson and FreeBuilder quirk</title>
      <link>https://sdqali.in/blog/2018/03/22/a-jackson-and-freebuilder-quirk/</link>
      <pubDate>Thu, 22 Mar 2018 22:21:42 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2018/03/22/a-jackson-and-freebuilder-quirk/</guid>
      <description>Jackson is a great tool to have in your tool set if you deal with JSON or XML. It facilitates easy serialization and de-serialization to and from Java classes with a convenient annotation based interface. With the same set of annotations, we can achieve both XML and JSON serialization and de-serialization. With Jackson&amp;rsquo;s data-format-xml it is even possible to give the same Class a different JSON and XML representation.
@JacksonXmlRootElement(localName = &amp;#34;user-account&amp;#34;) @JsonRootName(&amp;#34;user&amp;#34;) public class Account { private String name; private String emailAddress; @JsonProperty(&amp;#34;name&amp;#34;) @JacksonXmlProperty(localName = &amp;#34;name&amp;#34;) public String getName() { return name; } @JsonProperty(&amp;#34;email_address&amp;#34;) @JacksonXmlProperty(localName = &amp;#34;email-address&amp;#34;) public String getEmailAddress() { return emailAddress; } // .</description>
    </item>
    
  </channel>
</rss>