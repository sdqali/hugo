<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{code that works}</title>
    <link>https://sdqali.in/tags/axon/index.xml</link>
    <description>Recent content on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://sdqali.in/tags/axon/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Deprecating domain events in Axon</title>
      <link>https://sdqali.in/blog/2016/04/24/deprecating-domain-events-in-axon/</link>
      <pubDate>Sun, 24 Apr 2016 18:35:43 -0500</pubDate>
      
      <guid>https://sdqali.in/blog/2016/04/24/deprecating-domain-events-in-axon/</guid>
      <description>&lt;p&gt;Recently at work, we had to deprecate a domain event. This event used to represent an error scenario. However, the business had since decided that this is no longer a valid error scenario. Removing the Java class is not straight forward - since there are events of this type stored in the event store, every time the aggregate associated with this event is loaded, Axon will throw errors trying to de-serialize them.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;p&gt;Obviously, we need an Upcaster &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to take care of this situation. The Upcaster in this scenario will have to upcast this event to something representing the non-existence of this event, regardless of the revision. There are two ways to address this issue - Upcasting to an explicit NoOpEvent and upcasting to an empty list.&lt;/p&gt;

&lt;h2 id=&#34;upcasting-to-a-noopevent&#34;&gt;Upcasting to a NoOpEvent&lt;/h2&gt;

&lt;p&gt;Given an event &lt;code&gt;ValidationForFirstNameFailedEvent&lt;/code&gt;, an upcaster that upcasts to a &lt;code&gt;NoOpEvent&lt;/code&gt; can be implemented as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;DeprecateValidationForFirstNameFailedEventUpcaster&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; AbstractSingleEntryUpcaster &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; Object &lt;span style=&#34;color: #CC00FF&#34;&gt;doUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedObject intermediateRepresentation&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; UpcastingContext context&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; SimpleSerializedType&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;NoOpEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; SerializedType &lt;span style=&#34;color: #CC00FF&#34;&gt;doUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; SimpleSerializedType&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;NoOpEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;canUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; serializedType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ValidationForFirstNameFailedEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Class &lt;span style=&#34;color: #CC00FF&#34;&gt;expectedRepresentationType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; JsonNode&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As expected, this upcaster does not look at the revision of the intermediate representation and simply looks at the type of the event. And it completely discards any fields in the event and returns a simple type of the &lt;code&gt;NoOpEvent&lt;/code&gt; class. Note that in this case, we are serializing the event as JSON using Jackson, hence the expected representation type is &lt;code&gt;com.fasterxml.jackson.databind.JsonNode&lt;/code&gt;. If we were to use Axon&amp;rsquo;s default XML serialization, the expected representation type will be &lt;code&gt;org.dom4j.Document&lt;/code&gt;
&lt;div class=&#34;signup col-lg-12 col-lg-offset-0 col-md-12 col-md-offset-0&#34;&gt;
  &lt;div class=&#34;col-lg-6 col-lg-offset-0 col-md-6 col-md-offset-0&#34;&gt;
    &lt;h3&gt;Finding this article useful?&lt;/h3&gt;
    &lt;div&gt;
      My posts with working code - tested and verified - and actionable explanations for specific programming problems. Delivered each week for free.
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-lg-6 col-lg-offset-0 col-md-6 col-md-offset-0&#34; id=&#34;mc_embed_signup&#34;&gt;
    &lt;form action=&#34;//codethatworks.us14.list-manage.com/subscribe/post?u=52d266a23636b031a38de6d70&amp;amp;id=b7e69e463e&#34; method=&#34;post&#34; id=&#34;mc-embedded-subscribe-form&#34; name=&#34;mc-embedded-subscribe-form&#34; class=&#34;validate&#34; target=&#34;_blank&#34; novalidate&gt;
      &lt;div id=&#34;mc_embed_signup_scroll&#34;&gt;
        &lt;div class=&#34;mc-field-group form-group&#34;&gt;
          &lt;label for=&#34;mce-FNAME&#34;&gt;First Name&lt;/label&gt;
          &lt;input type=&#34;text&#34; value=&#34;&#34; name=&#34;FNAME&#34; class=&#34;form-control&#34; id=&#34;mce-FNAME&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;mc-field-group form-group&#34;&gt;
          &lt;label for=&#34;mce-EMAIL&#34;&gt;Email Address&lt;/label&gt;
          &lt;input type=&#34;email&#34; value=&#34;&#34; name=&#34;EMAIL&#34; class=&#34;email form-control&#34; id=&#34;mce-EMAIL&#34;&gt;
        &lt;/div&gt;
        &lt;div id=&#34;mce-responses&#34; class=&#34;form-group&#34;&gt;
          &lt;div class=&#34;response&#34; id=&#34;mce-error-response&#34; style=&#34;display:none&#34; class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;&lt;/div&gt;
          &lt;div class=&#34;response&#34; id=&#34;mce-success-response&#34; style=&#34;display:none&#34; class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;button type=&#34;submit&#34; class=&#34;btn btn-success&#34; id=&#34;mc-embedded-subscribe&#34; name=&#34;subscribe&#34;&gt;Join the Newsletter&lt;/button&gt;
        &lt;div style=&#34;position: absolute; left: -5000px;&#34; aria-hidden=&#34;true&#34;&gt;&lt;input type=&#34;text&#34; name=&#34;b_52d266a23636b031a38de6d70_b7e69e463e&#34; tabindex=&#34;-1&#34; value=&#34;&#34;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/form&gt;
    &lt;p class=&#34;no-spam&#34;&gt;I won&#39;t send you spam. Unsubscribe at any time.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;upcasting-to-an-empty-list&#34;&gt;Upcasting to an empty list&lt;/h3&gt;

&lt;p&gt;Upcasting to an empty list can be easily achieved by implementing &lt;code&gt;Upcaster&amp;lt;T&amp;gt;&lt;/code&gt; instead of extending &lt;code&gt;AbstractSingleEntryUpcaster&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ValidationForFirstNameFailedEventToEmptyListUpcaster&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; Upcaster&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;JsonNode&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;canUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; serializedType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ValidationForFirstNameFailedEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;JsonNode&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;expectedRepresentationType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; JsonNode&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;SerializedObject&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; upcast&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedObject&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;JsonNode&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; intermediateRepresentation&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
        List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;SerializedType&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; expectedTypes&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; UpcastingContext context&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;SerializedType&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;upcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can also be done through extending &lt;code&gt;AbstractSingleEntryUpcaster&lt;/code&gt; and returning &lt;code&gt;null&lt;/code&gt; from both &lt;code&gt;upcast&lt;/code&gt; methods. The class in turns returns empty lists for us. This is evident if we look at the JavaDoc for the methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * Upcasts the given &amp;lt;code&amp;gt;intermediateRepresentation&amp;lt;/code&amp;gt; into zero or more other representations. The returned&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * list of Serialized Objects must match the given list of serialized types.&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * &amp;lt;p/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * This method may return &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; to indicate a deprecated object.&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     *&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * @param intermediateRepresentation The representation of the object to upcast&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * @param context                    An instance describing the context of the object to upcast&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * @return the new representation of the object&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;abstract&lt;/span&gt; T &lt;span style=&#34;color: #CC00FF&#34;&gt;doUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedObject&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; intermediateRepresentation&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                                  UpcastingContext context&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I posted this question in the &lt;a href=&#34;https://groups.google.com/forum/#!topic/axonframework/G2tlU06mRPM&#34;&gt;Axon mailing list&lt;/a&gt; as well as our internal developer mailing list and upcasting to an empty list was the more popular choice. Allard Buijze, the creator of Axon had this to say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;by upcasting to an empty list, you&amp;rsquo;re explicitly indicating that the event no longer exists. When upcasting to a NoOpEvent, you implicitly mean the same thing, as no one is interested in a NoOp event.
So you achieve the same thing, but explicit always beats implicit in DDD ;-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I agree with Allard that being explicit is better than being implicit (and not just in the context of DDD), I am not convinced that upcasting to an empty list is more explicit than upcasting to an explicit type. However, we went ahead with the empty list approach as it was the consensus among my coworkers.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Upcasting is a technique of migrating the schema of events in an event-sourced system to keep up with changes in the business requirements. The Axon documentation has a &lt;a href=&#34;http://www.axonframework.org/docs/2.0/repositories-and-event-stores.html#event-upcasting&#34;&gt;very good primer&lt;/a&gt; on upcasting, specifically in the context of Axon.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
  </channel>
</rss>