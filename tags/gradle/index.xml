<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{code that works}</title>
    <link>https://sdqali.in/tags/gradle/index.xml</link>
    <description>Recent content on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://sdqali.in/tags/gradle/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accessing Environment Variables in Gradle</title>
      <link>https://sdqali.in/blog/2013/10/01/accessing-environment-variables-in-gradle/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/01/accessing-environment-variables-in-gradle/</guid>
      <description>&lt;p&gt;I have been writing a fun Android App. &lt;a href=&#34;https://play.google.com/store/apps/details?id=in.sdqali.sharewithtitle&#34;&gt;Share With Title&lt;/a&gt; is a small application that allows you to share web pages you are reading to other applications without having to jump through the messy copy-paste hoop. (You should try it. If you share stuff from the web like I do, it will save you a lot of time and frustration). I have been coding on &lt;a href=&#34;https://developer.android.com/sdk/installing/studio.html&#34;&gt;Android Studio&lt;/a&gt;, Google&amp;rsquo;s IntelliJ based IDE for Android development. It uses Gradle for build scripts. Gradle is a Groovy based DSL &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for declaratively specifying build tasks. From what I have seen so far, it looks like an improvement over Ant.&lt;/p&gt;

&lt;p&gt;While attempting to build a signed version of my app, I found a &lt;a href=&#34;http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle&#34;&gt;Gradle recipe&lt;/a&gt; for signing Android applications. However, it used hard coded parameters including passwords. This lead me to figuring out how to use environment variables in Gradle scripts.&lt;/p&gt;

&lt;p&gt;Since Gradle scripts are Groovy files, Groovy&amp;rsquo;s &lt;code&gt;System.getEnv&lt;/code&gt; method will do the trick. The recipe modified to use this and thereby eliminate hard coded parameters will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;signingConfigs {
	release {
		storeFile file(System.getenv(&amp;quot;KEYSTORE&amp;quot;))
		storePassword System.getenv(&amp;quot;KEYSTORE_PASSWORD&amp;quot;)
		keyAlias System.getenv(&amp;quot;KEY_ALIAS&amp;quot;)
		keyPassword System.getenv(&amp;quot;KEY_PASSWORD&amp;quot;)
	}
}

buildTypes {
	release {
		signingConfig signingConfigs.release
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;A Domain Specific Languages (DSL) is a languages targeted to a particular kind of problem. Martin Fowler has a very good description of them &lt;a href=&#34;http://martinfowler.com/bliki/DomainSpecificLanguage.html&#34;&gt;here&lt;/a&gt;. Build scripts like Make, Ant and Rake are all DSLs.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Reading user input in Gradle scripts</title>
      <link>https://sdqali.in/blog/2013/10/01/reading-user-input-in-gradle-scripts/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/01/reading-user-input-in-gradle-scripts/</guid>
      <description>

&lt;p&gt;Continuing from the last &lt;a href=&#34;https://sdqali.in/blog/2013/10/01/accessing-environment-variables-in-gradle/&#34;&gt;blog post&lt;/a&gt;, I have been looking at reading user input from a Gradle script. This was a result of Stack Overflow user &lt;em&gt;user672009&lt;/em&gt;&amp;rsquo;s &lt;a href=&#34;http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle/19130098#19130098&#34;&gt;question&lt;/a&gt; about prompting for input from a Gradle script so the one does not have to include passwords in the script while checking in.&lt;/p&gt;

&lt;p&gt;Just like the last example, the fact that Gradle scripts are written in a Groovy DSL comes to our help. Groovy&amp;rsquo;s &lt;code&gt;System. console(). readLine&lt;/code&gt; can be called from inside Gradle tasks. The same recipe from the last post can be rewritten to prompt for various parameters.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;signingConfigs {
	release {
		storeFile file(System.console().readLine(&amp;quot;\n\$ Enter keystore path: &amp;quot;))
		storePassword System.console().readLine(&amp;quot;\n\$ Enter keystore password: &amp;quot;)
		keyAlias System.console().readLine(&amp;quot;\n\$ Enter key alias: &amp;quot;)
		keyPassword System.console().readLine(&amp;quot;\n\$ Enter key password: &amp;quot;)
	}
}

buildTypes {
	release {
		signingConfig signingConfigs.release
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;this-is-a-bad-idea&#34;&gt;This is a bad idea&lt;/h3&gt;

&lt;p&gt;While Gradle allows this kind of prompts, this is a bad pattern for a build script, especially when the script is run remotely, for example on a Continuous Integration &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; environment. The correct way to prevent hard coding of parameters like this is to access them from environment variables.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Continuous Integration (CI) is a software development practice where code from different developers, on different components are integrated frequently with the aid of an automated build. Martin Fowler has a &lt;a href=&#34;http://www.martinfowler.com/articles/continuousIntegration.html&#34;&gt;great article&lt;/a&gt; about it.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>