<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>tools on {code that works}</title>
    <link>https://sadique.io/tags/tools/</link>
    <description>Recent content in tools on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 08 Aug 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/tags/tools/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Disputed territories and merging shapes and features</title>
      <link>https://sadique.io/blog/2014/08/08/disputed-territories-and-merging-shapes-and-features/</link>
      <pubDate>Fri, 08 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2014/08/08/disputed-territories-and-merging-shapes-and-features/</guid>
      <description>Making a map that shows a disputed territory can be a tricky business. Nation states vigorously contest maps that appear to portray a boundary that challenges what a border looks like. From the Falkland Islands to Kuril Islands; from Western Sahara to Arunachal Pradesh, disputed territories result in omissions, additions and inaccuracies in maps.
I grew up looking at maps in books printed by the Oxford Press, that came with a disclaimer in blue rubber stamped across them that stated how the map was wrong.</description>
    </item>
    
    <item>
      <title>A list of GIS tools</title>
      <link>https://sadique.io/blog/2014/08/03/a-list-of-gis-tools/</link>
      <pubDate>Sun, 03 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2014/08/03/a-list-of-gis-tools/</guid>
      <description>I have been playing around with maps a lot these days and have ended up using various tools in the process. This blog post is a way to make a note of these tools for later use.
geojson.io Mapbox&amp;rsquo;s geojson.io is a simple tool for creating, editing and sharing maps. It lets you import map data in various formats and has an editor to modify maps.
GeoJSON-TopoJSON Jeff Paine&amp;lsquo;s GeoJSON-TopoJSON is a simple tool to convert between the more common GeoJSON format and the TopoJSON format used by libraries like D3.</description>
    </item>
    
    <item>
      <title>A simple JMeter test with login</title>
      <link>https://sadique.io/blog/2014/02/17/a-simple-jmeter-test-with-login/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2014/02/17/a-simple-jmeter-test-with-login/</guid>
      <description>For this example, the application under test is a simple Rails application, with the login form at /login and a POST request to /login does the authentication.
Add a Thread Group A Thread Group defines a pool of users that will execute a particular test case against the server. JMeter makes the number of users, and the ramp-rate configurable. For the purpose of this example, Number of Threads is 2 and the ramp up time period is 1 second.</description>
    </item>
    
    <item>
      <title>Shared history in Bash</title>
      <link>https://sadique.io/blog/2013/09/15/shared-history-in-bash/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/09/15/shared-history-in-bash/</guid>
      <description>One of the features that I miss most in Bash is the shared history between terminals that Zsh supports. I was hunting down a solution for this and came across this Stack Overflow answer 1 by user lesmana. This code snippet does the trick:
HISTSIZE=9000 HISTFILESIZE=$HISTSIZE HISTCONTROL=ignorespace:ignoredups history() { _bash_history_sync builtin history &amp;#34;$@&amp;#34; } _bash_history_sync() { builtin history -a #1 HISTFILESIZE=$HISTSIZE #2 builtin history -c #3 builtin history -r #4 } PROMPT_COMMAND=&amp;#34;_bash_history_sync;$PROMPT_COMMAND&amp;#34; This is very hackyâ€”This setting overrides the shell prompt to sync history every time the prompt is loaded.</description>
    </item>
    
    <item>
      <title>Navigating Stacktraces in Emacs</title>
      <link>https://sadique.io/blog/2013/08/22/navigating-stacktraces-in-emacs/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/08/22/navigating-stacktraces-in-emacs/</guid>
      <description>&lt;p&gt;I had to debug an issue today and that meant dealing with Rails stack traces. I got tired of having to constantly switch between reading the trace in the terminal and the code in Emacs to figure out what was going wrong and get more context around it. I felt that there should be an easier way of doing this. A quick search &lt;sup id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; did not yield anything. But then I remembered Grep mode &lt;sup id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34; class=&#34;footnote-ref&#34; role=&#34;doc-noteref&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and it occurred to me that hijacking Grep mode&amp;rsquo;s navigation feature would let me navigate the stack trace better. This is the solution I came up with.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Validating JSON in Emacs</title>
      <link>https://sadique.io/blog/2013/07/31/validating-json-in-emacs/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/07/31/validating-json-in-emacs/</guid>
      <description>&lt;!-- raw HTML omitted --&gt;</description>
    </item>
    
    <item>
      <title>Emacs hack: Viewing Git logs while composing commit messages</title>
      <link>https://sadique.io/blog/2013/04/29/emacs-hack-viewing-git-logs-while-composing-commit-messages/</link>
      <pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/04/29/emacs-hack-viewing-git-logs-while-composing-commit-messages/</guid>
      <description>I use Emacs as my editor to compose Git commit messages. I almost never commit from the terminal with git commit -m. This approach has two advantages: I get a chance to verify what is being committed and get to compose the message using a proper editor complete with spell checking provided by flyspell mode. One thing I wish I had access to while composing commit messages is the git log.</description>
    </item>
    
    <item>
      <title>Configure Git&#39;s comment character</title>
      <link>https://sadique.io/blog/2013/04/14/configure-gits-comment-character/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/04/14/configure-gits-comment-character/</guid>
      <description>TL;DR - Use the core.commentchar configuration to change the character Git uses to mark comment lines in commit messages.
My team has a convention of putting the number of the current Issue/Ticket/Story that we are working on at the beginning of every commit message. This is great because it lets us make sense of the history of our code by helping us answer
 What were the changes made to the code base to build a feature or fix an issue?</description>
    </item>
    
  </channel>
</rss>