<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Jwt on {code that works}</title>
    <link>https://sdqali.in/tags/jwt/</link>
    <description>Recent content in Jwt on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 14 Jul 2016 06:05:53 +0000</lastBuildDate>
    
	<atom:link href="https://sdqali.in/tags/jwt/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>JWT authentication with Spring Web - Part 5</title>
      <link>https://sdqali.in/blog/2016/07/14/jwt-authentication-with-spring-web-part-5/</link>
      <pubDate>Thu, 14 Jul 2016 06:05:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/14/jwt-authentication-with-spring-web-part-5/</guid>
      <description>&lt;p&gt;In parts 1 through 4 of this series, we built a Spring API that can issue a JWT when a user successfully authenticates and verify the JWT presented by the client for subsequent requests. In this blog post - the last in the series, we will build a simple Angular JS application with authentication that uses this API as the backend.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 4</title>
      <link>https://sdqali.in/blog/2016/07/08/jwt-authentication-with-spring-web-part-4/</link>
      <pubDate>Fri, 08 Jul 2016 06:47:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/08/jwt-authentication-with-spring-web-part-4/</guid>
      <description>&lt;p&gt;In parts 1 through 3 of this series, we built a Spring API that can issue a JWT when a user successfully authenticates. In this blog post, we will add the capability to verify the JWT presented by the client for subsequent requests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 3</title>
      <link>https://sdqali.in/blog/2016/07/06/jwt-authentication-with-spring-web-part-3/</link>
      <pubDate>Wed, 06 Jul 2016 05:30:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/06/jwt-authentication-with-spring-web-part-3/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-2/&#34;&gt;previous blog post&lt;/a&gt;, we built the Spring API that responds with Profile information. Continuing on the path to building authentication with JWT, in this blog post, we will create a login mechanism that issues a JWT when the user presents the correct credentials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 2</title>
      <link>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-2/</link>
      <pubDate>Sun, 03 Jul 2016 16:22:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-2/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web-part-1/&#34;&gt;previous blog post&lt;/a&gt; in this series, we looked at the basics of JWT. We will move on to building the Spring API that we will use JWT for authentication in this blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 1</title>
      <link>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-1/</link>
      <pubDate>Sun, 03 Jul 2016 01:42:04 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-1/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;jwt authentication example&#34; name=&#34;keywords&#34;&gt;
JSON Web Tokens (JWTs) are signed tokens issued by a server that it can use to verify a claim made by a client. This blog post is the first in a series where I implement authentication based on JWT in a Spring Web application with an Angular JS front end.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>