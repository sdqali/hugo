<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>best-practices on {code that works}</title>
    <link>https://sadique.io/tags/best-practices/</link>
    <description>Recent content in best-practices on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 03 Feb 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/tags/best-practices/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bullet proof Jenkins setup</title>
      <link>https://sadique.io/blog/2012/02/03/bullet-proof-jenkins-setup/</link>
      <pubDate>Fri, 03 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/02/03/bullet-proof-jenkins-setup/</guid>
      <description>&lt;p&gt;In this post, I will describe how a neat setup and some discipline will ensure a Jenkins that can be rolled back and recreated very easily - a bullet proof Jenkins setup.  I have been working on configuring our Jenkins instance. This was the first time I had played around with Jenkins. I am fairly comfortable with &lt;!-- raw HTML omitted --&gt;Go&lt;!-- raw HTML omitted --&gt; from ThoughtWorks Studios. All of my past teams used Go as their tool for continuous delivery.&lt;/p&gt;
&lt;p&gt;One of the things I found very different from Go in Jenkins is the absence of the notion of a Pipeline as the basic entity of build, as proposed in &lt;!-- raw HTML omitted --&gt;Continuous Delivery&lt;!-- raw HTML omitted --&gt;. Although there are plugins to make this available in Jenkins, we decided to go with Jenkins&amp;rsquo; model of Jobs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why your project should have a Getting Started guide.</title>
      <link>https://sadique.io/blog/2012/01/17/why-your-project-should-have-a-getting-started-guide./</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/01/17/why-your-project-should-have-a-getting-started-guide./</guid>
      <description>My new team at work is writing a bunch of Rails applications. This is one of those codebases that one would call &amp;ldquo;legacy&amp;rdquo; without much argument. Most of these apps have their own patched, vendorized Rails versions.
Getting up and running was an absolute pain. This project existed before Bundler and the list of gem dependencies are not checked in. I got the output of running gem list on a colleague&amp;rsquo;s box, wrote a Ruby script to generate a shell script that installs all the gems.</description>
    </item>
    
  </channel>
</rss>