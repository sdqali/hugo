<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on {code that works}</title>
    <link>https://sadique.io/tags/python/</link>
    <description>Recent content in Python on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 26 Sep 2017 04:22:39 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Python URL manipulation revisited</title>
      <link>https://sadique.io/blog/2017/09/26/python-url-manipulation-revisited/</link>
      <pubDate>Tue, 26 Sep 2017 04:22:39 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2017/09/26/python-url-manipulation-revisited/</guid>
      <description>My last blog post about publishing standalone files to Nexus repositories prompted me to revisit URL manipulation in Python. When I did this the last time, I used Python stand library&amp;rsquo;s urlparse and it did the job. This time around, I needed to do a different kind of manipulation. Given a URL, I had to set credentials on it.
I started at urlparse and soon realized that Python3 moved this module to urllib.</description>
    </item>
    
    <item>
      <title>Python Hack - Dynamically override an object&#39;s attribute</title>
      <link>https://sadique.io/blog/2013/10/07/python-hack-dynamically-override-an-objects-attribute/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/10/07/python-hack-dynamically-override-an-objects-attribute/</guid>
      <description>While working with Locust 1 recently, we ran into a situation where we had to dynamically override an attribute in a class in the Locust library so as to control what value it got assigned. After a lot of scratching our heads and reading the Python documentation, we came across the property function. We were able to use this to hack together a solution that ensures that every time an attribute is read, it returns the result of executing a method.</description>
    </item>
    
    <item>
      <title>Named Capture Groups in Regular Expressions</title>
      <link>https://sadique.io/blog/2013/09/29/named-capture-groups-in-regular-expressions/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/09/29/named-capture-groups-in-regular-expressions/</guid>
      <description>I will admit that I find regular expressions somewhat hard to parse. While the thinking process needed to write a regular expression is iterative and hence results in the correct expression suitable for the situation, once it is written it lacks readability. I have faced that pain of trying to grok a complex regular expression written years ago. So I was pleasantly surprised when I saw this example from Hacker News user WestCoastJustin.</description>
    </item>
    
    <item>
      <title>Decomposing URLs in Python</title>
      <link>https://sadique.io/blog/2013/09/26/decomposing-urls-in-python/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/09/26/decomposing-urls-in-python/</guid>
      <description>Python&amp;rsquo;s urlparse module breaks down URLs in to components. It supports all the URL schemes specified in RFC 3986 1.
&amp;gt;&amp;gt;&amp;gt; import urlparse &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; urlparse.urlparse(&amp;#34;https://example.com/foo?param=bar&amp;#34;) ParseResult(scheme=&amp;#39;https&amp;#39;, netloc=&amp;#39;example.com&amp;#39;, path=&amp;#39;/foo&amp;#39;, params=&amp;#39;&amp;#39;, query=&amp;#39;param=bar&amp;#39;, fragment=&amp;#39;&amp;#39;) &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; urlparse.urlparse(&amp;#34;file://example.com/etc/fstab&amp;#34;) ParseResult(scheme=&amp;#39;file&amp;#39;, netloc=&amp;#39;example.com&amp;#39;, path=&amp;#39;/etc/fstab&amp;#39;, params=&amp;#39;&amp;#39;, query=&amp;#39;&amp;#39;, fragment=&amp;#39;&amp;#39;) &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; urlparse.urlparse(&amp;#34;news:comp.infosystems.www.misc&amp;#34;) ParseResult(scheme=&amp;#39;news&amp;#39;, netloc=&amp;#39;&amp;#39;, path=&amp;#39;comp.infosystems.www.misc&amp;#39;, params=&amp;#39;&amp;#39;, query=&amp;#39;&amp;#39;, fragment=&amp;#39;&amp;#39;) IETF - RFC for Uniform Resource Identifier (URI): Generic Syntax. [return]   </description>
    </item>
    
    <item>
      <title>Python&#39;s bool type</title>
      <link>https://sadique.io/blog/2013/08/15/pythons-bool-type/</link>
      <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/08/15/pythons-bool-type/</guid>
      <description>Python does not have a true boolean type. The True and False built-in values in Python are wrappers around the integers 1 and 0. This results in some interesting results involving True and False.
&amp;gt;&amp;gt;&amp;gt; True == 1 True &amp;gt;&amp;gt;&amp;gt; False == 0 True &amp;gt;&amp;gt;&amp;gt; True + 9 10 &amp;gt;&amp;gt;&amp;gt; False - 1 -1 &amp;gt;&amp;gt;&amp;gt; str(True) &amp;#39;True&amp;#39; &amp;gt;&amp;gt;&amp;gt; repr(True) &amp;#39;True&amp;#39; The Python bool implementation got formalised in PEP 285 1 in 2002 by Guido van Rossum.</description>
    </item>
    
    <item>
      <title>Understanding Python&#39;s &#34;with&#34; statement</title>
      <link>https://sadique.io/blog/2012/07/09/understanding-pythons-with-statement/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/07/09/understanding-pythons-with-statement/</guid>
      <description>&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;with&lt;/code&gt; statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.&lt;/p&gt;

&lt;p&gt;Without the &lt;code&gt;with&lt;/code&gt; statement, one would write something along the lines of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/tmp/foo.txt&amp;#34;&lt;/span&gt;)
data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two annoying things here. First, you end up forgetting to close the file handler. The second is how to handle exceptions that may occur once the file handler has been obtained. One could write something like this to get around this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/tmp/foo.txt&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this works well, it is unnecessarily verbose. This is where &lt;code&gt;with&lt;/code&gt; is useful. The good thing about &lt;code&gt;with&lt;/code&gt; apart from the better syntax is that it is very good handling exceptions. The above code would look like this, when using &lt;code&gt;with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/tmp/foo.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;:
   data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Heredocs in Ruby and Python</title>
      <link>https://sadique.io/blog/2012/07/04/heredocs-in-ruby-and-python/</link>
      <pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/07/04/heredocs-in-ruby-and-python/</guid>
      <description>&lt;p&gt;I have been doing some coding in Python recently. While playing around with some code, I noticed that the way &lt;a href=&#34;http://en.wikipedia.org/wiki/Here_document&#34;&gt;heredocs&lt;/a&gt; are used in Python is different from Ruby.&lt;/p&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;Consider the following snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# test.py&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;some text in single line&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;As opposed to
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;some text
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;written as
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;heredoc
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and then another single line&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run, this would result in this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bash-3.2$ python test.py
some text in single line

As opposed to
some text
written as
heredoc

and &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;then&lt;/span&gt; another single line&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how there is a preceding and trailing linebreak around the string printed using heredoc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Micro Journal - simple Git-backed journal in Python</title>
      <link>https://sadique.io/blog/2012/06/25/micro-journal-simple-git-backed-journal-in-python/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/06/25/micro-journal-simple-git-backed-journal-in-python/</guid>
      <description>Today, I pushed out Microjournal, a simple and lightweight journal. I wrote Microjournal to reduce the pain of typing a number of commands to create and maintain my daily journal which I type out in Emacs and use Git to store. It is a single file Python script.
Microjournal does not do much on it&amp;rsquo;s own. It creates a Git repository for you, and then you can write down entries whenever you feel like.</description>
    </item>
    
    <item>
      <title>Autorun.py - Execute stuff on file change</title>
      <link>https://sadique.io/blog/2010/01/09/autorun.py-execute-stuff-on-file-change/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2010/01/09/autorun.py-execute-stuff-on-file-change/</guid>
      <description>I really liked ZenTest&amp;rsquo;s Autospec in action. Recently, when I was trying to write some Python stuff, I thought it would be nice if I would have a tool that would just run the unit tests, so that I don&amp;rsquo;t have to switch between console windows. Better still, I could run it from inside my Emacs.
Clearly, monitoring files for changes, shouldn&amp;rsquo;t be big deal. I decided to write the tool myself in Python.</description>
    </item>
    
  </channel>
</rss>