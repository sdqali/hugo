<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{code that works}</title>
    <link>https://sdqali.in/tags/cluster/index.xml?utm_source=site&amp;utm_medium=feed</link>
    <description>Recent content on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="/tags/cluster/index.xml?utm_source=site&amp;utm_medium=feed" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Setting up a secure etcd cluster behind a proxy</title>
      <link>https://sdqali.in/blog/2016/11/11/setting-up-a-secure-etcd-cluster-behind-a-proxy/?utm_source=site&amp;utm_medium=feed</link>
      <pubDate>Fri, 11 Nov 2016 13:07:32 -0800</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/11/setting-up-a-secure-etcd-cluster-behind-a-proxy/?utm_source=site&amp;utm_medium=feed</guid>
      <description>&lt;p&gt;This is a blog post that explains how to set up a highly available etcd cluster behind a proxy and securing the communication between a client and the proxy, between the proxy and the individual member in the cluster and between members in the cluster.
&lt;/p&gt;

&lt;p&gt;CoreOS&amp;rsquo;s etcd is&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&amp;hellip; a distributed key value store that provides a reliable way to store data across a cluster of machines. Itâ€™s open-source and available on GitHub. etcd gracefully handles leader elections during network partitions and will tolerate machine failure, including the leader.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It&amp;rsquo;s highly available distributed nature makes it a great choice for storing application configuration. Kubernetes, for example uses etcd to store all it&amp;rsquo;s API objects.&lt;/p&gt;

&lt;p&gt;The proxy mode in etcd allows etcd to run as a transparent proxy for a cluster. This makes it possible to expose only the proxy to the clients and abstract away discovery and leader election away from the client. The client needs to know only about the proxy.&lt;/p&gt;

&lt;p&gt;Communications to an etcd cluster and between members in a cluster can be secured through a PKI setup. Since an etcd proxy is in effect an etcd node that does not participate in leader election, communication between a client and a proxy can also be secured with similar infrastructure.&lt;/p&gt;

&lt;p&gt;In this example, we will set up a cluster of 3 etcd nodes. We will use a key pair for the nodes and proxy to communicate between each other and another key pair for clients to communicate with the proxy.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sdqali.in/images/etcd-secure-cluster-proxy.svg&#34; alt=&#34;Diagram of a Secure Etcd Cluster with Proxy&#34; title=&#34;Secure Etcd Cluster with Proxy&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;generating-keys&#34;&gt;Generating Keys&lt;/h2&gt;

&lt;p&gt;This section borrows heavily from Kelsey Hightower&amp;rsquo;s &lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;Kubernetes the Hard Way tutorial&lt;/a&gt;. For the purposes of this blog post, we are going to assume that we will be running the three nodes and the proxy on a local machine. There will be changes that need to be made to the key configurations if these are deployed elsewhere. The instructions also assume that you are on OS X. Please make the necessary adjustments if you are on Linux.&lt;/p&gt;

&lt;h3 id=&#34;install-cloudflare-pki-toolkit&#34;&gt;Install CloudFlare PKI toolkit&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Install the csffl utility&lt;/span&gt;
wget https://pkg.cfssl.org/R1.2/cfssl_darwin-amd64
chmod +x cfssl_darwin-amd64
sudo mv cfssl_darwin-amd64 /usr/local/bin/cfssl

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# Install cfssljson utility&lt;/span&gt;
wget https://pkg.cfssl.org/R1.2/cfssljson_darwin-amd64
chmod +x cfssljson_darwin-amd64
sudo mv cfssljson_darwin-amd64 /usr/local/bin/cfssljson
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;create-ca-key-and-certificate&#34;&gt;Create CA key and certificate&lt;/h3&gt;

&lt;p&gt;The first step will be to create a Certificate Authority configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;signing&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;default&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;expiry&amp;quot;: &amp;quot;8760h&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    },&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;profiles&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;etcd-node&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;        &amp;quot;usages&amp;quot;: [&amp;quot;signing&amp;quot;, &amp;quot;key encipherment&amp;quot;, &amp;quot;server auth&amp;quot;, &amp;quot;client auth&amp;quot;],&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;        &amp;quot;expiry&amp;quot;: &amp;quot;8760h&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      },&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;etcd-proxy&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;        &amp;quot;usages&amp;quot;: [&amp;quot;signing&amp;quot;, &amp;quot;key encipherment&amp;quot;, &amp;quot;server auth&amp;quot;, &amp;quot;client auth&amp;quot;],&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;        &amp;quot;expiry&amp;quot;: &amp;quot;8760h&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      }&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    }&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  }&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; ca-config.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Here we are specifying two different profiles - one for the node key and one for the proxy key. We will then create a configuration for certificate signing request (CSR) for the CA key and certificate.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;CN&amp;quot;: &amp;quot;Etcd&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;key&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;size&amp;quot;: 2048&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  },&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;names&amp;quot;: [&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;C&amp;quot;: &amp;quot;US&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;L&amp;quot;: &amp;quot;San Francisco&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;O&amp;quot;: &amp;quot;Infra&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;OU&amp;quot;: &amp;quot;CA&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;ST&amp;quot;: &amp;quot;California&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    }&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  ]&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; ca-csr.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Finally, we will generate the certificate and key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cfssl gencert -initca ca-csr.json | cfssljson -bare ca
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will generate the three files: &lt;code&gt;ca-key.pem&lt;/code&gt; - private key for the CA, &lt;code&gt;ca.pem&lt;/code&gt; - certificate for the CA and &lt;code&gt;ca.csr&lt;/code&gt; - certificate signing request for the CA.&lt;/p&gt;

&lt;h3 id=&#34;create-node-certificate-and-key&#34;&gt;Create Node certificate and key&lt;/h3&gt;

&lt;p&gt;Once we have the CA certificate and key in place, we can generate the TLS key for securing the communications between nodes and proxy. We will start by creating a configuration for this certificate. Since we are running everything locally, the hosts allowed to authenticate with this certificate include only &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;CN&amp;quot;: &amp;quot;etcd-node&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;hosts&amp;quot;: [&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;localhost&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;0.0.0.0&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  ],&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;key&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;size&amp;quot;: 2048&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  },&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;names&amp;quot;: [&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;C&amp;quot;: &amp;quot;US&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;L&amp;quot;: &amp;quot;San Francisco&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;O&amp;quot;: &amp;quot;Infra&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;OU&amp;quot;: &amp;quot;Cluster&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;ST&amp;quot;: &amp;quot;California&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    }&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  ]&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; etcd-node-csr.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can generate the node certificate and key&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cfssl gencert &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -ca&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;ca.pem &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -ca-key&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;ca-key.pem &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -config&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;ca-config.json &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -profile&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;etcd-node &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  etcd-node-csr.json | cfssljson -bare etcd-node
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create three files: &lt;code&gt;etcd-node.pem&lt;/code&gt;- the node certificate, &lt;code&gt;etcd-node-key.pem&lt;/code&gt; the key for this certificate and &lt;code&gt;etcd-node.csr&lt;/code&gt; - the certificate signing request.
&lt;div class=&#34;signup col-lg-12 col-lg-offset-0 col-md-12 col-md-offset-0&#34;&gt;
  &lt;div class=&#34;col-lg-6 col-lg-offset-0 col-md-6 col-md-offset-0&#34;&gt;
    &lt;h3&gt;Finding this article useful?&lt;/h3&gt;
    &lt;div&gt;
      My posts with working code - tested and verified - and actionable explanations for specific programming problems. Delivered each week for free.
    &lt;/div&gt;
  &lt;/div&gt;
  &lt;div class=&#34;col-lg-6 col-lg-offset-0 col-md-6 col-md-offset-0&#34; id=&#34;mc_embed_signup&#34;&gt;
    &lt;form action=&#34;//codethatworks.us14.list-manage.com/subscribe/post?u=52d266a23636b031a38de6d70&amp;amp;id=b7e69e463e&#34; method=&#34;post&#34; id=&#34;mc-embedded-subscribe-form&#34; name=&#34;mc-embedded-subscribe-form&#34; class=&#34;validate&#34; target=&#34;_blank&#34; novalidate&gt;
      &lt;div id=&#34;mc_embed_signup_scroll&#34;&gt;
        &lt;div class=&#34;mc-field-group form-group&#34;&gt;
          &lt;label for=&#34;mce-FNAME&#34;&gt;First Name&lt;/label&gt;
          &lt;input type=&#34;text&#34; value=&#34;&#34; name=&#34;FNAME&#34; class=&#34;form-control&#34; id=&#34;mce-FNAME&#34;&gt;
        &lt;/div&gt;
        &lt;div class=&#34;mc-field-group form-group&#34;&gt;
          &lt;label for=&#34;mce-EMAIL&#34;&gt;Email Address&lt;/label&gt;
          &lt;input type=&#34;email&#34; value=&#34;&#34; name=&#34;EMAIL&#34; class=&#34;email form-control&#34; id=&#34;mce-EMAIL&#34;&gt;
        &lt;/div&gt;
        &lt;div id=&#34;mce-responses&#34; class=&#34;form-group&#34;&gt;
          &lt;div class=&#34;response&#34; id=&#34;mce-error-response&#34; style=&#34;display:none&#34; class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;&lt;/div&gt;
          &lt;div class=&#34;response&#34; id=&#34;mce-success-response&#34; style=&#34;display:none&#34; class=&#34;alert alert-success&#34; role=&#34;alert&#34;&gt;&lt;/div&gt;
        &lt;/div&gt;
        &lt;button type=&#34;submit&#34; class=&#34;btn btn-success&#34; id=&#34;mc-embedded-subscribe&#34; name=&#34;subscribe&#34;&gt;Join the Newsletter&lt;/button&gt;
        &lt;div style=&#34;position: absolute; left: -5000px;&#34; aria-hidden=&#34;true&#34;&gt;&lt;input type=&#34;text&#34; name=&#34;b_52d266a23636b031a38de6d70_b7e69e463e&#34; tabindex=&#34;-1&#34; value=&#34;&#34;&gt;&lt;/div&gt;
      &lt;/div&gt;
    &lt;/form&gt;
    &lt;p class=&#34;no-spam&#34;&gt;I won&#39;t send you spam. Unsubscribe at any time.&lt;/p&gt;
  &lt;/div&gt;
&lt;/div&gt;
&lt;/p&gt;

&lt;h3 id=&#34;create-proxy-certificate-and-key&#34;&gt;Create Proxy certificate and key&lt;/h3&gt;

&lt;p&gt;We can now generate the TLS key for securing the communications between the client and the proxy. We will start by creating a configuration for this certificate. Since our client and proxy are running locally, the hosts allowed to authenticate with this certificate include only &lt;code&gt;localhost&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;{&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;CN&amp;quot;: &amp;quot;etcd-proxy&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;hosts&amp;quot;: [&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;localhost&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;0.0.0.0&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;127.0.0.1&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  ],&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;key&amp;quot;: {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;algo&amp;quot;: &amp;quot;rsa&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    &amp;quot;size&amp;quot;: 2048&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  },&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  &amp;quot;names&amp;quot;: [&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    {&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;C&amp;quot;: &amp;quot;US&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;L&amp;quot;: &amp;quot;San Francisco&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;O&amp;quot;: &amp;quot;Infra&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;OU&amp;quot;: &amp;quot;Cluster&amp;quot;,&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;      &amp;quot;ST&amp;quot;: &amp;quot;California&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    }&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;  ]&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;}&amp;#39;&lt;/span&gt; &amp;gt; etcd-proxy-csr.json
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Now we can generate the proxy certificate and key&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;cfssl gencert &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -ca&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;ca.pem &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -ca-key&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;ca-key.pem &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -config&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;ca-config.json &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  -profile&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;etcd-proxy &lt;span style=&#34;color: #CC3300; font-weight: bold&#34;&gt;\&lt;/span&gt;
  etcd-proxy-csr.json | cfssljson -bare etcd-proxy
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This will create three files: &lt;code&gt;etcd-proxy.pem&lt;/code&gt;- the proxy certificate, &lt;code&gt;etcd-proxy-key.pem&lt;/code&gt; the key for this certificate and &lt;code&gt;etcd-proxy.csr&lt;/code&gt; - the certificate signing request.&lt;/p&gt;

&lt;h2 id=&#34;running-the-nodes-securely&#34;&gt;Running the nodes securely&lt;/h2&gt;

&lt;p&gt;Now that we have the certificates and keys, we will start the three nodes that form our etcd cluster. We will create three shell scripts that does this for us. In each of these, we will pass the appropriate parameters to etcd so that it uses the node certificate and key.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#script for node1&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;#!/usr/bin/env sh&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;etcd \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--name=&amp;#39;&lt;/span&gt;node1&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--listen-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1179&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--advertise-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1179&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--listen-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1180&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-advertise-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1180&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster-token=&amp;#39;&lt;/span&gt;etcd-cluster-token&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster-state=&amp;#39;&lt;/span&gt;new&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--data-dir=./nodes/node1 \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-node1.sh

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# script for node2&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;#!/usr/bin/env sh&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;etcd \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--name=&amp;#39;&lt;/span&gt;node2&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--listen-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1279&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--advertise-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1279&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--listen-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1280&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-advertise-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1280&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster-token=&amp;#39;&lt;/span&gt;etcd-cluster-token&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster-state=&amp;#39;&lt;/span&gt;new&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--data-dir=./nodes/node2 \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-node2.sh

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#script for node3&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;#!/usr/bin/env sh&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;etcd \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--name=&amp;#39;&lt;/span&gt;node3&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--listen-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1379&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--advertise-client-urls=&amp;#39;&lt;/span&gt;https://localhost:1379&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--listen-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-advertise-peer-urls=&amp;#39;&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster=&amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster-token=&amp;#39;&lt;/span&gt;etcd-cluster-token&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--initial-cluster-state=&amp;#39;&lt;/span&gt;new&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--data-dir=./nodes/node3 \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;--peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-node3.sh

chmod +x ./start-node1.sh ./start-node2.sh ./start-node3.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once these scripts are executed, we have an etcd cluster of three nodes. We can test that this cluster is started correctly with the right security using &lt;code&gt;etcdctl&lt;/code&gt; client. For this purpose, we will be using the node certificate and key temporarily. We will also be assuming that we know what the individual nodes are. It is important to note that in our final configuration, the client will not have access to this certificate and key. It will have access only to the proxy key and there is no guarantee that the client knows what the individual nodes are.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ etcdctl --cert-file&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;./etcd-node.pem  --key-file&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;./etcd-node-key.pem --ca-file&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;./ca.pem --endpoints&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://0.0.0.0:1179,https://0.0.0.0:1279,https://0.0.0.0:1379 cluster-health
member 5a68dbeefb870ed1 is healthy: got healthy result from https://localhost:1179
member 772c76fe731a3914 is healthy: got healthy result from https://localhost:1379
member aa3bff8d4d84db66 is healthy: got healthy result from https://localhost:1279
cluster is healthy
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;configuring-the-secure-proxy&#34;&gt;Configuring the secure proxy&lt;/h2&gt;

&lt;p&gt;Once we have the cluster running, we can run the proxy. To secure it, we will tell etcd to use the etcd-node key for communicating with the nodes and to use the etcd-proxy certificate to accept connection from clients.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;#!/usr/bin/env sh&lt;/span&gt;

&lt;span style=&#34;color: #CC3300&#34;&gt;etcd \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;    --name=&amp;#39;&lt;/span&gt;proxy&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --proxy=on \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --listen-client-urls https://localhost:2379 \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --initial-cluster &amp;#39;&lt;/span&gt;&lt;span style=&#34;color: #003333&#34;&gt;node1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1180,node2&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1280,node3&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://localhost:1380&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --peer-cert-file=./etcd-node.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --peer-key-file=./etcd-node-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --peer-trusted-ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --peer-client-cert-auth=&amp;#39;&lt;/span&gt;true&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39; \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --ca-file=./ca.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --cert-file=./etcd-proxy.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --key-file=./etcd-proxy-key.pem \&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;     --data-dir=./nodes/proxy&lt;/span&gt;
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;&lt;/span&gt; &amp;gt; start-proxy.sh

chmod +x start-proxy.sh
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once we have the proxy running with these parameters, we can test that the cluster and the proxy is configured correctly. This time, we will be using only the proxy certificate and the proxy end point.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ etcdctl --cert-file&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;./etcd-proxy.pem  --key-file&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;./etcd-proxy-key.pem --ca-file&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;./ca.pem --endpoints&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;https://0.0.0.0:2379 cluster-health
member 5a68dbeefb870ed1 is healthy: got healthy result from https://localhost:1179
member 772c76fe731a3914 is healthy: got healthy result from https://localhost:1379
member aa3bff8d4d84db66 is healthy: got healthy result from https://localhost:1279
cluster is healthy
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This set up gives us a secure etcd cluster with a secure proxy in front of it. Communications between client and proxy, proxy and nodes and among nodes are all secured.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
