<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>story-branching on {code that works}</title>
    <link>https://sadique.io/tags/story-branching/</link>
    <description>Recent content in story-branching on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Apr 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/tags/story-branching/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Finding un-merged commits with git cherry</title>
      <link>https://sadique.io/blog/2012/04/29/finding-un-merged-commits-with-git-cherry/</link>
      <pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/04/29/finding-un-merged-commits-with-git-cherry/</guid>
      <description>&lt;p&gt;In a project that I was a part of in the recent past, we used Story Branching. While it afforded us flexibility in pulling and pushing stories in and out of releases, it has given us some scares in the past. Somebody makes commits against a story, but the commit does not get merged to the correct release branch where it is supposed to go or gets merged to another release. The solution was to hunt down the commits that are missing or have creeped in.&lt;/p&gt;
&lt;p&gt;This is where the &lt;a href=&#34;http://linux.die.net/man/1/git-cherry&#34;&gt;git cherry&lt;/a&gt; command is useful. Git cherry finds commits not merged from a branch to another. From the man page:&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;Every commit that doesn&amp;rsquo;t exist in the upstream branch has its id (sha1) reported, prefixed by a symbol. The ones that have equivalent change already in the upstream branch are prefixed with a minus (-) sign, and those that only exist in the head branch are prefixed with a plus (+) symbol&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
  </channel>
</rss>