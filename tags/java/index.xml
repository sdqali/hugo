<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on {code that works}</title>
    <link>https://sdqali.in/tags/java/</link>
    <description>Recent content in Java on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Jul 2019 18:29:49 -0700</lastBuildDate>
    
	<atom:link href="https://sdqali.in/tags/java/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing environment lifecycles for Dropwizard Commands</title>
      <link>https://sdqali.in/blog/2019/07/28/managing-environment-lifecycles-for-dropwizard-commands/</link>
      <pubDate>Sun, 28 Jul 2019 18:29:49 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2019/07/28/managing-environment-lifecycles-for-dropwizard-commands/</guid>
      <description>&lt;p&gt;If you have built background workers or other non-server applications with Dropwizard, chances are that you used the Dropwizard Command pattern. In fact, even the sever you wrote with Dropwizard executes a command - specifically &lt;code&gt;io.dropwizard.cli.ServerCommand&lt;/code&gt;. While the server command is great, sometimes you want to build applications that have all the goodies that Dropwizard offers, but you dont want to start a server. Managing Lifecycles is one example of a Dropwizard feature that works great for server applications, but needs some tweaking to get working for non-server commands.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Formatting Java Instant for resolutions</title>
      <link>https://sdqali.in/blog/2018/06/09/formatting-java-instant-for-resolutions/</link>
      <pubDate>Sat, 09 Jun 2018 18:55:23 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2018/06/09/formatting-java-instant-for-resolutions/</guid>
      <description>&lt;p&gt;I have had to look up how to format Java&amp;rsquo;s Instant with a given resolution - for example in microseconds or nanoseconds. After fiddling with various formatters, I was happy to finally get this right.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>FreeBuilder plugin for IntelliJ</title>
      <link>https://sdqali.in/blog/2018/05/05/freebuilder-plugin-for-intellij/</link>
      <pubDate>Sat, 05 May 2018 05:27:35 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2018/05/05/freebuilder-plugin-for-intellij/</guid>
      <description>&lt;p&gt;My work uses &lt;a href=&#34;http://freebuilder.inferred.org/&#34;&gt;FreeBuilder&lt;/a&gt; extensively to generate the &lt;a href=&#34;https://en.wikipedia.org/wiki/Builder_pattern&#34;&gt;Builder&lt;/a&gt; pattern for Java classes. In addition to this, we use the generated Builder classes to deserialize the data calsses using Jackson. After a while it became tiresome to type &lt;code&gt;@FreeBuilder&lt;/code&gt; and &lt;code&gt;class Builder extends ...&lt;/code&gt; everywhere. So I decided to write and IntelliJ IDEA plugin that does it for me.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A Jackson and FreeBuilder quirk</title>
      <link>https://sdqali.in/blog/2018/03/23/a-jackson-and-freebuilder-quirk/</link>
      <pubDate>Fri, 23 Mar 2018 05:21:42 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2018/03/23/a-jackson-and-freebuilder-quirk/</guid>
      <description>&lt;p&gt;Jackson is a great tool to have in your tool set if you deal with JSON or XML. It facilitates easy serialization and de-serialization to and from Java classes with a convenient annotation based interface. With the same set of annotations, we can achieve both XML and JSON serialization and de-serialization. With Jackson&amp;rsquo;s &lt;code&gt;data-format-xml&lt;/code&gt; it is even possible to give the same Class a different JSON and XML representation.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Uploading a standalone artifact to Nexus 3</title>
      <link>https://sdqali.in/blog/2017/08/18/uploading-a-standalone-artifact-to-nexus-3/</link>
      <pubDate>Fri, 18 Aug 2017 04:00:43 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2017/08/18/uploading-a-standalone-artifact-to-nexus-3/</guid>
      <description>This is one of those &amp;ldquo;I had to figure out how to do this today, so the next time I google this, I have a place to look&amp;rdquo; blog posts. Today, I had to upload a zip file as a build artifact to our Nexus 3 repository. The zip file had been generated by custom shell scripts that did not have a Maven, Ivy or Gradle projects to wrap them.</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 4</title>
      <link>https://sdqali.in/blog/2016/11/30/implementing-feature-toggles-for-a-spring-boot-application-part-4/</link>
      <pubDate>Wed, 30 Nov 2016 05:50:42 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/30/implementing-feature-toggles-for-a-spring-boot-application-part-4/</guid>
      <description>&lt;p&gt;In the fourth part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing &lt;a href=&#34;https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application-part-1/&#34;&gt;feature toggles&lt;/a&gt; for a Spring Boot application, we will take a look at how our implementation so far introduced a dependency on the application being restarted for changes to take place.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 3</title>
      <link>https://sdqali.in/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-3/</link>
      <pubDate>Tue, 29 Nov 2016 05:50:39 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-3/</guid>
      <description>&lt;p&gt;In the third part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will take a look at exposing the state of feature flags as a Spring Boot management end point for monitoring and testing purposes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 2</title>
      <link>https://sdqali.in/blog/2016/11/27/implementing-feature-toggles-for-a-spring-boot-application-part-2/</link>
      <pubDate>Sun, 27 Nov 2016 05:48:48 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/27/implementing-feature-toggles-for-a-spring-boot-application-part-2/</guid>
      <description>&lt;p&gt;In the second part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will look at exposing the features to the Angular front-end so that features can be toggled in UI components.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 1</title>
      <link>https://sdqali.in/blog/2016/11/22/implementing-feature-toggles-for-a-spring-boot-application-part-1/</link>
      <pubDate>Tue, 22 Nov 2016 01:03:03 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/22/implementing-feature-toggles-for-a-spring-boot-application-part-1/</guid>
      <description>&lt;p&gt;In one of our recent projects at work, we implemented feature toggles for a Spring MVC / Angular JS code base and this &lt;a href=&#34;https://sdqali.in/series/feature-toggles&#34;&gt;series of blog posts&lt;/a&gt; discusses our motivations and requirements, the approach we took and what we learned from it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A very basic introduction to deploying a Java application using Kubernetes</title>
      <link>https://sdqali.in/blog/2016/11/05/a-very-basic-introduction-to-deploying-a-java-application-using-kubernetes/</link>
      <pubDate>Sat, 05 Nov 2016 05:34:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/05/a-very-basic-introduction-to-deploying-a-java-application-using-kubernetes/</guid>
      <description>I have been playing around with Kubernetes and Docker lately. To borrow the description of Kubernetes from their website,
 &amp;ldquo;Kubernetes is an open-source system for automating deployment, scaling, and management of containerized applications.&amp;rdquo;
 One of the first things I did was to try and see what it would take to go from an application to deploying it. I started with a simple Java application and had to set up the development environment.</description>
    </item>
    
    <item>
      <title>Handling Deserialization errors in Spring Redis Sessions</title>
      <link>https://sdqali.in/blog/2016/11/02/handling-deserialization-errors-in-spring-redis-sessions/</link>
      <pubDate>Wed, 02 Nov 2016 20:10:33 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/02/handling-deserialization-errors-in-spring-redis-sessions/</guid>
      <description>&lt;p&gt;One of the challenges of using storing spring sessions in Redis is that the objects that gets stored as part of a session often undergoes changes as the application evolves and these changes cause de-serialization exceptions to be thrown after a deployment when a session created before the deployment is presented to the application. This blog post discusses a method to work around this issue.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Controlling Redis auto-configuration for Spring Boot Session</title>
      <link>https://sdqali.in/blog/2016/07/16/controlling-redis-auto-configuration-for-spring-boot-session/</link>
      <pubDate>Sat, 16 Jul 2016 22:42:05 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/16/controlling-redis-auto-configuration-for-spring-boot-session/</guid>
      <description>&lt;p&gt;If you have been using Spring Boot, chances are that you are using the Spring Session library to handle sessions. Spring Session has the ability to persist the sessions to various data stores, including Redis. The default behaviors of Spring Boot when combined with Spring Session is to start using Redis as the session store the moment &lt;code&gt;spring-session-data-redis&lt;/code&gt; is detected in the class path, thereby making it hard to conditionally turn Redis support ON and OFF. This blog post explores why this is the default behavior and presents a solution to control this behavior.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 5</title>
      <link>https://sdqali.in/blog/2016/07/14/jwt-authentication-with-spring-web-part-5/</link>
      <pubDate>Thu, 14 Jul 2016 06:05:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/14/jwt-authentication-with-spring-web-part-5/</guid>
      <description>&lt;p&gt;In parts 1 through 4 of this series, we built a Spring API that can issue a JWT when a user successfully authenticates and verify the JWT presented by the client for subsequent requests. In this blog post - the last in the series, we will build a simple Angular JS application with authentication that uses this API as the backend.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 4</title>
      <link>https://sdqali.in/blog/2016/07/08/jwt-authentication-with-spring-web-part-4/</link>
      <pubDate>Fri, 08 Jul 2016 06:47:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/08/jwt-authentication-with-spring-web-part-4/</guid>
      <description>&lt;p&gt;In parts 1 through 3 of this series, we built a Spring API that can issue a JWT when a user successfully authenticates. In this blog post, we will add the capability to verify the JWT presented by the client for subsequent requests.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 3</title>
      <link>https://sdqali.in/blog/2016/07/06/jwt-authentication-with-spring-web-part-3/</link>
      <pubDate>Wed, 06 Jul 2016 05:30:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/06/jwt-authentication-with-spring-web-part-3/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-2/&#34;&gt;previous blog post&lt;/a&gt;, we built the Spring API that responds with Profile information. Continuing on the path to building authentication with JWT, in this blog post, we will create a login mechanism that issues a JWT when the user presents the correct credentials.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 2</title>
      <link>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-2/</link>
      <pubDate>Sun, 03 Jul 2016 16:22:53 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-2/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web-part-1/&#34;&gt;previous blog post&lt;/a&gt; in this series, we looked at the basics of JWT. We will move on to building the Spring API that we will use JWT for authentication in this blog post.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 1</title>
      <link>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-1/</link>
      <pubDate>Sun, 03 Jul 2016 01:42:04 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web-part-1/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;jwt authentication example&#34; name=&#34;keywords&#34;&gt;
JSON Web Tokens (JWTs) are signed tokens issued by a server that it can use to verify a claim made by a client. This blog post is the first in a series where I implement authentication based on JWT in a Spring Web application with an Angular JS front end.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>JSON logging for Spring applications</title>
      <link>https://sdqali.in/blog/2016/06/30/json-logging-for-spring-applications/</link>
      <pubDate>Thu, 30 Jun 2016 23:43:07 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/06/30/json-logging-for-spring-applications/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;logstash spring boot example&#34; name=&#34;keywords&#34;&gt;
If you have an application that writes logs, there are many reasons to make it write the log in JSON format. It makes it easier to search and analyze them when using tools such as the ELK Stack &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. JSON formatted logs make it easier to look at them when looking at how the app is behaving in real time using tools like jq &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. This blog post documents how to format logs as JSON in a Spring application.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Injecting dependencies into a Spring @Configuration</title>
      <link>https://sdqali.in/blog/2016/06/29/injecting-dependencies-into-a-spring-configuration/</link>
      <pubDate>Wed, 29 Jun 2016 03:17:51 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/06/29/injecting-dependencies-into-a-spring-configuration/</guid>
      <description>&lt;p&gt;This is one of those blog posts about things I wish I had known before I spent a lot of time figuring out when something was not working as expected. Recently, we have been trying to extend a &lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt; to wire up an HTTP request interceptor. And things did not work as we expected it to and we learned that our understanding of how Spring behaved under this situation was wrong. This is a write up to refer back to if and when we encounter this issue again.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Filtering responses in Spring MVC</title>
      <link>https://sdqali.in/blog/2016/06/08/filtering-responses-in-spring-mvc/</link>
      <pubDate>Wed, 08 Jun 2016 17:23:16 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/06/08/filtering-responses-in-spring-mvc/</guid>
      <description>&lt;p&gt;Yesterday my colleague &lt;a href=&#34;https://twitter.com/imdhmd&#34;&gt;Imdad&lt;/a&gt; asked if there was a mechanism to add filtering to a Spring MVC end point that responded with JSON. We both started looking at it and this blog post explores a way to do it, albeit for a specific type of responses that was relevant to our discussions.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Deprecating domain events in Axon</title>
      <link>https://sdqali.in/blog/2016/04/24/deprecating-domain-events-in-axon/</link>
      <pubDate>Sun, 24 Apr 2016 23:35:43 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/04/24/deprecating-domain-events-in-axon/</guid>
      <description>&lt;p&gt;Recently at work, we had to deprecate a domain event. This event used to represent an error scenario. However, the business had since decided that this is no longer a valid error scenario. Removing the Java class is not straight forward - since there are events of this type stored in the event store, every time the aggregate associated with this event is loaded, Axon will throw errors trying to de-serialize them.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programmable exit codes for spring command line applications - 2</title>
      <link>https://sdqali.in/blog/2016/04/20/programmable-exit-codes-for-spring-command-line-applications-2/</link>
      <pubDate>Wed, 20 Apr 2016 02:29:12 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/04/20/programmable-exit-codes-for-spring-command-line-applications-2/</guid>
      <description>&lt;p&gt;In the last &lt;a href=&#34;https://sdqali.in/blog/2016/04/17/programmable-exit-codes-for-spring-command-line-applications/&#34;&gt;blog post&lt;/a&gt;, we took a look at how to implement programmable exit codes for spring command line applications by using exceptions that implement &lt;code&gt;ExitCodeGenerator&lt;/code&gt;. This time, we will take a look at how to achieve the same without having to depend on an exception.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Programmable exit codes for Spring command line applications</title>
      <link>https://sdqali.in/blog/2016/04/18/programmable-exit-codes-for-spring-command-line-applications/</link>
      <pubDate>Mon, 18 Apr 2016 03:36:48 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/04/18/programmable-exit-codes-for-spring-command-line-applications/</guid>
      <description>&lt;p&gt;Spring&amp;rsquo;s &lt;code&gt;CommandLineRunner&lt;/code&gt; provides a great mechanism to build command line applications. While this convenience is great, applications that use &lt;code&gt;CommandLineRunner&lt;/code&gt; require extra effort in some areas like integration testing. Exit codes are such an area - applications that use command line runners always report their exit code as &lt;code&gt;0&lt;/code&gt; even if there are exceptions thrown. This blog post explains a way to get to programmable exit codes for such applications.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Using custom arguments in Spring MVC controllers</title>
      <link>https://sdqali.in/blog/2016/01/30/using-custom-arguments-in-spring-mvc-controllers/</link>
      <pubDate>Sat, 30 Jan 2016 01:41:49 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/01/30/using-custom-arguments-in-spring-mvc-controllers/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;spring, arguments, handlermethodargumentresolver, spring mvc, spring boot&#34; name=&#34;keywords&#34;&gt;
Most of the Spring controllers in the real world accept a lot of different types of parameters - Path variables, URL parameters, request headers, request body and sometimes even the entire HTTP Request object. This provides a flexible mechanism to create APIs. Spring is really good at parsing these parameters in to Java types as long as there is an ObjectMapper (like Jackson) configured to take care of the de-serialization.&lt;/p&gt;

&lt;p&gt;However, there are situations where you want methods to receive a parameter of a particular type that has to resolved from a set of parameters–for example, an API can expect consumers to send meta data about a request in the form of headers and need a custom type to hold this information. Spring provides a convenient way to provide such custom arguments. This blog post explores this feature and how to implement it and test it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Authentication for Apache Camel HTTP components</title>
      <link>https://sdqali.in/blog/2015/12/16/authentication-for-apache-camel-http-components/</link>
      <pubDate>Wed, 16 Dec 2015 06:07:01 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/12/16/authentication-for-apache-camel-http-components/</guid>
      <description>&lt;p&gt;My team at work has been lately working on a data transformer that pushes information from an external system in to platform. For historical reasons the information is passed to us in the form of flat files. We have been working on a data transformer that reads information from the file and posts it into an HTTP end point.
Apache Camel &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; makes a natural choice as the base for implementing such a data transformer. The presence of ready to use components that can read files and post information to HTTP end points and the availability of a nice D.S.L. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; makes implementation easy and straightforward. One of the things we had to spend time figuring out was how to ensure that we authenticate correctly against our target HTTP end point. This blog post takes a look at various methods we explored.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Integration testing Spring command line applications</title>
      <link>https://sdqali.in/blog/2015/12/11/integration-testing-spring-command-line-applications/</link>
      <pubDate>Fri, 11 Dec 2015 20:57:30 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/12/11/integration-testing-spring-command-line-applications/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;https://sdqali.in/blog/2015/12/10/integration-testing-challenges-for-non-web-spring-applications/&#34;&gt;last blog post&lt;/a&gt;, I wrote about the challenges of writing an integration test for a Spring command line application. One of the solutions for this issue discussed in the blog post was to use the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotations to inject Java system properties and use that to run the application instead of the normal command line arguments. This blog post describes how to perform this.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Integration testing challenges for non-web Spring applications</title>
      <link>https://sdqali.in/blog/2015/12/11/integration-testing-challenges-for-non-web-spring-applications/</link>
      <pubDate>Fri, 11 Dec 2015 02:45:59 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/12/11/integration-testing-challenges-for-non-web-spring-applications/</guid>
      <description>&lt;p&gt;We are building a command line data loader application at work that uses Spring. One of the things that I took us more time that it should have to figure out was how to write an integration test that invokes the command line application with the right command line arguments. This blog post describes this scenario and a potential solution to this problem.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing custom annotations for Spring MVC</title>
      <link>https://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/</link>
      <pubDate>Sun, 06 Dec 2015 21:28:26 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;spring, annotation, custom annotation, spring mvc, spring boot&#34; name=&#34;keywords&#34;&gt;
I often have to work with Spring MVC based code bases that have been living for a while. One of the common trait of these code bases I have observed is the repeated use of the same Spring annotations to achieve the same effect again and again. A really good example of this is annotating a controller method with a combination of &lt;code&gt;@RequestMapping&lt;/code&gt; and &lt;code&gt;@ResponseStatus&lt;/code&gt; to set the expected request and response &lt;code&gt;Content-Type&lt;/code&gt;, the request Method, response status etc. This blog post describes how to create custom Spring annotationshow to create custom annotation in spring mvc that produce the same effect as multiple Spring annotations acting together.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Validating RequestParams and PathVariables in Spring MVC</title>
      <link>https://sdqali.in/blog/2015/12/05/validating-requestparams-and-pathvariables-in-spring-mvc/</link>
      <pubDate>Sat, 05 Dec 2015 06:50:24 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/12/05/validating-requestparams-and-pathvariables-in-spring-mvc/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;spring, validate, request, parameters, @requestparam, spring mvc, param, validation&#34; name=&#34;keywords&#34;&gt;
Spring MVC provides a convenient way to validate inputs to API end points through the use of &lt;code&gt;JSR-303&lt;/code&gt; annotations. While this mechanism works great for end points that consume a &lt;code&gt;RequestBody&lt;/code&gt; (as is the case with most &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests), it is not easy to achieve the same effect for end points that consume primitives in the form of path variables or request parameters (as is the case with most &lt;code&gt;GET&lt;/code&gt; requests).&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Testing async responses using MockMvc</title>
      <link>https://sdqali.in/blog/2015/11/24/testing-async-responses-using-mockmvc/</link>
      <pubDate>Tue, 24 Nov 2015 10:45:06 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/11/24/testing-async-responses-using-mockmvc/</guid>
      <description>&lt;p&gt;There are times when a Spring MVC end point performs asynchronous operations. Testing these end points using MockMvc can be tricky because of the asynchronous nature in which the result of the operation is eventually returned. This blog post describes how to write tests in such scenarios.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Running multiple applications in the same Tomcat installation</title>
      <link>https://sdqali.in/blog/2015/06/09/running-multiple-applications-in-the-same-tomcat-installation/</link>
      <pubDate>Tue, 09 Jun 2015 05:11:05 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2015/06/09/running-multiple-applications-in-the-same-tomcat-installation/</guid>
      <description>&lt;p&gt;This blog post describes how to set up Tomcat to run multiple applications running as separate JVM processes, using the same Tomcat installation. This method utilizes the &lt;code&gt;CATALINA_HOME&lt;/code&gt; and &lt;code&gt;CATALINA_BASE&lt;/code&gt; environment variables used by Tomcat. I have verified this method against Tomcat versions &lt;code&gt;8.0.x&lt;/code&gt;; other versions should work the same way.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>A simple JMeter test with login</title>
      <link>https://sdqali.in/blog/2014/02/17/a-simple-jmeter-test-with-login/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2014/02/17/a-simple-jmeter-test-with-login/</guid>
      <description>I had to set up a JMeter test last week - the test included logging in to a site, and then hitting a bunch of URLs, all of them being GET requests. I found it hard to find a simple documentation that described how to do this - the ones I found were either incomplete or were trying to teach me a large number of things at the same time.</description>
    </item>
    
    <item>
      <title>Java Arrays in JRuby</title>
      <link>https://sdqali.in/blog/2010/03/16/java-arrays-in-jruby/</link>
      <pubDate>Tue, 16 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2010/03/16/java-arrays-in-jruby/</guid>
      <description>Recently my team encountered a frustrating thing while working with a Java library in JRuby. It took us long to figure out what was going wrong. This is an attempt to write down what was happening.
You are in Ruby world, a world of weak typing, no type casting and pure bliss in coding. You forget that some languages care about the type of elements in an Array. And you end up spending a lot of time figuring out why you are staring at a stupid looking exception.</description>
    </item>
    
  </channel>
</rss>