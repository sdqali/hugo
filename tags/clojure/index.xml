<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>clojure on {code that works}</title>
    <link>https://sadique.io/tags/clojure/</link>
    <description>Recent content in clojure on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Mar 2014 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/tags/clojure/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Clojure Dojo - Levenshtein edit distance</title>
      <link>https://sadique.io/blog/2014/03/20/clojure-dojo-levenshtein-edit-distance/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2014/03/20/clojure-dojo-levenshtein-edit-distance/</guid>
      <description>I have been playing around with Clojure and after familiarising myself with the core, I decided to start writing little programs that forces me to choose the right idioms. I am starting off with Levenshtein edit distance of two strings.
Levenshtein edit distance Levenshtein edit distance between two string is a way of quantifying how similar or dissimilar they are, lower distance implying higher similarity. The algorithm to calculate Levenshtein distance is fairly simple - the algorithm cares about three operations that can be performed at a particular position in a string to move it towards the other - insertion, deletion and substitution.</description>
    </item>
    
  </channel>
</rss>