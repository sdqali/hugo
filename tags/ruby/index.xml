<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>ruby on {code that works}</title>
    <link>https://sadique.io/tags/ruby/</link>
    <description>Recent content in ruby on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 22 Mar 2018 02:44:03 +0000</lastBuildDate>
    
	<atom:link href="https://sadique.io/tags/ruby/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Net::HTTP and the simplest of explanations</title>
      <link>https://sadique.io/blog/2018/03/22/nethttp-and-the-simplest-of-explanations/</link>
      <pubDate>Thu, 22 Mar 2018 02:44:03 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2018/03/22/nethttp-and-the-simplest-of-explanations/</guid>
      <description>This blog post exists purely to remind myself that Ruby&amp;rsquo;s Net::HTTP expects a host and a port as parameters when creating a new connection and not a url string.
This is a story about how many layers of abstractions and indirections one works through on a daily basis as a developer and the effort required to dive through these layers, all the while ignoring the simplest of explanations of why things may have gone wrong in the first place.</description>
    </item>
    
    <item>
      <title>Importing the Yelp dataset into MongoDB</title>
      <link>https://sadique.io/blog/2014/08/02/importing-the-yelp-dataset-into-mongodb/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2014/08/02/importing-the-yelp-dataset-into-mongodb/</guid>
      <description>Today Yelp announced their dataset challenge 1. The dataset they released includes data from 5 cities (Phoenix, Las Vegas, Madison, Waterloo and Edinburgh) and consists of
 42,153 businesses 320,002 business attributes 31,617 check-in sets 252,898 users 955,999 edge social graph 403,210 tips 1,125,458 reviews  The data is available for public consumption, although Yelp owns any derivative dataset you create from the original 2.
The data is available as files with each line representing a JSON object.</description>
    </item>
    
    <item>
      <title>Implementing Rate Limiting in Rails - Part 2</title>
      <link>https://sadique.io/blog/2013/10/13/implementing-rate-limiting-in-rails-part-2/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/10/13/implementing-rate-limiting-in-rails-part-2/</guid>
      <description>The first part of this series can be found here.
The first part of this series looked at how to implement basic rate limiting in a Rails application. However, as pointed out in the improvements section, the implementation was not complete - it did not provide clients enough information about the rate limiting that is in place and how long they should wait before making further requests once they hit the limit.</description>
    </item>
    
    <item>
      <title>Implementing Rate Limiting in Rails - Part 1</title>
      <link>https://sadique.io/blog/2013/10/12/implementing-rate-limiting-in-rails-part-1/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/10/12/implementing-rate-limiting-in-rails-part-1/</guid>
      <description>The second part of this series can be found here.
Rate limiting or throttling is the practice of limiting how frequently legitimate users of a web service can access the service. Rate limiting is often put in place to prevent the hogging of resources by a sub set of the users of the system. Rate limiting works by responding with error messages when a client exceeds their allocated share of requests within a predefined time window.</description>
    </item>
    
    <item>
      <title>Ruby, Named Capture Groups and Local Variables</title>
      <link>https://sadique.io/blog/2013/10/01/ruby-named-capture-groups-and-local-variables/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/10/01/ruby-named-capture-groups-and-local-variables/</guid>
      <description>Ruby&amp;rsquo;s regular expressions support named capture groups, since 1.9. However, there is a weird behaviour while using named capture groups with the Regexp#=~ method. When named capture groups are used with =~, the captured values are placed in local variables with the same name as the capture group. The following example demonstrates this:
#!/usr/bin/env ruby month = &amp;#34;January&amp;#34; test_string = &amp;#34;Today&amp;#39;s date is: 9/28/2013.&amp;#34; /(?&amp;lt;month&amp;gt;\d{1,2})\/(?&amp;lt;day&amp;gt;\d{1,2})\/(?&amp;lt;year&amp;gt;\d{4})/ =~ test_string puts month.inspect This when executed will print 9.</description>
    </item>
    
    <item>
      <title>Named Capture Groups in Regular Expressions</title>
      <link>https://sadique.io/blog/2013/09/29/named-capture-groups-in-regular-expressions/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/09/29/named-capture-groups-in-regular-expressions/</guid>
      <description>I will admit that I find regular expressions somewhat hard to parse. While the thinking process needed to write a regular expression is iterative and hence results in the correct expression suitable for the situation, once it is written it lacks readability. I have faced that pain of trying to grok a complex regular expression written years ago. So I was pleasantly surprised when I saw this example from Hacker News user WestCoastJustin.</description>
    </item>
    
    <item>
      <title>Managing Gemsets in Rbenv</title>
      <link>https://sadique.io/blog/2013/09/12/managing-gemsets-in-rbenv/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/09/12/managing-gemsets-in-rbenv/</guid>
      <description>&lt;p&gt;When I was setting up my new laptop today, I decided to use Rbenv &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to manage my Ruby versions. I have typically used RVM &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and had never used Rbenv. Rbenv is a Ruby version manager written by &lt;a href=&#34;https://github.com/sstephenson/&#34;&gt;Sam Stephenson&lt;/a&gt; and deliberately tries to do less and do it well. Instead of overriding Bash commands like RVM does, Rbenv chooses to use wrappers or &lt;strong&gt;shims&lt;/strong&gt; around Ruby binaries to choose the Ruby executable to run.&lt;/p&gt;

&lt;p&gt;This works well, until you have to manage Gemsets &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Often, one is working on two projects that use the same version of Ruby, but has entirely different chain of dependency on Gems. RVM&amp;rsquo;s gemsets work really well for this use case. I was looking around to see how one would manage gemsets with Rbenv. There are three ways to do it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Looking up Compiler params used to compile a Ruby version</title>
      <link>https://sadique.io/blog/2013/09/08/looking-up-compiler-params-used-to-compile-a-ruby-version/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2013/09/08/looking-up-compiler-params-used-to-compile-a-ruby-version/</guid>
      <description>Today Kashyap asked how one can identify the compiler parameters passed when compiling a Ruby version. I was curious how to achieve this and like any confused developer started searching for and looking in the Ruby documentation. Searching for compiler parameters in ruby did not yield any interesting results and the group of constants with the RUBY_ prefix 1 loaded in Ruby did not include anything related to compiler flags. Then I came across this blog post 2 by Jan Lelis and I was curious what else RbConfig::CONFIG contains.</description>
    </item>
    
    <item>
      <title>Heredocs in Ruby and Python</title>
      <link>https://sadique.io/blog/2012/07/04/heredocs-in-ruby-and-python/</link>
      <pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/07/04/heredocs-in-ruby-and-python/</guid>
      <description>&lt;p&gt;I have been doing some coding in Python recently. While playing around with some code, I noticed that the way &lt;a href=&#34;http://en.wikipedia.org/wiki/Here_document&#34;&gt;heredocs&lt;/a&gt; are used in Python is different from Ruby.&lt;/p&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;Consider the following snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# test.py&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;some text in single line&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;As opposed to
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;some text
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;written as
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;heredoc
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and then another single line&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run, this would result in this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bash-3.2$ python test.py
some text in single line

As opposed to
some text
written as
heredoc

and &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;then&lt;/span&gt; another single line&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how there is a preceding and trailing linebreak around the string printed using heredoc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Know Your Tools - Don&#39;t Shoot Yourself in the Foot</title>
      <link>https://sadique.io/blog/2012/06/06/know-your-tools-dont-shoot-yourself-in-the-foot/</link>
      <pubDate>Wed, 06 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2012/06/06/know-your-tools-dont-shoot-yourself-in-the-foot/</guid>
      <description>&lt;p&gt;Imagine this - Your build is taking forever. You put in a lot of effort and restructure it. Things improve a lot, but it is far from where you would like it to be. You try hard to identify things that could improve the build time, but fail. You blame the platforms you use, you blame Ruby and you even blame the relative position of the Moon to Venus. Slowly you learn to accept the slow build as a part of your life. Months later a new developer joins the team and proves that there is a bug in the build scripts that causes certain tasks to be run twice.&lt;/p&gt;

&lt;p&gt;This happened to us recently, and the subsequent debugging/postmortem revealed that there were things about our tools that we simply did not know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Wikipedia Page Hopping</title>
      <link>https://sadique.io/blog/2011/05/17/wikipedia-page-hopping/</link>
      <pubDate>Tue, 17 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2011/05/17/wikipedia-page-hopping/</guid>
      <description>I have realized that like most users of Wikipedia, I do a lot of Wikipedia page-hopping [1]. Wikipedia is sort of addictive that way. You start reading about a piece of Flamenco music and after twenty minutes find yourself staring at the page about ETA, a Basque nationalist organization. So I decided to figure out how I exactly do I get lost in the huge list of interconnected articles. I use Chromium, and it stores its history in a SQLite3 database file.</description>
    </item>
    
    <item>
      <title>Empathy Log Parser</title>
      <link>https://sadique.io/blog/2011/03/24/empathy-log-parser/</link>
      <pubDate>Thu, 24 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2011/03/24/empathy-log-parser/</guid>
      <description>I use Empathy as my preferred IM application. Today, I wanted to have a look at an IM conversation I had with someone. I pulled out the Empathy log corresponding to that conversation, and boom - it is in XML.
Just another excuse to write code. So I came up with the following. It was easy to write and it does not do much - It uses the Hpricot gem to parse the XML and prints the name of the people involved in the chat and their messages in a human readable form.</description>
    </item>
    
    <item>
      <title>Binary Signature Art</title>
      <link>https://sadique.io/blog/2011/03/23/binary-signature-art/</link>
      <pubDate>Wed, 23 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2011/03/23/binary-signature-art/</guid>
      <description>I was reading this very interesting thread on the xkcd forum when I noticed a post from a user with the following signature in binary:
01001101 01100001 01100100 01100101 00100000 01011001 01101111 01110101 00100000 01001100 01101111 01101111 01101011 00100001&amp;#34; At first, that did not particularly entice me, mostly because the topic being discussed was really interesting, but it did come back to my focus when I saw that another user had quoted the signature, along with the comment Yeah, you know it.</description>
    </item>
    
    <item>
      <title>Java Arrays in JRuby</title>
      <link>https://sadique.io/blog/2010/03/16/java-arrays-in-jruby/</link>
      <pubDate>Tue, 16 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sadique.io/blog/2010/03/16/java-arrays-in-jruby/</guid>
      <description>Recently my team encountered a frustrating thing while working with a Java library in JRuby. It took us long to figure out what was going wrong. This is an attempt to write down what was happening.
You are in Ruby world, a world of weak typing, no type casting and pure bliss in coding. You forget that some languages care about the type of elements in an Array. And you end up spending a lot of time figuring out why you are staring at a stupid looking exception.</description>
    </item>
    
  </channel>
</rss>