<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Dropwizard on {code that works}</title>
    <link>https://sdqali.in/tags/dropwizard/</link>
    <description>Recent content in Dropwizard on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 28 Jul 2019 18:29:49 -0700</lastBuildDate>
    
	<atom:link href="https://sdqali.in/tags/dropwizard/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Managing environment lifecycles for Dropwizard Commands</title>
      <link>https://sdqali.in/blog/2019/07/28/managing-environment-lifecycles-for-dropwizard-commands/</link>
      <pubDate>Sun, 28 Jul 2019 18:29:49 -0700</pubDate>
      
      <guid>https://sdqali.in/blog/2019/07/28/managing-environment-lifecycles-for-dropwizard-commands/</guid>
      <description>&lt;p&gt;If you have built background workers or other non-server applications with Dropwizard, chances are that you used the Dropwizard Command pattern. In fact, even the sever you wrote with Dropwizard executes a command - specifically &lt;code&gt;io.dropwizard.cli.ServerCommand&lt;/code&gt;. While the server command is great, sometimes you want to build applications that have all the goodies that Dropwizard offers, but you dont want to start a server. Managing Lifecycles is one example of a Dropwizard feature that works great for server applications, but needs some tweaking to get working for non-server commands.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>