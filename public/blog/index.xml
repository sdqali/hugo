<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Blogs on Sadique Ali</title>
    <link>http://sdqali.in/blog/</link>
    <description>Recent content in Blogs on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 05 Jul 2016 22:30:53 -0700</lastBuildDate>
    <atom:link href="http://sdqali.in/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JWT authentication with Spring Web - Part 3</title>
      <link>http://sdqali.in/blog/2016/07/05/jwt-authentication-with-spring-web---part-3/</link>
      <pubDate>Tue, 05 Jul 2016 22:30:53 -0700</pubDate>
      
      <guid>http://sdqali.in/blog/2016/07/05/jwt-authentication-with-spring-web---part-3/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web---part-2/&#34;&gt;previous blog post&lt;/a&gt;, we built the Spring API that responds with Profile information. Continuing on the path to building authentication with JWT, in this blog post, we will create a login mechanism that issues a JWT when the user presents the correct credentials.&lt;/p&gt;

&lt;p&gt;Our fist step is to configure Spring Security to allow access to the login end point we will be building. This can be done as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;SecurityConfig&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; WebSecurityConfigurerAdapter &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HttpSecurity http&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        http&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;csrf&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;ignoringAntMatchers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;

        http&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;authorizeRequests&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;antMatchers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;permitAll&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;antMatchers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/**/*&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;denyAll&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We are turning off authentication and CSRF token checking for the &lt;code&gt;/login&lt;/code&gt; end point.&lt;/p&gt;

&lt;p&gt;Next, we build a &lt;code&gt;LoginController&lt;/code&gt; to issue tokens up on a user presenting valid credentials:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/login&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;LoginController&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; LoginService loginService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; JwtService jwtService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;unused&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;LoginController&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;LoginController&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;LoginService loginService&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; JwtService jwtService&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;loginService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; loginService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;jwtService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; jwtService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            method &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; POST&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            produces &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; APPLICATION_JSON_VALUE&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; MinimalProfile &lt;span style=&#34;color: #CC00FF&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RequestBody&lt;/span&gt; LoginCredentials credentials&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                                HttpServletResponse response&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; loginService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;credentials&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;minimalProfile &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
                    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
                        response&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Token&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; jwtService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;tokenFor&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;minimalProfile&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
                    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;catch&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Exception e&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
                        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;e&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
                    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
                    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; minimalProfile&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;})&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;orElseThrow&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; FailedToLoginException&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;credentials&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We use the login service to verify the credentials and it returns an &lt;code&gt;Optional&amp;lt;MinimalProfile&amp;gt;&lt;/code&gt;. If there is a valid &lt;code&gt;MinimalProfile&lt;/code&gt;, we ask the &lt;code&gt;JwtService&lt;/code&gt; to issue a token.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;LoginService&lt;/code&gt; uses the &lt;code&gt;ProfileService&lt;/code&gt; to load a profile matching the user name and the password presented by the user.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;LoginService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; ProfileService profileService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;unused&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;LoginService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;LoginService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ProfileService profileService&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;profileService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profileService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Optional&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;MinimalProfile&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;login&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;LoginCredentials credentials&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; profileService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;credentials&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getLogin&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getPassword&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;credentials&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getPassword&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; MinimalProfile&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Please note that in real applications, you never want to do this. You should be comparing the hashed version of the password presented by the user with the hashed version of the password stored in the database.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;JwtService&lt;/code&gt; creates a token using the profile information and an expiration date of 2 hours with the &lt;code&gt;HMASHA256&lt;/code&gt; algorithm. It uses the key provided by &lt;code&gt;SecretKeyProvider&lt;/code&gt;. For creating the JWT token, we use the excellent jjwt &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; library we introduced in &lt;a href=&#34;http://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web---part-1/&#34;&gt;part 1&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;JwtService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String ISSUER &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;in.sdqali.jwt&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; SecretKeyProvider secretKeyProvider&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;unused&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;JwtService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;JwtService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SecretKeyProvider secretKeyProvider&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;secretKeyProvider&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; secretKeyProvider&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #CC00FF&#34;&gt;tokenFor&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MinimalProfile minimalProfile&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; IOException&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; URISyntaxException &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; secretKey &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; secretKeyProvider&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        Date expiration &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Date&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;from&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;LocalDateTime&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;now&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;plusHours&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toInstant&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;UTC&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Jwts&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;builder&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setSubject&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;minimalProfile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setExpiration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;expiration&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setIssuer&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ISSUER&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;signWith&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SignatureAlgorithm&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;HS512&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; secretKey&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;compact&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;SecretKeyProvider&lt;/code&gt; in this example will simply load the secret key from a file, where it is stored in plain text. In a real application, you may store and encrypted version of it and decrypt it when required.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;SecretKeyProvider&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;byte&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;getKey&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; URISyntaxException&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; IOException &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Files&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;readAllBytes&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Paths&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getResource&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/jwt.key&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toURI&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this code, a client can authenticate and receive a JWT. When request is made with correct username and password:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -v -X POST &amp;quot;http://localhost:8080/login&amp;quot; -d &#39;{&amp;quot;username&amp;quot;:&amp;quot;greenrabbit948&amp;quot;, &amp;quot;password&amp;quot;:&amp;quot;celeste&amp;quot;}&#39; --header &amp;quot;Content-Type: application/json&amp;quot;   | jq .
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
  0     0    0     0    0     0      0      0 --:--:-- --:--:-- --:--:--     0*   Trying ::1...
* Connected to localhost (::1) port 8080 (#0)
&amp;gt; POST /login HTTP/1.1
&amp;gt; Host: localhost:8080
&amp;gt; User-Agent: curl/7.43.0
&amp;gt; Accept: */*
&amp;gt; Content-Type: application/json
&amp;gt; Content-Length: 51
&amp;gt;
} [51 bytes data]
* upload completely sent off: 51 out of 51 bytes
&amp;lt; HTTP/1.1 200 OK
&amp;lt; Server: Apache-Coyote/1.1
&amp;lt; X-Content-Type-Options: nosniff
&amp;lt; X-XSS-Protection: 1; mode=block
&amp;lt; Cache-Control: no-cache, no-store, max-age=0, must-revalidate
&amp;lt; Pragma: no-cache
&amp;lt; Expires: 0
&amp;lt; X-Frame-Options: DENY
&amp;lt; Token: eyJhbGciOiJIUzUxMiJ9.eyJzdWIiOiJqd3QtZGVtbyIsImV4cCI6MTQ2Nzc2Njk3MSwiaXNzIjoiaW4uc2RxYWxpLmp3dCJ9.eu_OuBIkc4BfcTsTu4t_6TCwyLkH4HcuQzvWIMzNQYdxXiWA77SfvwCe4mdc7C17mXdtBAsvFGDj7A9fzI0M1w
&amp;lt; Content-Type: application/json;charset=UTF-8
&amp;lt; Transfer-Encoding: chunked
&amp;lt; Date: Wed, 06 Jul 2016 06:02:51 GMT
&amp;lt;
{ [164 bytes data]
100   211    0   160  100    51  15071   4804 --:--:-- --:--:-- --:--:-- 16000
* Connection #0 to host localhost left intact
{
  &amp;quot;username&amp;quot;: &amp;quot;greenrabbit948&amp;quot;,
  &amp;quot;name&amp;quot;: {
    &amp;quot;title&amp;quot;: &amp;quot;miss&amp;quot;,
    &amp;quot;first&amp;quot;: &amp;quot;dionaura&amp;quot;,
    &amp;quot;last&amp;quot;: &amp;quot;rodrigues&amp;quot;
  },
  &amp;quot;thumbnail&amp;quot;: &amp;quot;https://randomuser.me/api/portraits/thumb/women/78.jpg&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can see the &lt;code&gt;Token&lt;/code&gt; header has value &lt;code&gt;eyJhbGciOiJIUzUxMiJ9.
eyJzdWIiOiJqd3QtZGVtbyIsImV4cCI6MTQ2Nzc2Njk3MSwiaXNzIjoiaW4uc2RxYWxpLmp3dCJ9.
eu_OuBIkc4BfcTsTu4t_6TCwyLkH4HcuQzvWIMzNQYdxXiWA77SfvwCe4mdc7C17mXdtBAsvFGDj
7A9fzI0M1w&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If we were to present invalid credentials, the API will return a &lt;code&gt;401&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl -i -X POST &amp;quot;http://localhost:8080/login&amp;quot; -d &#39;{&amp;quot;username&amp;quot;:&amp;quot;greenrabbit948&amp;quot;, &amp;quot;password&amp;quot;:&amp;quot;wrongpassword&amp;quot;}&#39; --header &amp;quot;Content-Type: application/json&amp;quot;
HTTP/1.1 401 Unauthorized
Server: Apache-Coyote/1.1
X-Content-Type-Options: nosniff
X-XSS-Protection: 1; mode=block
Cache-Control: no-cache, no-store, max-age=0, must-revalidate
Pragma: no-cache
Expires: 0
X-Frame-Options: DENY
Content-Length: 0
Date: Wed, 06 Jul 2016 06:05:46 GMT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In the next blog post, the fourth is this series, we will move on to verifying the token presented by the client for subsequent requests. The source code for this example for the progress made from part 1 through part3 is available on &lt;a href=&#34;https://github.com/sdqali/jwt-demo/tree/09b02336e4b7c746cb4c134dc020243aef827b66&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;jjwt - Java JWT: JSON Web Token for Java and Android, available on &lt;a href=&#34;https://github.com/jwtk/jjwt&#34;&gt;GitHub&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 2</title>
      <link>http://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web---part-2/</link>
      <pubDate>Sun, 03 Jul 2016 09:22:53 -0700</pubDate>
      
      <guid>http://sdqali.in/blog/2016/07/03/jwt-authentication-with-spring-web---part-2/</guid>
      <description>

&lt;p&gt;In the &lt;a href=&#34;http://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web---part-1/&#34;&gt;previous blog post&lt;/a&gt; in this series, we looked at the basics of JWT. We will move on to building the Spring API that we will use JWT for authentication in this blog post.&lt;/p&gt;

&lt;h2 id=&#34;the-api&#34;&gt;The API&lt;/h2&gt;

&lt;p&gt;The API we will be using in the example gives access to user profiles. It has the following end points:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;GET /profiles/{:username}&lt;/li&gt;
&lt;li&gt;GET /profiles/details/{:username}&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The profiles that we use for this example were generated using the &lt;a href=&#34;https://randomuser.me/&#34;&gt;Random User Generator&lt;/a&gt; and stored in a JSON file, for convenience for this example. In the real world, you never want to store user information in a file. All the code for this example is available on &lt;a href=&#34;https://github.com/sdqali/jwt-demo&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;structure-of-the-user-profile&#34;&gt;Structure of the User Profile&lt;/h2&gt;

&lt;p&gt;For this example, I specifically generated 500 random profiles with only a subset of fields - &lt;code&gt;name&lt;/code&gt;, &lt;code&gt;email&lt;/code&gt;, &lt;code&gt;login&lt;/code&gt; and &lt;code&gt;picture&lt;/code&gt;. With these fields, a profile has the following structure:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;title&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;mr&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;first&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;matt&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;last&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;hahn&amp;quot;&lt;/span&gt;
  },
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;email&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;matt.hahn@example.com&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;login&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;greenostrich307&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;password&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;darkange&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;salt&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;V5xi38lN&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;md5&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;cba0d5fb77ae3e0dbe177b9624df5ceb&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;sha1&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;5f22fdcc79affdef604d89b64b7db599ed454c5e&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;sha256&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;23afb0983e874169669f96cd72b69234aef4cf54a86f89a25e14e91941ac95a2&amp;quot;&lt;/span&gt;
  },
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;picture&amp;quot;&lt;/span&gt;: {
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;large&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;https://randomuser.me/api/portraits/men/20.jpg&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;medium&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;https://randomuser.me/api/portraits/med/men/20.jpg&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;thumbnail&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;https://randomuser.me/api/portraits/thumb/men/20.jpg&amp;quot;&lt;/span&gt;
  }
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, you can see the password and hash in there. As I explained above, you &lt;em&gt;do not&lt;/em&gt; want to do this in a real application. As such, this example focuses on JWT and we are doing this purely for convenience.&lt;/p&gt;

&lt;h2 id=&#34;the-data-models&#34;&gt;The data models&lt;/h2&gt;

&lt;p&gt;The models for representing the data provided from the random user generator are as follows. We will be using the Lombok &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; &lt;code&gt;@Data&lt;/code&gt; annotation to stay away from having to write explicit setters and getters.&lt;/p&gt;

&lt;h3 id=&#34;profile&#34;&gt;Profile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;lombok.Data&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

&lt;span style=&#34;color: #9999FF&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Profile&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; Name name&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; String email&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; Login login&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; Picture picture&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;name&#34;&gt;Name&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Name&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; String title&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; String first&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; String last&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;login&#34;&gt;Login&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Login&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    String username&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    String password&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    String salt&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    String md5&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    String sha1&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    String sha256&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;picture&#34;&gt;Picture&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Picture&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; URL large&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; URL medium&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; URL thumbnail&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We will also create two other data models that expose a minimal set of profile information without the credentials.&lt;/p&gt;

&lt;h3 id=&#34;minimalprofile&#34;&gt;MinimalProfile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;MinimalProfile&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String username&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; Name name&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; URL thumbnail&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;MinimalProfile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Profile profile&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        name &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        username &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getLogin&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        thumbnail &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getPicture&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getThumbnail&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;detailedprofile&#34;&gt;DetailedProfile&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Data&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;DetailedProfile&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; Picture picture&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; Name name&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String email&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String username&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;DetailedProfile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Profile profile&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        name &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        email &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getEmail&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        picture &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getPicture&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        username &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getLogin&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;the-controllers&#34;&gt;The Controllers&lt;/h2&gt;

&lt;p&gt;The code for the API&amp;rsquo;s controller is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/profile&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ProfileController&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; ProfileService profileService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;unused&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;ProfileController&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;ProfileController&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ProfileService profileService&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;profileService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; profileService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/{username}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            method &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; GET&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            produces &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; APPLICATION_JSON_VALUE&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; MinimalProfile &lt;span style=&#34;color: #CC00FF&#34;&gt;minimal&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@PathVariable&lt;/span&gt; String username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; profileService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;minimal&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;orElseThrow&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ProfileNotFoundException&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/details/{username}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            method &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; GET&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            produces &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; APPLICATION_JSON_VALUE&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; DetailedProfile &lt;span style=&#34;color: #CC00FF&#34;&gt;details&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@PathVariable&lt;/span&gt; String username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; profileService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;detailed&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;orElseThrow&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ProfileNotFoundException&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It delegates querying for profiles to the &lt;code&gt;ProfileService&lt;/code&gt; and throws exceptions if a Profile is not present. Notice the use of Java&amp;rsquo;s &lt;code&gt;Optional&lt;/code&gt; to throw exceptions.&lt;/p&gt;

&lt;h3 id=&#34;the-profileservice&#34;&gt;The ProfileService&lt;/h3&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ProfileService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Profile&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; profiles&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; Path PROFILES_FILE &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Paths&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getResource&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/profiles.json&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toURI&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;ProfileService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; IOException&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; URISyntaxException &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        ObjectMapper objectMapper &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ObjectMapper&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        profiles &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; objectMapper&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;readValue&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;PROFILES_FILE&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toFile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; TypeReference&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Profile&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;});&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; Optional&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Profile&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; profiles&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; profile&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getLogin&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;findFirst&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Optional&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;MinimalProfile&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;minimal&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; get&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; MinimalProfile&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Optional&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;DetailedProfile&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;detailed&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String username&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; get&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;username&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;map&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; DetailedProfile&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;exception-handling&#34;&gt;Exception Handling&lt;/h3&gt;

&lt;p&gt;We will also need to wire up a &lt;code&gt;ControllerAdvice&lt;/code&gt; to handle exceptions appropriately:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@ControllerAdvice&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;GlobalExceptionHandler&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@ResponseStatus&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;NOT_FOUND&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@ExceptionHandler&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ProfileNotFoundException&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;profileNotFound&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this, you should have a profile service up and running.&lt;/p&gt;

&lt;h3 id=&#34;minimal-profile&#34;&gt;Minimal profile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -s &amp;quot;http://localhost:8080/profile/yellowfrog347&amp;quot; | jq .
{
  &amp;quot;username&amp;quot;: &amp;quot;yellowfrog347&amp;quot;,
  &amp;quot;name&amp;quot;: {
    &amp;quot;title&amp;quot;: &amp;quot;ms&amp;quot;,
    &amp;quot;first&amp;quot;: &amp;quot;sofia&amp;quot;,
    &amp;quot;last&amp;quot;: &amp;quot;hansen&amp;quot;
  },
  &amp;quot;thumbnail&amp;quot;: &amp;quot;https://randomuser.me/api/portraits/thumb/women/71.jpg&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;detailed-profile&#34;&gt;Detailed Profile&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl -s &amp;quot;http://localhost:8080/profile/details/yellowfrog347&amp;quot; | jq .
{
  &amp;quot;picture&amp;quot;: {
    &amp;quot;large&amp;quot;: &amp;quot;https://randomuser.me/api/portraits/women/71.jpg&amp;quot;,
    &amp;quot;medium&amp;quot;: &amp;quot;https://randomuser.me/api/portraits/med/women/71.jpg&amp;quot;,
    &amp;quot;thumbnail&amp;quot;: &amp;quot;https://randomuser.me/api/portraits/thumb/women/71.jpg&amp;quot;
  },
  &amp;quot;name&amp;quot;: {
    &amp;quot;title&amp;quot;: &amp;quot;ms&amp;quot;,
    &amp;quot;first&amp;quot;: &amp;quot;sofia&amp;quot;,
    &amp;quot;last&amp;quot;: &amp;quot;hansen&amp;quot;
  },
  &amp;quot;email&amp;quot;: &amp;quot;sofia.hansen@example.com&amp;quot;,
  &amp;quot;username&amp;quot;: &amp;quot;yellowfrog347&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code for the application so far can be found &lt;a href=&#34;https://github.com/sdqali/jwt-demo/tree/4f1da432a51fb8c88fc21a6fad895e03ca3611d9&#34;&gt;here&lt;/a&gt;. In the next blog post of the series, we will wire up Spring Security and build a login feature that issues a JWT after successful login.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://projectlombok.org/index.html&#34;&gt;Project Lombok&lt;/a&gt; is a Java library that helps minimize boiler plate code by replacing them with a set of convenient annotations. I tend to use it when I have to build data objects.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JWT authentication with Spring Web - Part 1</title>
      <link>http://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web---part-1/</link>
      <pubDate>Sat, 02 Jul 2016 18:42:04 -0700</pubDate>
      
      <guid>http://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web---part-1/</guid>
      <description>

&lt;p&gt;JSON Web Tokens (JWTs) are signed tokens issued by a server that it can use to verify a claim made by a client. This blog post is the first in a series where I implement authentication based on JWT in a Spring Web application with an Angular JS front end.&lt;/p&gt;

&lt;p&gt;This series will have the following structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part 1 - Discussion of JWT and implementation.&lt;/li&gt;
&lt;li&gt;Part 2 - A Spring User Profiles API&lt;/li&gt;
&lt;li&gt;Part 3 - Issuing a token from the server&lt;/li&gt;
&lt;li&gt;Part 4 - Verifying the token sent back by the client&lt;/li&gt;
&lt;li&gt;Part 5 - Securing the front end&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-jwt&#34;&gt;What is JWT?&lt;/h2&gt;

&lt;p&gt;The official JWT &lt;a href=&#34;https://jwt.io/&#34;&gt;website&lt;/a&gt; defines JWT as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;JWT&lt;/code&gt; contains 3 parts - a &lt;code&gt;header&lt;/code&gt;, a &lt;code&gt;payload&lt;/code&gt; and a &lt;code&gt;signature&lt;/code&gt;. A &lt;code&gt;JWT&lt;/code&gt; can in turn be represented as a &lt;code&gt;JWS&lt;/code&gt; or &lt;code&gt;JWE&lt;/code&gt;. &lt;code&gt;JWS&lt;/code&gt; stands for JSON Web Signature as defined in RFC 7515 and &lt;code&gt;JWE&lt;/code&gt; stands for JSON Web Encryption defined by RFC 7516. In a &lt;code&gt;JWS&lt;/code&gt;, the payload being sent is not encrypted, whereas it is encrypted in a &lt;code&gt;JWE&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This blog post will deal only with &lt;code&gt;JWS&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;structure-of-a-jwt&#34;&gt;Structure of a JWT&lt;/h2&gt;

&lt;p&gt;A JWT has the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base64(header) + &amp;quot;.&amp;quot; + base64(payload) + &amp;quot;.&amp;quot; + signature(header, payload, key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The signature itself is generated by signing the header and payload with a key, for example using the HMAC-SHA256 algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HMASHA256(base64(header) + &amp;quot;.&amp;quot; + base64(payload), key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A JWT header is a JSON object that typically has the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alg&lt;/code&gt; - The algorithm used for signing the token.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typ&lt;/code&gt; - This optional parameter, set to &lt;code&gt;JWT&lt;/code&gt; declares this JSON object as a JWT.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example JWT header when the algorithm used is HMA-SHA256:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;alg&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;HM256&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;typ&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;JWT&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A JWT payload contains a series of &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4&#34;&gt;claims&lt;/a&gt;. There is an IANA &amp;ldquo;JSON Web Token Claims&amp;rdquo; registry that has a number of claim names reserved for specific purposes. Applications are free to use any other names, except these for their claims. Claim names that are important include &lt;code&gt;exp&lt;/code&gt; that represents the expiration time on or after which the JWT MUST NOT be accepted for processing. The following payload sets issuer, expiry date and a username.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;1467509846&lt;/span&gt;,
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;iss&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;in.sdqali.jwt&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;greenrabbit948&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;generating-a-jwt&#34;&gt;Generating a JWT&lt;/h2&gt;

&lt;p&gt;For the header and payload shown above, if we were to generate a JWT with the HMAC256 algorithm and key &lt;code&gt;secretKey&lt;/code&gt;, it will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Header - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
* Payload - eyJleHAiOjE0Njc1MDk4NDYsImlzcyI6ImluLnNkcWFsaS5qd3QiLCJ1c2VybmFtZSI6ImdyZWVucmFiYml0OTQ4In0
* Signature - rStkUmx0SRWjBxKFVF2-lwwZNxlkGRJ4uH49TCIIN7o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The end token will have the following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0Njc1MDk4NDYsImlzcyI6ImluLnNkcWFsaS5qd3QiLCJ1c2VybmFtZSI6ImdyZWVucmFiYml0OTQ4In0.rStkUmx0SRWjBxKFVF2-lwwZNxlkGRJ4uH49TCIIN7o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have been implementing the JWT RFC to learn about it and it was fairly straight forward. I did the token generation part and did not finish the token verification part. The code for that exercise can be found &lt;a href=&#34;https://github.com/sdqali/jwt&#34;&gt;here&lt;/a&gt;. A more complete implementation of the RFC for the JVM is &lt;a href=&#34;https://github.com/jwtk/jjwt&#34;&gt;jjwt&lt;/a&gt; and the rest of the series will be using that implementation. The JWT website has a &lt;a href=&#34;https://jwt.io/#debugger&#34;&gt;debugger&lt;/a&gt; that allows for creation and verification of tokens.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;A detailed explanation of the differences between JWS and JWE can be found &lt;a href=&#34;https://securedb.co/community/jwt-vs-jws-vs-jwe/&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JSON logging for Spring applications</title>
      <link>http://sdqali.in/blog/2016/06/30/json-logging-for-spring-applications/</link>
      <pubDate>Thu, 30 Jun 2016 19:43:07 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2016/06/30/json-logging-for-spring-applications/</guid>
      <description>&lt;p&gt;If you have an application that writes logs, there are many reasons to make it write the log in JSON format. It makes it easier to search and analyze them when using tools such as the ELK Stack &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. JSON formatted logs make it easier to look at them when looking at how the app is behaving in real time using tools like jq &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. This blog post documents how to format logs as JSON in a Spring application.&lt;/p&gt;

&lt;p&gt;We will be using the &lt;code&gt;logstash-logback-encoder&lt;/code&gt; &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder&#34;&gt;encoder&lt;/a&gt; from Logstash. This can be added to the application with the following Maven dependency:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.logstash.logback&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logstash-logback-encoder&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.7&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next step is to configure logback to log using the new encoder. This can be done by placing a &lt;code&gt;logback.xml&lt;/code&gt; configuration file in the application&amp;rsquo;s class path - for example in the &lt;code&gt;main/resources&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;If we want the application to log to the console in JSON format, we will use a &lt;code&gt;ConsoleAppender&lt;/code&gt; with the encoder as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;consoleAppender&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;net.logstash.logback.encoder.LogstashEncoder&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;logger&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonLogger&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;additivity=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;consoleAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;root&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;consoleAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we wanted the application to log to a file with the logs being rotated, we will configure a &lt;code&gt;RollingFileAppender&lt;/code&gt; with the encoder, as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;LOG_PATH&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/tmp/json-log.json&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonAppender&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;File&amp;gt;&lt;/span&gt;${LOG_PATH}&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/File&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;net.logstash.logback.encoder.LogstashEncoder&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;maxIndex&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/maxIndex&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;${LOG_PATH}.%i&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;triggeringPolicy&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;MaxFileSize&amp;gt;&lt;/span&gt;1MB&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/MaxFileSize&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/triggeringPolicy&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;logger&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonLogger&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;additivity=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;root&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this configuration in place, we can tail the logs to observe the application in a much more readable manner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tail -f /tmp/json-log.json  | jq .
{
  &amp;quot;@timestamp&amp;quot;: &amp;quot;2016-06-30T20:01:59.651-04:00&amp;quot;,
  &amp;quot;@version&amp;quot;: 1,
  &amp;quot;message&amp;quot;: &amp;quot;Mapped \&amp;quot;{[/error],produces=[text/html]}\&amp;quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)&amp;quot;,
  &amp;quot;logger_name&amp;quot;: &amp;quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&amp;quot;,
  &amp;quot;thread_name&amp;quot;: &amp;quot;main&amp;quot;,
  &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;,
  &amp;quot;level_value&amp;quot;: 20000,
  &amp;quot;HOSTNAME&amp;quot;: &amp;quot;somehostname&amp;quot;
}
{
  &amp;quot;@timestamp&amp;quot;: &amp;quot;2016-06-30T20:01:59.677-04:00&amp;quot;,
  &amp;quot;@version&amp;quot;: 1,
  &amp;quot;message&amp;quot;: &amp;quot;Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]&amp;quot;,
  &amp;quot;logger_name&amp;quot;: &amp;quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&amp;quot;,
  &amp;quot;thread_name&amp;quot;: &amp;quot;main&amp;quot;,
  &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;,
  &amp;quot;level_value&amp;quot;: 20000,
  &amp;quot;HOSTNAME&amp;quot;: &amp;quot;somehostname&amp;quot;
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Logstach encoder also provides for a &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder#custom_field_names&#34;&gt;variety of customizations&lt;/a&gt; to the way the logs are written.&lt;/p&gt;

&lt;p&gt;A sample application with these configurations is available in &lt;a href=&#34;https://github.com/sdqali/json-log&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;ELK - ElasticSearch, Logstash, Kibana is a toolset for analyzing logs. An introduction to ELK can be found &lt;a href=&#34;https://www.elastic.co/webinars/introduction-elk-stack&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; is a command line JSON processor. If you work with JSON, jq is a must have tool.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Injecting dependencies into a Spring @Configuration</title>
      <link>http://sdqali.in/blog/2016/06/28/injecting-dependencies-into-a-spring-configuration/</link>
      <pubDate>Tue, 28 Jun 2016 23:17:51 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2016/06/28/injecting-dependencies-into-a-spring-configuration/</guid>
      <description>&lt;p&gt;This is one of those blog posts about things I wish I had known before I spent a lot of time figuring out when something was not working as expected. Recently, we have been trying to extend a &lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt; to wire up an HTTP request interceptor. And things did not work as we expected it to and we learned that our understanding of how Spring behaved under this situation was wrong. This is a write up to refer back to if and when we encounter this issue again.&lt;/p&gt;

&lt;p&gt;Spring&amp;rsquo;s &lt;code&gt;@Configuration&lt;/code&gt; annotation allows us to create a class that provides a set of beans. Because we wanted to wire up interceptors when the application started, it felt reasonable to annotate the extended &lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt; adaptor as a &lt;code&gt;@Configuration&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we ended up with code that looked as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; WebMvcConfigurerAdapter &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; HandlerInterceptor handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;unused&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HandlerInterceptor handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;handlerInterceptor&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;InterceptorRegistry registry&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        registry&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;addInterceptor&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;registry&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The interceptor itself is declared a &lt;code&gt;@Component&lt;/code&gt; of the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;SessionCheckInterceptor&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; HandlerInterceptor &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;preHandle&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; HttpServletResponse response&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;request&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;session&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
            response&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setStatus&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HttpServletResponse&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;SC_BAD_REQUEST&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;false&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;else&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;postHandle&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; HttpServletResponse response&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ModelAndView modelAndView&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;afterCompletion&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HttpServletRequest request&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; HttpServletResponse response&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Object handler&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Exception ex&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see, the interceptor checks every request for a &lt;code&gt;session&lt;/code&gt; header and responds with a &lt;code&gt;BAD_REQUEST (400)&lt;/code&gt; in the absence of it.&lt;/p&gt;

&lt;p&gt;This code compiles fine, but when you run it, you will be confronted with the following stack trace:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Factory method &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;requestMappingHandlerMapping&amp;#39;&lt;/span&gt; threw exception; nested exception is java.lang.IllegalArgumentException: Interceptor is required
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, what happened? Looking at the stack trace reveals the following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Caused by: java.lang.IllegalArgumentException: Interceptor is required
    at org.springframework.util.Assert.notNull&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Assert.java:115&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    at org.springframework.web.servlet.config.annotation.InterceptorRegistration.&amp;lt;init&amp;gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;InterceptorRegistration.java:51&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    at org.springframework.web.servlet.config.annotation.InterceptorRegistry.addInterceptor&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;InterceptorRegistry.java:45&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    at in.sdqali.spring.config.Config.addInterceptors&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Config.java:30&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Evidently, the interceptor we wired up is &lt;code&gt;null&lt;/code&gt;. After a spending a lot of time on this, we discovered this line on the java doc for &lt;code&gt;@Configuration&lt;/code&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@Configuration is meta-annotated with @Component, therefore
@Configuration classes are candidates for component scanning (typically using
Spring XML&#39;s &amp;lt;context:component-scan/&amp;gt; element) and therefore may also take
advantage of @Autowired/@Inject
at the field and method level (but not at the constructor level).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple fix is to inject the interceptor through a setter as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; WebMvcConfigurerAdapter &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; HandlerInterceptor handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@SuppressWarnings&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;unused&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;Config&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;setHandlerInterceptor&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HandlerInterceptor handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;handlerInterceptor&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;InterceptorRegistry registry&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        registry&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;addInterceptor&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;handlerInterceptor&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;addInterceptors&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;registry&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It took us a lot of time debugging and stepping through Spring code before we finally figured out what the issue was, but we could have discovered it in seconds from the java doc. There is a lesson in there for us.&lt;/p&gt;

&lt;p&gt;The example code to demonstrate this is available on &lt;a href=&#34;https://github.com/sdqali/config-constructor-poc&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Filtering responses in Spring MVC</title>
      <link>http://sdqali.in/blog/2016/06/08/filtering-responses-in-spring-mvc/</link>
      <pubDate>Wed, 08 Jun 2016 13:23:16 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2016/06/08/filtering-responses-in-spring-mvc/</guid>
      <description>&lt;p&gt;Yesterday my colleague &lt;a href=&#34;https://twitter.com/imdhmd&#34;&gt;Imdad&lt;/a&gt; asked if there was a mechanism to add filtering to a Spring MVC end point that responded with JSON. We both started looking at it and this blog post explores a way to do it, albeit for a specific type of responses that was relevant to our discussions.&lt;/p&gt;

&lt;p&gt;For the purposes of this blog post, the response of the end point will be a collection of repositories, taken from the GitHub API for the end point &lt;code&gt;https://api.github.com/users/rails/repos&lt;/code&gt;. This has the following structure.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;[
  {
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;id&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;20544&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;account_location&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;full_name&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;rails/account_location&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;owner&amp;quot;&lt;/span&gt;: {
      &lt;span style=&#34;color: #AA0000; background-color: #FFAAAA&#34;&gt;...&lt;/span&gt;
    },
    &lt;span style=&#34;color: #AA0000; background-color: #FFAAAA&#34;&gt;...&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;watchers_count&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;70&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Ruby&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;has_issues&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;has_downloads&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;has_wiki&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;has_pages&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;false&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;forks_count&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;mirror_url&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;open_issues_count&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;forks&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;12&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;open_issues&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;watchers&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;70&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;default_branch&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;master&amp;quot;&lt;/span&gt;
  }
  &lt;span style=&#34;color: #AA0000; background-color: #FFAAAA&#34;&gt;...&lt;/span&gt;
  &lt;span style=&#34;color: #AA0000; background-color: #FFAAAA&#34;&gt;...&lt;/span&gt;
]
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;We have a simple end point that reads a file with this response and responds with a JSON representation of it.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ReposController&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/repos&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; GET&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color: #CC00FF&#34;&gt;repos&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; URISyntaxException&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; IOException &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        URL url &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getClass&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getClassLoader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getResource&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;repos.json&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toURI&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toURL&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;

        ObjectMapper objectMapper &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ObjectMapper&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;

        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; objectMapper&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;readValue&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;url&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What we want to do is to provide a convenient mechanism so that this end point can respond for request made with url parameters which it uses to filter repositories. For example, we expect the request to &lt;code&gt;http://localhost:8080/repos?fork=true&amp;amp;language=Ruby&lt;/code&gt; to have a JSON response with an array containing only those repositories that are forks and have Ruby as their primary language. Of course, it is worth pointing out that in actual system, you would want to do these kind of filtering at the data layer instead of the web layer, but this is an exercise to see how we could do it at the Spring layer.&lt;/p&gt;

&lt;p&gt;We want our mechanism to be easy to use and I came with annotation that we would use as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ReposController&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/repos&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; method &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; GET&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@JsonFilter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;keys &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;fork&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;language&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;})&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color: #CC00FF&#34;&gt;repos&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; URISyntaxException&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; IOException &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
      &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;// ...&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The annotation itself takes the following form:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Target&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ElementType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;METHOD&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Documented&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Retention&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@interface&lt;/span&gt; JsonFilter &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;// JSON keys that will be used for filtering&lt;/span&gt;
    String&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;keys&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{};&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Spring MVC provides a &lt;code&gt;ResponseBodyAdvice&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to customize the response immediately after the execution of a controller method, which is exactly what we want in this situation. The interface expects us to implement two methods.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@ControllerAdvice&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;JsonFilterAdvice&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; ResponseBodyAdvice&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;List&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MethodParameter returnType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; HttpMessageConverter&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; converterType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color: #CC00FF&#34;&gt;beforeBodyWrite&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;List body&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; MethodParameter returnType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; MediaType selectedContentType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt;
    HttpMessageConverter&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; selectedConverterType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ServerHttpRequest request&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ServerHttpResponse response&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; body&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For our case, we want the advice to modify response only if the controller method has the &lt;code&gt;@JsonFilter&lt;/code&gt; annotation. This is possible with the following implementation of the &lt;code&gt;supports&lt;/code&gt; method:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;supports&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MethodParameter returnType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; HttpMessageConverter&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; converterType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Annotation&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; annotations &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Arrays&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;returnType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getMethodAnnotations&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; annotations&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;anyMatch&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;annotation &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; annotation&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;annotationType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;JsonFilter&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The actual filtering of the response itself involves filtering the &lt;code&gt;List&lt;/code&gt; for only those entries where every filter key has values provided in the incoming request. The following implementation achieves this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List &lt;span style=&#34;color: #CC00FF&#34;&gt;beforeBodyWrite&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;List body&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; MethodParameter returnType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; MediaType selectedContentType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt;
            HttpMessageConverter&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; selectedConverterType&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ServerHttpRequest request&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ServerHttpResponse response&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Map&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; values &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Map&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;)&lt;/span&gt; body&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

        &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;// Identify keys we are interested in.&lt;/span&gt;
        JsonFilter annotation &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; returnType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getMethodAnnotation&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;JsonFilter&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; possibleFilters &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Arrays&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;annotation&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;keys&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;

        HttpServletRequest servletRequest &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;((&lt;/span&gt;ServletServerHttpRequest&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; request&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getServletRequest&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;

        List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;Map&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; Object&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&lt;/span&gt; result &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; values&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;filter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;map &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; match &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;true&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
            Enumeration&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; parameterNames &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; servletRequest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getParameterNames&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;parameterNames&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;hasMoreElements&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
                String parameterName &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; parameterNames&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;nextElement&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
                &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;possibleFilters&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;parameterName&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
                    String parameterValue &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; servletRequest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getParameter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;parameterName&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
                    Object valueFromMap &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; map&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;parameterName&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
                    match &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;valueFromMap &lt;span style=&#34;color: #555555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; valueFromMap&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;parameterValue&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; match&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;}).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;collect&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Collectors&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; result&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;For every entry in the list, we compare query parameter values in the request&amp;rsquo;s URL to the one in the map and filter out only those entries where every combination matches. This is probably not the most efficient way of doing it, but for a quick hack, I am okay with it. Please feel free to take this and improve it. The code for this example is available on &lt;a href=&#34;https://github.com/sdqali/spring-json-filter&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;PS: Imdad may or may not have asked me to credit him for this blog post. ;-)&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;ResponseBodyAdvice&lt;/code&gt; is an interface that can be wired with a &lt;code&gt;@ControllerAdvice&lt;/code&gt; annotation to customize the response of controller methods. See the documentation &lt;a href=&#34;http://docs.spring.io/spring/docs/current/javadoc-api/org/springframework/web/servlet/mvc/method/annotation/ResponseBodyAdvice.html&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>On Inverness</title>
      <link>http://sdqali.in/blog/2016/06/05/on-inverness/</link>
      <pubDate>Sun, 05 Jun 2016 14:08:27 -0700</pubDate>
      
      <guid>http://sdqali.in/blog/2016/06/05/on-inverness/</guid>
      <description>&lt;p&gt;Two weeks ago, I was in the Scottish Highlands - soaking in the beauty of the city of Inverness, hiking through the South Loch Ness trail and traveling across the Black Isle. It was a wonderful trip - one that I wish was longer. This was a trip that invoked so many memories in me - among other things, of a man whose voice was part of growing up. A voice that traveled from the BBC Studios in the United Kingdom halfway across the globe and into a radio set in South Malabar.&lt;/p&gt;

&lt;p&gt;You see, as far as I can remember, I have always wanted to go to Inverness. That may sound crazy, but the name Inverness had been irreversibly etched in my mind when I was a small kid.&lt;/p&gt;

&lt;p&gt;When I was growing up, I didn&amp;rsquo;t have access to a television. Initially it was because my family couldn&amp;rsquo;t afford one and later when we could, my mom felt that it would have bad influence on her kids. My portal to the world was a Sony radio that my father had brought us from Jeddah where he was working at that time. It had the ability to receive both AM and FM signals and you could listen to the BBC World Service, Deutsche Welle Radio, Voice of America and many many more stations in languages that I did not understand. Not that I understood English well.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://sdqali.in/images/inverness-sunset.jpg&#34; alt=&#34;Sunset in Inverness&#34; /&gt;
&lt;em&gt;A sunset in Inverness&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;The BBC World Service had a Premier League program on Saturdays and Sundays. The program was a multi-cast of games around England, switching from stadium to stadium as goals were being scored, fouls were being awarded and referees were raising very late offside flags. Occasionally, they will switch to a stadium in Scotland when the Glasgow derby was in play. So many of my early memories of being a football fan happened around that radio.&lt;/p&gt;

&lt;p&gt;When the matches were finally over and the spectators headed home or to the pub or to curry houses in England and Scotland and people went to sleep in the Indian Sub-continent, a man&amp;rsquo;s very distinct voice would come out of the radio - carried by electromagnetic waves across the Indian Ocean. James Alexander Gordon &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; started announcing the final scores in the games of that evening across England, Scotland, Wales and occasionally Ireland in his methodical, deliberate voice. And there I would lay in a mattress made of coconut leaves boiled and interwoven by mother&amp;rsquo;s tenacious hands topped with sheets, listening to the melody announcing the results of a recreational activity played thousands of miles away. Of course, I would not learn that this was Gordon until much later in my life.&lt;/p&gt;

&lt;p&gt;Gordon always started with England - all 6 divisions of it starting from the Premier League and moved on to Scotland. And somewhere in the middle of the Scottish scores depending on their fortunes at that time, would come the name &amp;ldquo;Inverness Caledonian Thistle &amp;hellip;&amp;rdquo;. &amp;ldquo;Inverness Caledonian Thistle&amp;rdquo; - what a beautiful name, I will tell myself. Even better than Hearts of Midlothian and Queen of the South. After weeks of falling in love with the name, I wondered where Inverness was. The maps I had access to did not show Scotland.&lt;/p&gt;

&lt;p&gt;But eventually I had access to maps-of all kinds of places. I read a lot about Inverness in the pages of the World Book Encyclopedia in my school&amp;rsquo;s library. And once I had figured out where it was, I started wishing to go there one day. That was a foolish dream if there was one - international trips were not exactly at the top of the ladder of things my family and I needed or wanted.&lt;/p&gt;

&lt;p&gt;And yet, two weeks ago, there I was. Staring at the Thistle&amp;rsquo;s Caledonian Stadium. I had made it, almost 16 years later.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/James_Alexander_Gordon&#34;&gt;James Alexander Gordon&lt;/a&gt; was a legendary BBC broadcaster responsible for reading the results of football. He read results for nearly 40 years from 1974 to 2013. Gordon had a very distinctive style. Gordon explains his style in &lt;a href=&#34;https://www.youtube.com/watch?v=OcNmtpTsIfM&#34;&gt;this video&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Deprecating domain events in Axon</title>
      <link>http://sdqali.in/blog/2016/04/24/deprecating-domain-events-in-axon/</link>
      <pubDate>Sun, 24 Apr 2016 18:35:43 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2016/04/24/deprecating-domain-events-in-axon/</guid>
      <description>

&lt;p&gt;Recently at work, we had to deprecate a domain event. This event used to represent an error scenario. However, the business had since decided that this is no longer a valid error scenario. Removing the Java class is not straight forward - since there are events of this type stored in the event store, every time the aggregate associated with this event is loaded, Axon will throw errors trying to de-serialize them.&lt;/p&gt;

&lt;p&gt;Obviously, we need an Upcaster &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to take care of this situation. The Upcaster in this scenario will have to upcast this event to something representing the non-existence of this event, regardless of the revision. There are two ways to address this issue - Upcasting to an explicit NoOpEvent and upcasting to an empty list.&lt;/p&gt;

&lt;h2 id=&#34;upcasting-to-a-noopevent&#34;&gt;Upcasting to a NoOpEvent&lt;/h2&gt;

&lt;p&gt;Given an event &lt;code&gt;ValidationForFirstNameFailedEvent&lt;/code&gt;, an upcaster that upcasts to a &lt;code&gt;NoOpEvent&lt;/code&gt; can be implemented as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;DeprecateValidationForFirstNameFailedEventUpcaster&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; AbstractSingleEntryUpcaster &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; Object &lt;span style=&#34;color: #CC00FF&#34;&gt;doUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedObject intermediateRepresentation&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; UpcastingContext context&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; SimpleSerializedType&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;NoOpEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; SerializedType &lt;span style=&#34;color: #CC00FF&#34;&gt;doUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; SimpleSerializedType&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;NoOpEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(),&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;1&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;canUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; serializedType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ValidationForFirstNameFailedEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Class &lt;span style=&#34;color: #CC00FF&#34;&gt;expectedRepresentationType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; JsonNode&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As expected, this upcaster does not look at the revision of the intermediate representation and simply looks at the type of the event. And it completely discards any fields in the event and returns a simple type of the &lt;code&gt;NoOpEvent&lt;/code&gt; class. Note that in this case, we are serializing the event as JSON using Jackson, hence the expected representation type is &lt;code&gt;com.fasterxml.jackson.databind.JsonNode&lt;/code&gt;. If we were to use Axon&amp;rsquo;s default XML serialization, the expected representation type will be &lt;code&gt;org.dom4j.Document&lt;/code&gt;&lt;/p&gt;

&lt;h3 id=&#34;upcasting-to-an-empty-list&#34;&gt;Upcasting to an empty list&lt;/h3&gt;

&lt;p&gt;Upcasting to an empty list can be easily achieved by implementing &lt;code&gt;Upcaster&amp;lt;T&amp;gt;&lt;/code&gt; instead of extending &lt;code&gt;AbstractSingleEntryUpcaster&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ValidationForFirstNameFailedEventToEmptyListUpcaster&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; Upcaster&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;JsonNode&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;canUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; serializedType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ValidationForFirstNameFailedEvent&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;JsonNode&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;expectedRepresentationType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; JsonNode&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;SerializedObject&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&amp;gt;&lt;/span&gt; upcast&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedObject&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;JsonNode&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; intermediateRepresentation&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
        List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;SerializedType&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; expectedTypes&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; UpcastingContext context&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;SerializedType&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;upcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedType serializedType&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;emptyList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This can also be done through extending &lt;code&gt;AbstractSingleEntryUpcaster&lt;/code&gt; and returning &lt;code&gt;null&lt;/code&gt; from both &lt;code&gt;upcast&lt;/code&gt; methods. The class in turns returns empty lists for us. This is evident if we look at the JavaDoc for the methods&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;/**&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * Upcasts the given &amp;lt;code&amp;gt;intermediateRepresentation&amp;lt;/code&amp;gt; into zero or more other representations. The returned&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * list of Serialized Objects must match the given list of serialized types.&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * &amp;lt;p/&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * This method may return &amp;lt;code&amp;gt;null&amp;lt;/code&amp;gt; to indicate a deprecated object.&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     *&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * @param intermediateRepresentation The representation of the object to upcast&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * @param context                    An instance describing the context of the object to upcast&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     * @return the new representation of the object&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;     */&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;protected&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;abstract&lt;/span&gt; T &lt;span style=&#34;color: #CC00FF&#34;&gt;doUpcast&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SerializedObject&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;T&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; intermediateRepresentation&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                                  UpcastingContext context&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I posted this question in the &lt;a href=&#34;https://groups.google.com/forum/#!topic/axonframework/G2tlU06mRPM&#34;&gt;Axon mailing list&lt;/a&gt; as well as our internal developer mailing list and upcasting to an empty list was the more popular choice. Allard Buijze, the creator of Axon had this to say:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;by upcasting to an empty list, you&amp;rsquo;re explicitly indicating that the event no longer exists. When upcasting to a NoOpEvent, you implicitly mean the same thing, as no one is interested in a NoOp event.
So you achieve the same thing, but explicit always beats implicit in DDD ;-)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;While I agree with Allard that being explicit is better than being implicit (and not just in the context of DDD), I am not convinced that upcasting to an empty list is more explicit than upcasting to an explicit type. However, we went ahead with the empty list approach as it was the consensus among my coworkers.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Upcasting is a technique of migrating the schema of events in an event-sourced system to keep up with changes in the business requirements. The Axon documentation has a &lt;a href=&#34;http://www.axonframework.org/docs/2.0/repositories-and-event-stores.html#event-upcasting&#34;&gt;very good primer&lt;/a&gt; on upcasting, specifically in the context of Axon.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Programmable exit codes for spring command line applications - 2</title>
      <link>http://sdqali.in/blog/2016/04/19/programmable-exit-codes-for-spring-command-line-applications---2/</link>
      <pubDate>Tue, 19 Apr 2016 22:29:12 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2016/04/19/programmable-exit-codes-for-spring-command-line-applications---2/</guid>
      <description>&lt;p&gt;In the last &lt;a href=&#34;http://sdqali.in/blog/2016/04/17/programmable-exit-codes-for-spring-command-line-applications/&#34;&gt;blog post&lt;/a&gt;, we took a look at how to implement programmable exit codes for spring command line applications by using exceptions that implement &lt;code&gt;ExitCodeGenerator&lt;/code&gt;. This time, we will take a look at how to achieve the same without having to depend on an exception.&lt;/p&gt;

&lt;p&gt;This approach depends on the command line runner implementing the &lt;code&gt;ExitCodeGenerator&lt;/code&gt;. This does require the usage of &lt;code&gt;System.exit&lt;/code&gt;, but instead of it being invoked from different command line runners, it will be used in a single place as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Application&lt;/span&gt;  &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        ConfigurableApplicationContext ctx &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; SpringApplication&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SpringApplication&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ctx&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The command line runner will now implement &lt;code&gt;ExitCodeGenerator&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Profile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;HelloWorld&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; CommandLineRunner&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ExitCodeGenerator &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Hello World!&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;getExitCode&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;45&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how the application behaves when run:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;$ java -Dspring.profiles.active&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;hello -jar build/libs/exit-code-demo-1.0-SNAPSHOT.jar &amp;gt; /dev/null 2&amp;gt;&amp;amp;1
$ &lt;span style=&#34;color: #336666&#34;&gt;echo&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;$?&lt;/span&gt;
45
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This allows us to delegate how the application should exit to the command line runners themselves, without having to throw exceptions.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Programmable exit codes for Spring command line applications</title>
      <link>http://sdqali.in/blog/2016/04/17/programmable-exit-codes-for-spring-command-line-applications/</link>
      <pubDate>Sun, 17 Apr 2016 23:36:48 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2016/04/17/programmable-exit-codes-for-spring-command-line-applications/</guid>
      <description>&lt;p&gt;Spring&amp;rsquo;s &lt;code&gt;CommandLineRunner&lt;/code&gt; provides a great mechanism to build command line applications. While this convenience is great, applications that use &lt;code&gt;CommandLineRunner&lt;/code&gt; require extra effort in some areas like integration testing. Exit codes are such an area - applications that use command line runners always report their exit code as &lt;code&gt;0&lt;/code&gt; even if there are exceptions thrown. This blog post explains a way to get to programmable exit codes for such applications.&lt;/p&gt;

&lt;p&gt;The following example demonstrates this problem. Here we have a simple implementation of &lt;code&gt;CommandLineRunner&lt;/code&gt; that simply throws a &lt;code&gt;RuntimeException&lt;/code&gt; when started.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Profile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;exception&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;WillThrow&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; CommandLineRunner &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; RuntimeException&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;This should kill the application&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When this application runs, we will see that the exit code is &lt;code&gt;0&lt;/code&gt;, as expected.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -Dspring.profiles.active=exception -jar build/libs/exit-code-demo-1.0-SNAPSHOT.jar &amp;gt;&amp;gt; /dev/null 2&amp;amp;&amp;gt;1
$ echo $?
0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A simple way to propagate the right exit code is to use &lt;code&gt;java.lang.System#exit&lt;/code&gt; and specify an error code. The following snippet shows this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Profile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;exit&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;WillExit&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; CommandLineRunner &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;exit&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When run:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -Dspring.profiles.active=exit -jar build/libs/exit-code-demo-1.0-SNAPSHOT.jar &amp;gt;&amp;gt; /dev/null 2&amp;amp;&amp;gt;1
$ echo $?
3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This looks straightforward and easy. However, exiting the application from within the &lt;code&gt;CommandLineRunner&lt;/code&gt; makes integration testing of this application difficult. Our tests will simply stop execution at that point without giving us the opportunity to assert anything.&lt;/p&gt;

&lt;p&gt;At work, while looking for a solution to this, we stumbled across Spring&amp;rsquo;s &lt;code&gt;ExitCodeGenerator&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. It is an interface whose implementations Spring uses to look up what exit code to use. There are at least two ways to make use of &lt;code&gt;ExitCodeGenerator&lt;/code&gt; - one involves making the application&amp;rsquo;s Exceptions implement &lt;code&gt;ExitCodeGenerator&lt;/code&gt; and the other involves making the command line runners themselves implement &lt;code&gt;ExitCodeGenerator&lt;/code&gt;. We will look at the first approach here.&lt;/p&gt;

&lt;p&gt;Our new command line runner will be as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Component&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Profile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;exception&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;WillThrow&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; CommandLineRunner&lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throw&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ExceptionWithExitCode&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Hello&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;And the exception will resemble:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ExceptionWithExitCode&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; RuntimeException &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; ExitCodeGenerator &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;ExceptionWithExitCode&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String message&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;super&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;message&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;int&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;getExitCode&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;13&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When the application runs:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ java -Dspring.profiles.active=exception -jar build/libs/exit-code-demo-1.0-SNAPSHOT.jar &amp;gt;&amp;gt; /dev/null 2&amp;amp;&amp;gt;1
$ echo $?
13
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Obviously, this is a rather simple example, but you can see how &lt;code&gt;ExitCodeGenerator&lt;/code&gt; allows us to have programmable exit codes. This allows us to have tests for our applications, while giving us the flexibility to control the exit code.&lt;/p&gt;

&lt;p&gt;We will take a look at the second approach of using &lt;code&gt;ExitCodeGenerator&lt;/code&gt; in another blog post.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;code&gt;ExitCodeGenerator&lt;/code&gt; is an &amp;ldquo;Interface used to generate an &amp;lsquo;exit code&amp;rsquo; from a running command line SpringApplication.&amp;rdquo;. You can find the JavaDocs &lt;a href=&#34;http://docs.spring.io/spring-boot/docs/current/api/org/springframework/boot/ExitCodeGenerator.html&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Using custom arguments in Spring MVC controllers</title>
      <link>http://sdqali.in/blog/2016/01/29/using-custom-arguments-in-spring-mvc-controllers/</link>
      <pubDate>Fri, 29 Jan 2016 17:41:49 -0800</pubDate>
      
      <guid>http://sdqali.in/blog/2016/01/29/using-custom-arguments-in-spring-mvc-controllers/</guid>
      <description>

&lt;p&gt;Most of the Spring controllers in the real world accept a lot of different types of parameters - Path variables, URL parameters, request headers, request body and sometimes even the entire HTTP Request object. This provides a flexible mechanism to create APIs. Spring is really good at parsing these parameters in to Java types as long as there is an ObjectMapper (like Jackson) configured to take care of the de-serialization.&lt;/p&gt;

&lt;p&gt;However, there are situations where you want methods to receive a parameter of a particular type that has to resolved from a set of parameters–for example, an API can expect consumers to send meta data about a request in the form of headers and need a custom type to hold this information. Spring provides a convenient way to provide such custom arguments. This blog post explores this feature and how to implement it and test it.&lt;/p&gt;

&lt;h2 id=&#34;argument-resolvers&#34;&gt;Argument Resolvers&lt;/h2&gt;

&lt;p&gt;Spring uses argument resolvers to determine how to parse a particular argument required by a controller method from HTTP request body, the URL, URL parameters and HTTP headers. For example when a method expects a request header as in the following example, Spring uses a particular resolver named &lt;code&gt;RequestHeaderMethodArgumentResolver&lt;/code&gt; to resolve this argument. All argument resolvers implement the &lt;code&gt;HandlerMethodArgumentResolver&lt;/code&gt; interface whose contract is:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;interface&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;HandlerMethodArgumentResolver&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;supportsParameter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MethodParameter parameter&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    Object &lt;span style=&#34;color: #CC00FF&#34;&gt;resolveArgument&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MethodParameter parameter&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ModelAndViewContainer mavContainer&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
            NativeWebRequest webRequest&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; WebDataBinderFactory binderFactory&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;supportsParameter&lt;/code&gt; method determines if this resolver is capable of parsing a given parameter and &lt;code&gt;resolveArgument&lt;/code&gt; specifies how it‘s value should be computed. Notice how this method has the web &lt;code&gt;NativeWebRequest&lt;/code&gt; argument passed to it to allow the look up of request parameters like body, url and headers.&lt;/p&gt;

&lt;p&gt;For this example, the MetaData that we are interested in can be represented as a type:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;MetaData&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@JsonProperty&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;data&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; Map&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; map  &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;MetaData&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;MetaData&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Map&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; map&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;map&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; map&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; String &lt;span style=&#34;color: #CC00FF&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String key&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; map&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;get&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;key&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An argument resolver to compute this from the incoming request can be written as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;MetaDataResolver&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; HandlerMethodArgumentResolver &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String TRANSACTION_ID &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;TRANSACTION-ID&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String ACCESS_KEY &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ACCESS-KEY&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; metaDataHeaderNames &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; Arrays&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;asList&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;TRANSACTION_ID&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ACCESS_KEY&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;boolean&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;supportsParameter&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MethodParameter parameter&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; parameter&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getParameterType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;equals&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MetaData&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Object &lt;span style=&#34;color: #CC00FF&#34;&gt;resolveArgument&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MethodParameter parameter&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; ModelAndViewContainer mavContainer&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; NativeWebRequest webRequest&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; WebDataBinderFactory binderFactory&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        HashMap&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; map &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; HashMap&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;
        metaDataHeaderNames&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;forEach&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;name &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
            &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;webRequest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
                map&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;put&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; webRequest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;name&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
            &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;});&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; MetaData&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;map&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This resolver will try and compute the value for the argument if the arguments type is &lt;code&gt;MetaData&lt;/code&gt;. It computes it by extracting all the headers representing the meta data from the request.&lt;/p&gt;

&lt;h2 id=&#34;using-in-a-controller-method&#34;&gt;Using in a controller method&lt;/h2&gt;

&lt;p&gt;This parameter can be accessed in a controller method as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RestController&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/profiles&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ProfileController&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    ProfileService profileService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@RequestMapping&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;path &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
    method &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; RequestMethod&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;POST&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; Map&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; String&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RequestBody&lt;/span&gt; Profile profile&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; MetaData metaData&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        profileService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; metaData&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        System&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;printf&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;metaData&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Collections&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;message&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;success&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we were to run this app and make a request with the following headers, we will see that the MetaData instance did not get constructed with the right parameters.&lt;/p&gt;

&lt;h2 id=&#34;wiring-up-the-custom-resolver&#34;&gt;Wiring up the custom resolver&lt;/h2&gt;

&lt;p&gt;For this resolver to work, it needs to be added to the chain of resolvers that Spring uses. This can be done by extending &lt;code&gt;WebMvcConfigurerAdapter&lt;/code&gt;‘s &lt;code&gt;addArgumentResolvers&lt;/code&gt; method as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Config&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; WebMvcConfigurerAdapter &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;addArgumentResolvers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;List&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;&lt;/span&gt;HandlerMethodArgumentResolver&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&lt;/span&gt; argumentResolvers&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        argumentResolvers&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;add&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; MetaDataResolver&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;testing-using-mockmvc&#34;&gt;Testing using MockMvc&lt;/h2&gt;

&lt;p&gt;In order to test the behavior of a controller in the presence of a custom argument resolver using MockMvc, the resolver need to be added to the list of resolvers that MockMvc is going to use.
 An example test for the above class is as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MockitoJUnitRunner&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ProfileControllerTest&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; TestCase &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; ProfileController profileController&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; MockMvc mockMvc&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; ObjectMapper objectMapper&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Mock&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; ProfileService profileService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Before&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;setUp&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        objectMapper &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ObjectMapper&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        profileController &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; ProfileController&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profileService&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        mockMvc &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; MockMvcBuilders
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;standaloneSetup&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profileController&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setCustomArgumentResolvers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; MetaDataResolver&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;build&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;shouldCreateAProfile&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        Profile profile &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; Profile&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;foo@bar.com&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        MetaData metaData &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; MetaData&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Collections&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;singletonMap&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;TRANSACTION-ID&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;

        mockMvc&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;perform&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;post&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/profiles/&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;objectMapper&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;writeValueAsBytes&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;contentType&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;MediaType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;APPLICATION_JSON&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;header&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;TRANSACTION-ID&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;foo&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;andExpect&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;status&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;isOk&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
        Mockito&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;verify&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profileService&lt;span style=&#34;color: #555555&#34;&gt;).&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;create&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;eq&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;profile&lt;span style=&#34;color: #555555&#34;&gt;),&lt;/span&gt; eq&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;metaData&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This test is self-explanatory–we wire up the argument resolver, make a request with one of the meta data headers and expect the profile service to be invoked with the right parameters.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Authentication for Apache Camel HTTP components</title>
      <link>http://sdqali.in/blog/2015/12/16/authentication-for-apache-camel-http-components/</link>
      <pubDate>Wed, 16 Dec 2015 01:07:01 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/16/authentication-for-apache-camel-http-components/</guid>
      <description>

&lt;p&gt;My team at work has been lately working on a data transformer that pushes information from an external system in to platform. For historical reasons the information is passed to us in the form of flat files. We have been working on a data transformer that reads information from the file and posts it into an HTTP end point.
Apache Camel &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; makes a natural choice as the base for implementing such a data transformer. The presence of ready to use components that can read files and post information to HTTP end points and the availability of a nice D.S.L. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; makes implementation easy and straightforward. One of the things we had to spend time figuring out was how to ensure that we authenticate correctly against our target HTTP end point. This blog post takes a look at various methods we explored.&lt;/p&gt;

&lt;p&gt;Camel&amp;rsquo;s HTTP component allows http resources to be added as Camel end points. These end points can be consuming information from routes or producing information which are then passed on to routes. For example, the following route takes information from the &lt;code&gt;direct:start&lt;/code&gt; end point, tokenizes it into lines and sends each line into an HTTP url.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;FileToApiRoute&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;extends&lt;/span&gt; RouteBuilder &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String UTF_8 &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;UTF-8&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String CONTENT_TYPE &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Content-Type&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String APPLICATION_JSON &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;application/json&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String TARGET &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;http://localhost:8080/ingest&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        from&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;direct:start&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;marshal&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;UTF_8&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;tokenize&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;streaming&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;CONTENT_TYPE&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; simple&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;APPLICATION_JSON&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;TARGET&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Once this route has been registered, it can be used to send data by placing information on the &lt;code&gt;direct:start&lt;/code&gt; end point. The following service does it by passing the contents of a file to a &lt;code&gt;ProducerTemplate&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;DataStreamService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; ProducerTemplate producerTemplate&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;DataStreamService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ProducerTemplate producerTemplate&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;this&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;producerTemplate&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; producerTemplate&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;stream&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        producerTemplate&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;sendBody&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;direct:start&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                ExchangePattern&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;InOnly&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; File&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;src/main/resources/yelp.business.json&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Our challenge is to ensure that this continue to work when the HTTP end point in question requires authentication. For the purposes of this blog post, we will be restricting our discussion to Basic Authentication. There are three ways to do this authentication–through Camel authentication query parameters, through the use of the &lt;code&gt;Authorization&lt;/code&gt; header and by overriding the &lt;code&gt;HttpConfiguration&lt;/code&gt; in the current Camel context.&lt;/p&gt;

&lt;h3 id=&#34;camel-authentication-query-parameters&#34;&gt;Camel authentication query parameters&lt;/h3&gt;

&lt;p&gt;Camel allows consumers to specify authentication parameters in the http end point. For example, three parameters required for Basic Authentication are &lt;code&gt;authMethod&lt;/code&gt;, &lt;code&gt;authUsername&lt;/code&gt; and &lt;code&gt;authPassword&lt;/code&gt;. The route rewritten with these parameters will be as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;final&lt;/span&gt; String TARGET_WITH_AUTH &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;http://localhost:8080/ingest&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt;
            &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;?authMethod=Basic&amp;amp;authUsername=test&amp;amp;authPassword=test&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        from&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;direct:start&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;marshal&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;UTF_8&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;tokenize&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;streaming&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;CONTENT_TYPE&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; simple&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;APPLICATION_JSON&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;TARGET_WITH_AUTH&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;It is odd to be adding authentication parameters to a URL, but here the URL has multiple purposes–this is a URL to which information is going to be sent to, it also represents a logical end point. These three parameters (and other authentication parameters) get stripped from the HTTP URL before Camel makes the HTTP request. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; This still will cause issues in odd cases where the HTTP A.P.I. you are integrating with expects these parameters to be sent.&lt;/p&gt;

&lt;h3 id=&#34;setting-authorization-headers&#34;&gt;Setting Authorization headers&lt;/h3&gt;

&lt;p&gt;Camel allows the addition of headers to messages that it processes and if the message ultimately gets routed to a Camel HTTP end point, these headers get converted to HTTP headers. This allows us to use authentication by setting the &lt;code&gt;Authorization&lt;/code&gt; header. This example demonstrates this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;configure&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        from&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;direct:start&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;marshal&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;string&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;UTF_8&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;split&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;body&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;tokenize&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;())&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;streaming&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;CONTENT_TYPE&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; simple&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;APPLICATION_JSON&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setHeader&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Authorization&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; simple&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Basic dGVzdDp0ZXN0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;))&lt;/span&gt;
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;to&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;TARGET&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;h3 id=&#34;overriding-httpconfiguration&#34;&gt;Overriding HttpConfiguration&lt;/h3&gt;

&lt;p&gt;Camel provides a mechanism to override it‘s Context‘s configuration before the context gets created. In the following example, we get a reference to the &lt;code&gt;HttpComponent&lt;/code&gt; and set a new &lt;code&gt;HttpConfiguration&lt;/code&gt; with the right authentication. This allows us to separate the authentication configurations from the route definitions. However, if your Camel context is responsible for talking to different HTTP end points with different authentication mechanisms or parameters, this will not solve the issue.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #9999FF&#34;&gt;@Bean&lt;/span&gt;
    CamelContextConfiguration &lt;span style=&#34;color: #CC00FF&#34;&gt;contextConfiguration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; camelContext &lt;span style=&#34;color: #555555&#34;&gt;-&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
            HttpComponent http &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;HttpComponent&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; camelContext&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getComponent&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;http&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
            http&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setHttpConfiguration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;httpConfiguration&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;};&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; HttpConfiguration &lt;span style=&#34;color: #CC00FF&#34;&gt;httpConfiguration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        HttpConfiguration httpConfiguration &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; HttpConfiguration&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        httpConfiguration&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setAuthMethod&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;authScheme&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        httpConfiguration&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setAuthUsername&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;authUsername&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        httpConfiguration&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setAuthPassword&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;authPassword&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; httpConfiguration&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In the end, the method you choose will depend on the unique constraints of the systems you are integrating with.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;https://camel.apache.org/&#34;&gt;Apache Camel&lt;/a&gt; is a Java integration framework.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Camel&amp;rsquo;s Domain Specific Language in Java allows integration routes to be defined as fluent specifications.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Stripping of these parameters is done inside &lt;code&gt;org.apache.camel.component.http.HttpComponent&lt;/code&gt;‘s &lt;code&gt;createHttpClientConfigurer&lt;/code&gt; &lt;a href=&#34;https://github.com/apache/camel/blob/f7f0b18f6924fe0b01f32a25ed1e38e29b1bf8e5/components/camel-http/src/main/java/org/apache/camel/component/http/HttpComponent.java#L66&#34;&gt;method&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Thoughts on Open Graph tags</title>
      <link>http://sdqali.in/blog/2015/12/14/thoughts-on-open-graph-tags/</link>
      <pubDate>Mon, 14 Dec 2015 21:47:06 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/14/thoughts-on-open-graph-tags/</guid>
      <description>

&lt;p&gt;The Open Graph protocol was designed by Facebook to help content creators generate a richer preview of links to their content when they get posted in to Facebook. It was originally proposed as a simple mark up that can be adopted in platforms beyond Facebook. The Open Graph Protocol Design Decisions presentation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; does a very good job of enumerating the motivation and design decisions made for Open Graph. I have lately been reading and experimenting with these tags and I notice a fair bit of differences when it comes to how these tags are used by different platforms.&lt;/p&gt;

&lt;p&gt;This is by no means an exhaustive list–these are applications I use frequently use and hence encounter the usage of Open Graph tags in. I am deliberately scoping this discussion to a sub set of tags including the following which are the most common tags I have encountered:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;og:title
og:description
og:url
og:image
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;facebook&#34;&gt;Facebook&lt;/h2&gt;

&lt;p&gt;I do not currently have a Facebook account with which I could test and this and Facebook‘s real name policy makes it hard to create test accounts. Facebook‘s &lt;a href=&#34;https://developers.facebook.com/docs/sharing/best-practices&#34;&gt;content sharing best practices&lt;/a&gt; does make it clear that they use the Open Graph tags and considering Facebook created the protocol, I would guess all the tags work as expected.&lt;/p&gt;

&lt;h2 id=&#34;twitter&#34;&gt;Twitter&lt;/h2&gt;

&lt;p&gt;Twitter primarily uses it‘s &lt;a href=&#34;https://dev.twitter.com/cards/overview&#34;&gt;Twitter Cards&lt;/a&gt; functionality to help content creators display richer previews. Twitter Cards defines it‘s own custom tags. However, if these tags are not present in a shared page‘s markup, Twitter does &lt;a href=&#34;https://dev.twitter.com/cards/markup&#34;&gt;fall back&lt;/a&gt; to using the corresponding Open Graph tags.&lt;/p&gt;

&lt;p&gt;However, one of the interesting things about sharing content through Twitter cards is that it allows the content to be attributed to the Twitter accounts of the content author and the site where the content is hosted. This is done via the Twitter Card tags &lt;code&gt;twitter:creator&lt;/code&gt; and &lt;code&gt;twitter:site&lt;/code&gt;. There are no equivalents in the Open Graph world and hence these needs to be explicitly specified for Twitter.&lt;/p&gt;

&lt;h2 id=&#34;slack&#34;&gt;Slack&lt;/h2&gt;

&lt;p&gt;Slack generates rich preview of content using the four Open Graph tags. Slack does this by using it‘s &lt;a href=&#34;https://api.slack.com/robots&#34;&gt;Link Expanding Bot&lt;/a&gt;. In addition to Open Graph tags, Slack looks for oEmbed &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and Twitter Cards.&lt;/p&gt;

&lt;h2 id=&#34;groupme&#34;&gt;GroupMe&lt;/h2&gt;

&lt;p&gt;GroupMe parses Open Graph tags and displays them in chat messages. I have been unable to find documentation as to which other tags they parse.&lt;/p&gt;

&lt;h2 id=&#34;google&#34;&gt;Google+&lt;/h2&gt;

&lt;p&gt;Google‘s &lt;a href=&#34;https://developers.google.com/+/web/snippet/&#34;&gt;recommended method&lt;/a&gt; for providing metadata is Schema.org &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; annotations. It does fall back to Open Graph tags if Schema.org annotations are not found. Google also uses schema.org microdata to generate rich snippets in their search results. Bing and Yahoo also support rich snippets through Schema.org annotations.&lt;/p&gt;

&lt;h2 id=&#34;representing-creator-information&#34;&gt;Representing creator information&lt;/h2&gt;

&lt;p&gt;As we saw in the example of Twitter, linking to the creator of content is not something that can be solved purely with Open Graph tags. Open Graph does specify an &lt;code&gt;author&lt;/code&gt; type &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;. But in a world where links get shared to multiple platforms, the meaning of this tag is specific to the platform–it could be a Twitter id, a Facebook profile link, a Slack user id, etc. This does force the use of platform specific tags like &lt;code&gt;twitter:site&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It would be interesting to see if Open Graph would one day support scoped author tags that can specify what &lt;code&gt;author:username&lt;/code&gt; means for different platforms like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;lt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;profile:username&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;“twitter.com“&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;@sdqali&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;profile:username&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;“facebook.com“&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;http://facebook.com/some-profile-id&amp;quot;&lt;/span&gt; /&amp;gt;
&amp;lt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;meta&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;property&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;profile:username&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;scope&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;“slack.com“&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;content&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;@some-slack-id&amp;quot;&lt;/span&gt; /&amp;gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In conclusion, while Open Graph tags are used by a lot of platforms, there are specific pieces of information for which platform specific tags and annotations are needed.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;David Recordon–The Open Graph Protocol Design Decisions on &lt;a href=&#34;http://www.scribd.com/doc/30715288/The-Open-Graph-Protocol-Design-Decisions&#34;&gt;Scribd&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;oEmbed–Yet another attempt to provide rich representation of URLs. You can find more information on the &lt;a href=&#34;http://oembed.com/&#34;&gt;official site&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Schema.org is an effort to create and promote schemas for structured data. The official site is &lt;a href=&#34;http://schema.org/&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;See &lt;code&gt;article:author&lt;/code&gt; &lt;a href=&#34;http://ogp.me/#type_article&#34;&gt;spec&lt;/a&gt; and &lt;code&gt;book:author&lt;/code&gt; &lt;a href=&#34;http://ogp.me/#type_book&#34;&gt;spec&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Integration testing Spring command line applications</title>
      <link>http://sdqali.in/blog/2015/12/11/integration-testing-spring-command-line-applications/</link>
      <pubDate>Fri, 11 Dec 2015 15:57:30 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/11/integration-testing-spring-command-line-applications/</guid>
      <description>&lt;p&gt;In the &lt;a href=&#34;http://sdqali.in/blog/2015/12/10/integration-testing-challenges-for-non-web-spring-applications/&#34;&gt;last blog post&lt;/a&gt;, I wrote about the challenges of writing an integration test for a Spring command line application. One of the solutions for this issue discussed in the blog post was to use the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotations to inject Java system properties and use that to run the application instead of the normal command line arguments. This blog post describes how to perform this.&lt;/p&gt;

&lt;p&gt;The first step is to rewrite our test to use the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotations. This will result in a test that looks as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SpringJUnit4ClassRunner&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@SpringApplicationConfiguration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;classes &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;Application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@IntegrationTest&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;value &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;input:expectedOutput&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ApplicationIntegrationTest&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; Application application&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Rule&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; OutputCapture outputCapture &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; OutputCapture&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;shouldGenerateResultFiles&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        assertTrue&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;outputCapture&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;expectedOutput&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;At this point, it is worth taking a look at what the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotation causes Spring to do. This is a meta-annotation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; that specifies a number of test listeners including &lt;code&gt;IntegrationTestPropertiesListener&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Documented&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Inherited&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Retention&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Target&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ElementType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@TestExecutionListeners&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;listeners &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt; IntegrationTestPropertiesListener&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
        DirtiesContextBeforeModesTestExecutionListener&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
        DependencyInjectionTestExecutionListener&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
        DirtiesContextTestExecutionListener&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
        TransactionalTestExecutionListener&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; SqlScriptsTestExecutionListener&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@interface&lt;/span&gt; IntegrationTest &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    String&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;value&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;default&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{};&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;IntegrationTestPropertiesListener&lt;/code&gt; is an implementation of &lt;code&gt;TestExecutionListener&lt;/code&gt; which is a mechanism used by Spring to react to test execution events like &lt;code&gt;beforeTestClass&lt;/code&gt;, &lt;code&gt;prepareTestInstance&lt;/code&gt;, &lt;code&gt;beforeTestMethod&lt;/code&gt;, &lt;code&gt;beforeTestMethod&lt;/code&gt; and &lt;code&gt;afterTestClass&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;For the purposes of what we are trying to achieve, the listener we are really interested in is the &lt;code&gt;beforeTestClass&lt;/code&gt; of &lt;code&gt;IntegrationTestPropertiesListener&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;prepareTestInstance&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;TestContext testContext&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        Class&lt;span style=&#34;color: #555555&#34;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; testClass &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; testContext&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getTestClass&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
        AnnotationAttributes annotationAttributes &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; AnnotatedElementUtils
                &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getMergedAnnotationAttributes&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;testClass&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                        IntegrationTest&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getName&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;());&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;annotationAttributes &lt;span style=&#34;color: #555555&#34;&gt;!=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;null&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
            addPropertySourceProperties&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;testContext&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt;
                    annotationAttributes&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;getStringArray&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;value&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
        &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As we can see, the value of the &lt;code&gt;value&lt;/code&gt; element &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; of our &lt;code&gt;@IntegrationTest&lt;/code&gt; gets injected to the configuration of the test context.&lt;/p&gt;

&lt;p&gt;Now that we have understood and used the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotation to push in configuration, it is time to make our application consume this configuration.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@ComponentScan&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; CommandLineRunner &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    DataService dataService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Value&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;${input}&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
    String input&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        SpringApplication&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        dataService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;perform&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;input&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;An added benefit of this approach is that this forces us to use named parameter arguments when running the application as opposed to the position based command line arguments. This of course does not solve the problem of testing if you absolutely have to use position based arguments for your application. It would be nice Spring provided a mechanism to inject the command line arguments in a test before &lt;code&gt;SpringApplicationContextLoader&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; took over. But I suspect that this is not a common enough use case of Spring that users have asked the Spring team to implement it.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Meta annotations are Spring annotations that can modify and act up on other annotations. For an example of customizing behavior using meta annotations, see &lt;a href=&#34;http://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/&#34;&gt;this blog post&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;The tendency of programmers to name the default element of an annotation &lt;code&gt;value&lt;/code&gt; is one of my least favorite aspects of Java annotations. In most cases, there is another name that conveys the intent of the element better. I plan to write my thoughts about this in a blog post soon.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;See the previous blog post to see how &lt;code&gt;SpringApplicationContextLoader&lt;/code&gt; executes the application without arguments.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Integration testing challenges for non-web Spring applications</title>
      <link>http://sdqali.in/blog/2015/12/10/integration-testing-challenges-for-non-web-spring-applications/</link>
      <pubDate>Thu, 10 Dec 2015 21:45:59 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/10/integration-testing-challenges-for-non-web-spring-applications/</guid>
      <description>&lt;p&gt;We are building a command line data loader application at work that uses Spring. One of the things that I took us more time that it should have to figure out was how to write an integration test that invokes the command line application with the right command line arguments. This blog post describes this scenario and a potential solution to this problem.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider a simple command line application implemented using Spring Boot&amp;rsquo;s &lt;code&gt;CommandLineRunner&lt;/code&gt;. The main application class is fairly simple.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@EnableAutoConfiguration&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@ComponentScan&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Application&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;implements&lt;/span&gt; CommandLineRunner &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    DataService dataService&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;static&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;main&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;[]&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        SpringApplication&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;,&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Override&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt; args&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        dataService&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;perform&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;args&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;]);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;In addition to this, there is a configuration class &lt;code&gt;AppConfiguration&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@Configuration&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;AppConfiguration&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Bean&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; DataService &lt;span style=&#34;color: #CC00FF&#34;&gt;dataService&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; DataService&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The &lt;code&gt;DataService&lt;/code&gt; simply prints the argument it receives.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;DataService&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;perform&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;String arg&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        System&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;out&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;println&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;arg&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we were to attempt writing an integration test for this application, it would look like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@RunWith&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;SpringJUnit4ClassRunner&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@SpringApplicationConfiguration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;classes &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;Application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;})&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ApplicationIntegrationTest&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
    &lt;span style=&#34;color: #9999FF&#34;&gt;@Autowired&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;private&lt;/span&gt; Application application&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;


    &lt;span style=&#34;color: #9999FF&#34;&gt;@Rule&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; OutputCapture outputCapture &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;new&lt;/span&gt; OutputCapture&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;

    &lt;span style=&#34;color: #9999FF&#34;&gt;@Test&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #007788; font-weight: bold&#34;&gt;void&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;shouldGenerateResultFiles&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt; &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;throws&lt;/span&gt; Exception &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
        application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;sampleOutPut&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
        assertTrue&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;outputCapture&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;toString&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;().&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;contains&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;sampleOutput&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;));&lt;/span&gt;
    &lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;That test is straightforward—it loads the Spring context with all the beans, runs the application with parameters and expects the parameter to be printed to the console.&lt;/p&gt;

&lt;p&gt;Except, it does not work. If we were to execute the above test, we will get the following error:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;...
Caused by: java.lang.ArrayIndexOutOfBoundsException: 0
at in.sdqali.springapps.Application.run&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Application.java:24&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt; ~&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;main/:na&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;What happened? It looks like the &lt;code&gt;run&lt;/code&gt; method was called with out any arguments while the test configuration was loaded.&lt;/p&gt;

&lt;p&gt;Let‘s try and understand wh
y this happens. Remember how we annotated the test with &lt;code&gt;@SpringApplicationConfiguration&lt;/code&gt;? This annotation is a meta-annotation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; specified as:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #9999FF&#34;&gt;@ContextConfiguration&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;loader &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; SpringApplicationContextLoader&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;class&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Documented&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Inherited&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Retention&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;RetentionPolicy&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;RUNTIME&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #9999FF&#34;&gt;@Target&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;ElementType&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;TYPE&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;public&lt;/span&gt; &lt;span style=&#34;color: #9999FF&#34;&gt;@interface&lt;/span&gt; SpringApplicationConfiguration &lt;span style=&#34;color: #555555&#34;&gt;{&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;...&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;}&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;code&gt;ContextConfiguration&lt;/code&gt; is an annotation that allows tests to specify the information used to load and configure the application context. From the Java doc for this annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; * {@code @ContextConfiguration} defines class-level metadata that is used to determine
 * how to load and configure an {@link org.springframework.context.ApplicationContext
 * ApplicationContext} for integration tests.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This brings us to &lt;code&gt;SpringApplicationContextLoader&lt;/code&gt;‘s &lt;code&gt;loadContext&lt;/code&gt; method and buried deep inside are these line:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;setInitializers&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;initializers&lt;span style=&#34;color: #555555&#34;&gt;);&lt;/span&gt;
ConfigurableApplicationContext applicationContext &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; application&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;&lt;span style=&#34;color: #330099&#34;&gt;run&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;();&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; applicationContext&lt;span style=&#34;color: #555555&#34;&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;So, regardless of how many arguments our command line application was supposed to take, this loader always call the application without any arguments.&lt;/p&gt;

&lt;p&gt;There are two solutions I have been able to think of for this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Override the&lt;code&gt;SpringApplicationContextLoader&lt;/code&gt; and pass the necessary arguments in &lt;code&gt;application.run()&lt;/code&gt;. This is definitely not an elegant or easy solution.&lt;/li&gt;
&lt;li&gt;Use an environment variable instead of the command line argument as the input to the service. This will allow us to inject this variable using the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My next blog post will discuss the second approach.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;Meta annotations. &lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-meta-annotations&#34;&gt;Spring documentation&lt;/a&gt;. To see how to use meta-annotations to write custom annoations, see &lt;a href=&#34;http://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/&#34;&gt;this blog post&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>