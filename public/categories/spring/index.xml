<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Spring on Sadique Ali</title>
    <link>http://sdqali.in/categories/spring/</link>
    <description>Recent content in Spring on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 02 Jul 2016 18:42:04 -0700</lastBuildDate>
    <atom:link href="http://sdqali.in/categories/spring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JWT authentication with Spring Web - Part 1</title>
      <link>http://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web---part-1/</link>
      <pubDate>Sat, 02 Jul 2016 18:42:04 -0700</pubDate>
      
      <guid>http://sdqali.in/blog/2016/07/02/jwt-authentication-with-spring-web---part-1/</guid>
      <description>

&lt;p&gt;JSON Web Tokens (JWTs) are signed tokens issued by a server that it can use to verify a claim made by a client. This blog post is the first in a series where I implement authentication based on JWT in a Spring Web application with an Angular JS front end.&lt;/p&gt;

&lt;p&gt;This series will have the following structure:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Part 1 - Discussion of JWT and implementation.&lt;/li&gt;
&lt;li&gt;Part 2 - A Spring User Profiles API&lt;/li&gt;
&lt;li&gt;Part 3 - Issuing a token from the server&lt;/li&gt;
&lt;li&gt;Part 4 - Verifying the token sent back by the client&lt;/li&gt;
&lt;li&gt;Part 5 - Securing the front end&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;what-is-jwt&#34;&gt;What is JWT?&lt;/h2&gt;

&lt;p&gt;The official JWT &lt;a href=&#34;https://jwt.io/&#34;&gt;website&lt;/a&gt; defines JWT as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;JSON Web Tokens are an open, industry standard RFC 7519 method for representing claims securely between two parties.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;A &lt;code&gt;JWT&lt;/code&gt; contains 3 parts - a &lt;code&gt;header&lt;/code&gt;, a &lt;code&gt;payload&lt;/code&gt; and a &lt;code&gt;signature&lt;/code&gt;. A &lt;code&gt;JWT&lt;/code&gt; can in turn be represented as a &lt;code&gt;JWS&lt;/code&gt; or &lt;code&gt;JWE&lt;/code&gt;. &lt;code&gt;JWS&lt;/code&gt; stands for JSON Web Signature as defined in RFC 7515 and &lt;code&gt;JWE&lt;/code&gt; stands for JSON Web Encryption defined by RFC 7516. In a &lt;code&gt;JWS&lt;/code&gt;, the payload being sent is not encrypted, whereas it is encrypted in a &lt;code&gt;JWE&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. This blog post will deal only with &lt;code&gt;JWS&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;structure-of-a-jwt&#34;&gt;Structure of a JWT&lt;/h2&gt;

&lt;p&gt;A JWT has the following structure:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;base64(header) + &amp;quot;.&amp;quot; + base64(payload) + &amp;quot;.&amp;quot; + signature(header, payload, key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The signature itself is generated by signing the header and payload with a key, for example using the HMAC-SHA256 algorithm:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;HMASHA256(base64(header) + &amp;quot;.&amp;quot; + base64(payload), key)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;A JWT header is a JSON object that typically has the following values:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;alg&lt;/code&gt; - The algorithm used for signing the token.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;typ&lt;/code&gt; - This optional parameter, set to &lt;code&gt;JWT&lt;/code&gt; declares this JSON object as a JWT.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;An example JWT header when the algorithm used is HMA-SHA256:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;alg&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;HM256&amp;quot;&lt;/span&gt;,
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;typ&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;JWT&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;A JWT payload contains a series of &lt;a href=&#34;https://tools.ietf.org/html/rfc7519#section-4&#34;&gt;claims&lt;/a&gt;. There is an IANA &amp;ldquo;JSON Web Token Claims&amp;rdquo; registry that has a number of claim names reserved for specific purposes. Applications are free to use any other names, except these for their claims. Claim names that are important include &lt;code&gt;exp&lt;/code&gt; that represents the expiration time on or after which the JWT MUST NOT be accepted for processing. The following payload sets issuer, expiry date and a username.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;{
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;exp&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #FF6600&#34;&gt;1467509846&lt;/span&gt;,
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;iss&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;in.sdqali.jwt&amp;quot;&lt;/span&gt;,
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;quot;username&amp;quot;&lt;/span&gt;: &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;greenrabbit948&amp;quot;&lt;/span&gt;
}
&lt;/pre&gt;&lt;/div&gt;

&lt;h2 id=&#34;generating-a-jwt&#34;&gt;Generating a JWT&lt;/h2&gt;

&lt;p&gt;For the header and payload shown above, if we were to generate a JWT with the HMAC256 algorithm and key &lt;code&gt;secretKey&lt;/code&gt;, it will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;* Header - eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9
* Payload - eyJleHAiOjE0Njc1MDk4NDYsImlzcyI6ImluLnNkcWFsaS5qd3QiLCJ1c2VybmFtZSI6ImdyZWVucmFiYml0OTQ4In0
* Signature - rStkUmx0SRWjBxKFVF2-lwwZNxlkGRJ4uH49TCIIN7o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The end token will have the following form:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE0Njc1MDk4NDYsImlzcyI6ImluLnNkcWFsaS5qd3QiLCJ1c2VybmFtZSI6ImdyZWVucmFiYml0OTQ4In0.rStkUmx0SRWjBxKFVF2-lwwZNxlkGRJ4uH49TCIIN7o
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;I have been implementing the JWT RFC to learn about it and it was fairly straight forward. I did the token generation part and did not finish the token verification part. The code for that exercise can be found &lt;a href=&#34;https://github.com/sdqali/jwt&#34;&gt;here&lt;/a&gt;. A more complete implementation of the RFC for the JVM is &lt;a href=&#34;https://github.com/jwtk/jjwt&#34;&gt;jjwt&lt;/a&gt; and the rest of the series will be using that implementation. The JWT website has a &lt;a href=&#34;https://jwt.io/#debugger&#34;&gt;debugger&lt;/a&gt; that allows for creation and verification of tokens.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;A detailed explanation of the differences between JWS and JWE can be found &lt;a href=&#34;https://securedb.co/community/jwt-vs-jws-vs-jwe/&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>JSON logging for Spring applications</title>
      <link>http://sdqali.in/blog/2016/06/30/json-logging-for-spring-applications/</link>
      <pubDate>Thu, 30 Jun 2016 19:43:07 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2016/06/30/json-logging-for-spring-applications/</guid>
      <description>&lt;p&gt;If you have an application that writes logs, there are many reasons to make it write the log in JSON format. It makes it easier to search and analyze them when using tools such as the ELK Stack &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt;. JSON formatted logs make it easier to look at them when looking at how the app is behaving in real time using tools like jq &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;. This blog post documents how to format logs as JSON in a Spring application.&lt;/p&gt;

&lt;p&gt;We will be using the &lt;code&gt;logstash-logback-encoder&lt;/code&gt; &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder&#34;&gt;encoder&lt;/a&gt; from Logstash. This can be added to the application with the following Maven dependency:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;dependency&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;groupId&amp;gt;&lt;/span&gt;net.logstash.logback&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/groupId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;artifactId&amp;gt;&lt;/span&gt;logstash-logback-encoder&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/artifactId&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;version&amp;gt;&lt;/span&gt;4.7&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/version&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/dependency&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The next step is to configure logback to log using the new encoder. This can be done by placing a &lt;code&gt;logback.xml&lt;/code&gt; configuration file in the application&amp;rsquo;s class path - for example in the &lt;code&gt;main/resources&lt;/code&gt; directory.&lt;/p&gt;

&lt;p&gt;If we want the application to log to the console in JSON format, we will use a &lt;code&gt;ConsoleAppender&lt;/code&gt; with the encoder as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;consoleAppender&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.ConsoleAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;net.logstash.logback.encoder.LogstashEncoder&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;logger&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonLogger&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;additivity=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;consoleAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;root&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;consoleAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If we wanted the application to log to a file with the logs being rotated, we will configure a &lt;code&gt;RollingFileAppender&lt;/code&gt; with the encoder, as follows:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;configuration&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;property&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;LOG_PATH&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;value=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/tmp/json-log.json&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonAppender&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.rolling.RollingFileAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;File&amp;gt;&lt;/span&gt;${LOG_PATH}&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/File&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;encoder&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;net.logstash.logback.encoder.LogstashEncoder&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;rollingPolicy&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.rolling.FixedWindowRollingPolicy&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;maxIndex&amp;gt;&lt;/span&gt;1&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/maxIndex&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;fileNamePattern&amp;gt;&lt;/span&gt;${LOG_PATH}.%i&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/fileNamePattern&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/rollingPolicy&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;triggeringPolicy&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;class=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;ch.qos.logback.core.rolling.SizeBasedTriggeringPolicy&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
            &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;MaxFileSize&amp;gt;&lt;/span&gt;1MB&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/MaxFileSize&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/triggeringPolicy&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/appender&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;logger&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;name=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonLogger&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;additivity=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;false&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;DEBUG&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/logger&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;root&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;level=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;INFO&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
        &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;appender-ref&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;ref=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;jsonAppender&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/root&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/configuration&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;With this configuration in place, we can tail the logs to observe the application in a much more readable manner:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ tail -f /tmp/json-log.json  | jq .
{
  &amp;quot;@timestamp&amp;quot;: &amp;quot;2016-06-30T20:01:59.651-04:00&amp;quot;,
  &amp;quot;@version&amp;quot;: 1,
  &amp;quot;message&amp;quot;: &amp;quot;Mapped \&amp;quot;{[/error],produces=[text/html]}\&amp;quot; onto public org.springframework.web.servlet.ModelAndView org.springframework.boot.autoconfigure.web.BasicErrorController.errorHtml(javax.servlet.http.HttpServletRequest,javax.servlet.http.HttpServletResponse)&amp;quot;,
  &amp;quot;logger_name&amp;quot;: &amp;quot;org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerMapping&amp;quot;,
  &amp;quot;thread_name&amp;quot;: &amp;quot;main&amp;quot;,
  &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;,
  &amp;quot;level_value&amp;quot;: 20000,
  &amp;quot;HOSTNAME&amp;quot;: &amp;quot;somehostname&amp;quot;
}
{
  &amp;quot;@timestamp&amp;quot;: &amp;quot;2016-06-30T20:01:59.677-04:00&amp;quot;,
  &amp;quot;@version&amp;quot;: 1,
  &amp;quot;message&amp;quot;: &amp;quot;Mapped URL path [/webjars/**] onto handler of type [class org.springframework.web.servlet.resource.ResourceHttpRequestHandler]&amp;quot;,
  &amp;quot;logger_name&amp;quot;: &amp;quot;org.springframework.web.servlet.handler.SimpleUrlHandlerMapping&amp;quot;,
  &amp;quot;thread_name&amp;quot;: &amp;quot;main&amp;quot;,
  &amp;quot;level&amp;quot;: &amp;quot;INFO&amp;quot;,
  &amp;quot;level_value&amp;quot;: 20000,
  &amp;quot;HOSTNAME&amp;quot;: &amp;quot;somehostname&amp;quot;
}
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The Logstach encoder also provides for a &lt;a href=&#34;https://github.com/logstash/logstash-logback-encoder#custom_field_names&#34;&gt;variety of customizations&lt;/a&gt; to the way the logs are written.&lt;/p&gt;

&lt;p&gt;A sample application with these configurations is available in &lt;a href=&#34;https://github.com/sdqali/json-log&#34;&gt;this repository&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;ELK - ElasticSearch, Logstash, Kibana is a toolset for analyzing logs. An introduction to ELK can be found &lt;a href=&#34;https://www.elastic.co/webinars/introduction-elk-stack&#34;&gt;here&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://stedolan.github.io/jq/&#34;&gt;jq&lt;/a&gt; is a command line JSON processor. If you work with JSON, jq is a must have tool.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>