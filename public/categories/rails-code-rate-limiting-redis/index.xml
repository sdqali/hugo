<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rails Code Rate Limiting Redis on Sadique Ali</title>
    <link>http://sdqali.in/categories/rails-code-rate-limiting-redis/</link>
    <description>Recent content in Rails Code Rate Limiting Redis on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 13 Oct 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sdqali.in/categories/rails-code-rate-limiting-redis/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Implementing Rate Limiting in Rails - Part 2</title>
      <link>http://sdqali.in/blog/2013/10/13/implementing-rate-limiting-in-rails---part-2/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://sdqali.in/blog/2013/10/13/implementing-rate-limiting-in-rails---part-2/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The first part of this series can be found &lt;a href=&#34;http://sdqali.in/blog/2013/10/12/implementing-rate-limiting-in-rails-part-1/&#34;&gt;here&lt;/a&gt;&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The first part of this series looked at how to implement basic rate limiting in a Rails application. However, as pointed out in the improvements section, the implementation was not complete - it did not provide clients enough information about the rate limiting that is in place and how long they should wait before making further requests once they hit the limit.&lt;/p&gt;

&lt;p&gt;In order to tell the client about the rate limit parameters, the mechanism needs to be able to set headers on the response. While a &lt;code&gt;before_filter&lt;/code&gt; is useful to limit the requests, it can not change the response from a valid request. One could use an &lt;code&gt;after_filter&lt;/code&gt; to achieve this, but a Rack middleware &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5795a64758d23be8c42855c9ecf34170:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5795a64758d23be8c42855c9ecf34170:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; is a more suitable solution given that middlewares can act up on a request as well as the response generated by the application for that request.&lt;/p&gt;

&lt;p&gt;We will need to comment out the &lt;code&gt;before_filter&lt;/code&gt; that was introduced in Part 1. Then we will define a blank middleware and wire it up. The convention is to define middlwares in &lt;code&gt;app/middleware&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
# app/middleware/rate_limit.rb

class RateLimit
  def initialize(app)
    @app = app
  end

  def call(env)
    @app.env
  end
end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This middleware is wired up as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;
# config/application.rb

class Application &amp;lt; Rails::Application
  ...
  config.middleware.use &amp;quot;RateLimit&amp;quot;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;basic-rate-limiting:5795a64758d23be8c42855c9ecf34170&#34;&gt;Basic Rate Limiting&lt;/h3&gt;

&lt;p&gt;Let&amp;rsquo;s re-implement what we implemented in Part 1 using the middleware.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def call(env)
    client_ip = env[&amp;quot;REMOTE_ADDR&amp;quot;]
    key = &amp;quot;count:#{client_ip}&amp;quot;
    count = REDIS.get(key)
    unless count
      REDIS.set(key, 0)
      REDIS.expire(key, THROTTLE_TIME_WINDOW)
    end

    if count.to_i &amp;gt;= THROTTLE_MAX_REQUESTS
      [
       429,
       {},
       [message]
      ]
    else
      REDIS.incr(key)
      @app.call(env)
    end
  end

  private
  def message
    {
      :message =&amp;gt; &amp;quot;You have fired too many requests. Please wait for some time.&amp;quot;
    }.to_json
  end

&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;rate-limit-status:5795a64758d23be8c42855c9ecf34170&#34;&gt;Rate limit status&lt;/h3&gt;

&lt;p&gt;There are various header conventions for providing a client it&amp;rsquo;s rate limit status. For this example, we will use the convention that GitHub &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5795a64758d23be8c42855c9ecf34170:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5795a64758d23be8c42855c9ecf34170:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and Twitter &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5795a64758d23be8c42855c9ecf34170:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5795a64758d23be8c42855c9ecf34170:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; use. The following headers represent the rate limit status:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;X-RateLimit-Limit&lt;/code&gt; - The maximum number of requests that the client is permitted to make in the time window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-RateLimit-Remaining&lt;/code&gt; - The number of requests remaining in the current rate limit window.&lt;/li&gt;
&lt;li&gt;&lt;code&gt;X-RateLimit-Reset&lt;/code&gt; - The time at which the current rate limit window resets in UTC epoch seconds &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:5795a64758d23be8c42855c9ecf34170:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:5795a64758d23be8c42855c9ecf34170:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The middleware will set these headers for all requests with the following change:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;  def call(env)
    client_ip = env[&amp;quot;REMOTE_ADDR&amp;quot;]
    key = &amp;quot;count:#{client_ip}&amp;quot;
    count = REDIS.get(key)
    unless count
      REDIS.set(key, 0)
      REDIS.expire(key, THROTTLE_TIME_WINDOW)
    end

    if count.to_i &amp;gt;= THROTTLE_MAX_REQUESTS
      [
       429,
       rate_limit_headers(count, key),
       [message]
      ]
    else
      REDIS.incr(key)
      status, headers, body = @app.call(env)
      [
       status,
       headers.merge(rate_limit_headers(count.to_i + 1, key)),
       body
      ]
    end
  end

  private
  def message
    {
      :message =&amp;gt; &amp;quot;You have fired too many requests. Please wait for some time.&amp;quot;
    }.to_json
  end

  def rate_limit_headers(count, key)
    ttl = REDIS.ttl(key)
    time = Time.now.to_i
    time_till_reset = (time + ttl.to_i).to_s
    {
      &amp;quot;X-Rate-Limit-Limit&amp;quot; =&amp;gt;  &amp;quot;60&amp;quot;,
      &amp;quot;X-Rate-Limit-Remaining&amp;quot; =&amp;gt; (60 - count.to_i).to_s,
      &amp;quot;X-Rate-Limit-Reset&amp;quot; =&amp;gt; time_till_reset
    }
  end

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This computes the time remaining till the limit is reset and the number of requests remaining and sets the appropriate headers.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s test this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash$ for i in {1..100}
do
curl -i http://localhost:3000/foo.json &amp;gt;&amp;gt; /tmp/headers.log
done

bash$ less /tmp/headers.log | grep X-Rate-Limit
X-Rate-Limit-Limit: 60
X-Rate-Limit-Remaining: 59
X-Rate-Limit-Reset: 1381717125
X-Rate-Limit-Limit: 60
X-Rate-Limit-Remaining: 58
X-Rate-Limit-Reset: 1381717125
...
X-Rate-Limit-Limit: 60
X-Rate-Limit-Remaining: 1
X-Rate-Limit-Reset: 1381717124
X-Rate-Limit-Limit: 60
X-Rate-Limit-Remaining: 0
X-Rate-Limit-Reset: 1381717124
X-Rate-Limit-Limit: 60
X-Rate-Limit-Remaining: 0
X-Rate-Limit-Reset: 1381717124
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The code for this implementation is on my &lt;a href=&#34;https://github.com/sdqali/rails_throttle&#34;&gt;GitHub profile&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:5795a64758d23be8c42855c9ecf34170:1&#34;&gt;RailsCast &lt;a href=&#34;http://railscasts.com/episodes/151-rack-middleware&#34;&gt;#151 - Rack Middleware&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5795a64758d23be8c42855c9ecf34170:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5795a64758d23be8c42855c9ecf34170:2&#34;&gt;GitHub API V3 - &lt;a href=&#34;http://developer.github.com/v3/#rate-limiting&#34;&gt;Rate limiting&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5795a64758d23be8c42855c9ecf34170:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5795a64758d23be8c42855c9ecf34170:3&#34;&gt;Twitter - &lt;a href=&#34;https://dev.twitter.com/docs/rate-limiting/1.1&#34;&gt;REST API Rate Limiting in v1.1&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5795a64758d23be8c42855c9ecf34170:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:5795a64758d23be8c42855c9ecf34170:4&#34;&gt;Wikipedia - Unix time - &lt;a href=&#34;https://en.wikipedia.org/wiki/Unix_time#Encoding_time_as_a_number&#34;&gt;Encoding time as a number&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:5795a64758d23be8c42855c9ecf34170:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Implementing Rate Limiting in Rails - Part 1</title>
      <link>http://sdqali.in/blog/2013/10/12/implementing-rate-limiting-in-rails---part-1/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://sdqali.in/blog/2013/10/12/implementing-rate-limiting-in-rails---part-1/</guid>
      <description>

&lt;p&gt;&lt;em&gt;The second part of this series can be found &lt;a href=&#34;http://sdqali.in/blog/2013/10/13/implementing-rate-limiting-in-rails-part-2/&#34;&gt;here&lt;/a&gt;.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Rate limiting or throttling is the practice of limiting how frequently legitimate users of a web service can access the service. Rate limiting is often put in place to prevent the hogging of resources by a sub set of the users of the system. Rate limiting works by responding with error messages when a client exceeds their allocated share of requests within a predefined time window. In addition to the error message, the response should also include information as to when rate limit will be reset so that the client can continue accessing the system after the reset.&lt;/p&gt;

&lt;p&gt;What we need is a way to record the number of requests each client is making and reset this number to zero after a predefined time period and decide for each request whether the client making the request has exceeded the limits.&lt;/p&gt;

&lt;h3 id=&#34;the-test-application:05fdaa963770121a9f6ab535e38c3f13&#34;&gt;The test application&lt;/h3&gt;

&lt;p&gt;We will create a simple Rails application with a single API endpoint at &lt;code&gt;foo.json&lt;/code&gt;. The code needed for this is as follows:&lt;/p&gt;

&lt;p&gt;Routes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/routes.rb

RailsThrottle::Application.routes.draw do
  get &#39;foo.json&#39; =&amp;gt; &#39;foo#index&#39;
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The controller:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/foo_controller.rb

class FooController &amp;lt; ApplicationController
  def index
    render json: {foo: :bar}
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;storing-the-rate-data:05fdaa963770121a9f6ab535e38c3f13&#34;&gt;Storing the rate data&lt;/h3&gt;

&lt;p&gt;We need a place to store each client&amp;rsquo;s IP address and the number of requests it made. We need to increment this count for each request and reset the count to zero after a time period. Considering these needs, &lt;a href=&#34;http://redis.io/&#34;&gt;Redis&lt;/a&gt; is a great fit for this data store. Redis stores key value pairs and allows expiry time to be specified for each entry. Redis also comes with an &lt;code&gt;INCR&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:05fdaa963770121a9f6ab535e38c3f13:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:05fdaa963770121a9f6ab535e38c3f13:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; command that ensures that increment operations are atomic. This will be useful to us if we were to run multiple instances of our app behind a load balancer.&lt;/p&gt;

&lt;p&gt;To setup the application to use Redis, we will need to install the &lt;code&gt;redis&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:05fdaa963770121a9f6ab535e38c3f13:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:05fdaa963770121a9f6ab535e38c3f13:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; gem. Once we have the gem, we will add a new &lt;code&gt;initializer&lt;/code&gt; named &lt;code&gt;throttle.rb&lt;/code&gt; which configures our Redis client.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# config/initializers/throttle.rb

require &amp;quot;redis&amp;quot;

redis_conf  = YAML.load(File.join(Rails.root, &amp;quot;config&amp;quot;, &amp;quot;redis.yml&amp;quot;))
REDIS = Redis.new(:host =&amp;gt; redis_conf[&amp;quot;host&amp;quot;], :port =&amp;gt; redis_conf[&amp;quot;port&amp;quot;])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This will load the Redis server&amp;rsquo;s host and port from the configuration file located at &lt;code&gt;config/redis.yml&lt;/code&gt;. This file will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# config/redis.yml

host: localhost
port: 6379
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;using-a-before-filter-for-rate-limiting:05fdaa963770121a9f6ab535e38c3f13&#34;&gt;Using a &lt;code&gt;before_filter&lt;/code&gt; for rate limiting.&lt;/h3&gt;

&lt;p&gt;The first step is to log the number of requests each client is making. This can easily be achieved with a &lt;code&gt;before_filter&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:05fdaa963770121a9f6ab535e38c3f13:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:05fdaa963770121a9f6ab535e38c3f13:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Let&amp;rsquo;s add the filter into the &lt;code&gt;ApplicationController&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/application_controller.rb

class ApplicationController &amp;lt; ActionController::Base
  ...

  before_filter :throttle

  def throttle
    client_ip = request.env[&amp;quot;REMOTE_ADDR&amp;quot;]
    key = &amp;quot;count:#{client_ip}&amp;quot;
    count = REDIS.get(key)

    unless count
      REDIS.set(key, 0)
    end
    REDIS.incr(key)
    true
  end

  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Since this &lt;code&gt;before_filter&lt;/code&gt; belongs to the &lt;code&gt;ApplicationController&lt;/code&gt;, it will be applied to all requests, unless a specific controller chooses to skip it. So before every request is processed, the filter grabs the client&amp;rsquo;s IP and checks whether there is a count in Redis for this IP. If there is no count key, it creates one. Finally it increments the count.&lt;/p&gt;

&lt;p&gt;At this point, the filter just records the requests made, but does not limit requests. Let&amp;rsquo;s go ahead and implement limiting. We need to specify the time window for rate limiting and how many requests should be allowed in that time window. We will allow a client a maximum of &lt;code&gt;60&lt;/code&gt; requests in &lt;code&gt;15&lt;/code&gt; minutes. The following constants need to be defined in &lt;code&gt;throttle.rb&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;THROTTLE_TIME_WINDOW = 15 * 60
THROTTLE_MAX_REQUESTS = 60
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The filter needs to be changed to respond with error messages when the rate limit is exceeded.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-ruby&#34;&gt;# app/controllers/application_controller.rb

class ApplicationController &amp;lt; ActionController::Base
  ...

  before_filter :throttle

  def throttle
    client_ip = request.env[&amp;quot;REMOTE_ADDR&amp;quot;]
    key = &amp;quot;count:#{client_ip}&amp;quot;
    count = REDIS.get(key)

    unless count
      REDIS.set(key, 0)
      REDIS.expire(key, THROTTLE_TIME_WINDOW)
      return true
    end

    if count.to_i &amp;gt;= THROTTLE_MAX_REQUESTS
      render :status =&amp;gt; 429, :json =&amp;gt; {:message =&amp;gt; &amp;quot;You have fired too many requests. Please wait for some time.&amp;quot;}
      return
    end
    REDIS.incr(key)
    true
  end

  ...
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;When the limit is reached, subsequent requests will be responded with an error message and the HTTP status code &lt;code&gt;429&lt;/code&gt;. The 429 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:05fdaa963770121a9f6ab535e38c3f13:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:05fdaa963770121a9f6ab535e38c3f13:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; status code indicates that the user has sent too many requests in a given amount of time.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s go ahead and test this.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;bash$ for i in {1..100}
do
curl -i http://localhost:3000/foo.json &amp;gt;&amp;gt; /dev/null
done

bash$ less log/development.log | grep &amp;quot;200 OK&amp;quot; | wc -l
      60

bash$ less log/development.log | grep &amp;quot;429 Too Many Requests&amp;quot; | wc -l
      40

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;As you can see after &lt;code&gt;60&lt;/code&gt; requests, all requests get the &lt;code&gt;429&lt;/code&gt; response.&lt;/p&gt;

&lt;h3 id=&#34;improvements:05fdaa963770121a9f6ab535e38c3f13&#34;&gt;Improvements&lt;/h3&gt;

&lt;p&gt;While what we have implemented limits the requests, it does not give the client enough information as to how long it has to wait before making requests again. It would also be helpful if the server tells the client on each request how many total requests it is allowed to make in a window and how many more requests it can perform before limiting kicks in. We will look at this in the next blog post.&lt;/p&gt;

&lt;p&gt;A sample application with this rate limiting in place is on &lt;a href=&#34;https://github.com/sdqali/rails_throttle/tree/filter&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:05fdaa963770121a9f6ab535e38c3f13:1&#34;&gt;&lt;a href=&#34;http://redis.io/commands/incr&#34;&gt;Redis documentation&lt;/a&gt; for INCR command.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:05fdaa963770121a9f6ab535e38c3f13:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:05fdaa963770121a9f6ab535e38c3f13:2&#34;&gt;&lt;a href=&#34;https://rubygems.org/gems/redis&#34;&gt;redis&lt;/a&gt; - A Ruby client that tries to match Redis&amp;rsquo; API one-to-one, while still providing an idiomatic interface. It features thread-safety, client-side sharding, pipelining, and an obsession for performance.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:05fdaa963770121a9f6ab535e38c3f13:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:05fdaa963770121a9f6ab535e38c3f13:3&#34;&gt;Rails&amp;rsquo; &lt;a href=&#34;http://apidock.com/rails/AbstractController/Callbacks/ClassMethods/before_filter&#34;&gt;before filter&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:05fdaa963770121a9f6ab535e38c3f13:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:05fdaa963770121a9f6ab535e38c3f13:4&#34;&gt;IETF: Additional HTTP Status Codes - &lt;a href=&#34;https://tools.ietf.org/html/rfc6585#section-4&#34;&gt;429 Too Many Requests&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:05fdaa963770121a9f6ab535e38c3f13:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>