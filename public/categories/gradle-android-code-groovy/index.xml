<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Gradle Android Code Groovy on Sadique Ali</title>
    <link>http://localhost:1313/categories/gradle-android-code-groovy/</link>
    <description>Recent content in Gradle Android Code Groovy on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Tue, 01 Oct 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/gradle-android-code-groovy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Accessing Environment Variables in Gradle</title>
      <link>http://localhost:1313/blog/2013/10/01/accessing-environment-variables-in-gradle/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/10/01/accessing-environment-variables-in-gradle/</guid>
      <description>&lt;p&gt;I have been writing a fun Android App. &lt;a href=&#34;https://play.google.com/store/apps/details?id=in.sdqali.sharewithtitle&#34;&gt;Share With Title&lt;/a&gt; is a small application that allows you to share web pages you are reading to other applications without having to jump through the messy copy-paste hoop. (You should try it. If you share stuff from the web like I do, it will save you a lot of time and frustration). I have been coding on &lt;a href=&#34;https://developer.android.com/sdk/installing/studio.html&#34;&gt;Android Studio&lt;/a&gt;, Google&amp;rsquo;s IntelliJ based IDE for Android development. It uses Gradle for build scripts. Gradle is a Groovy based DSL &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:9c75ee168501c0681315e8dd530bf5a5:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:9c75ee168501c0681315e8dd530bf5a5:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; for declaratively specifying build tasks. From what I have seen so far, it looks like an improvement over Ant.&lt;/p&gt;

&lt;p&gt;While attempting to build a signed version of my app, I found a &lt;a href=&#34;http://stackoverflow.com/questions/18328730/how-to-create-a-release-signed-apk-file-using-gradle&#34;&gt;Gradle recipe&lt;/a&gt; for signing Android applications. However, it used hard coded parameters including passwords. This lead me to figuring out how to use environment variables in Gradle scripts.&lt;/p&gt;

&lt;p&gt;Since Gradle scripts are Groovy files, Groovy&amp;rsquo;s &lt;code&gt;System.getEnv&lt;/code&gt; method will do the trick. The recipe modified to use this and thereby eliminate hard coded parameters will look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;signingConfigs {
	release {
		storeFile file(System.getenv(&amp;quot;KEYSTORE&amp;quot;))
		storePassword System.getenv(&amp;quot;KEYSTORE_PASSWORD&amp;quot;)
		keyAlias System.getenv(&amp;quot;KEY_ALIAS&amp;quot;)
		keyPassword System.getenv(&amp;quot;KEY_PASSWORD&amp;quot;)
	}
}

buildTypes {
	release {
		signingConfig signingConfigs.release
	}
}
&lt;/code&gt;&lt;/pre&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:9c75ee168501c0681315e8dd530bf5a5:1&#34;&gt;A Domain Specific Languages (DSL) is a languages targeted to a particular kind of problem. Martin Fowler has a very good description of them &lt;a href=&#34;http://martinfowler.com/bliki/DomainSpecificLanguage.html&#34;&gt;here&lt;/a&gt;. Build scripts like Make, Ant and Rake are all DSLs.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:9c75ee168501c0681315e8dd530bf5a5:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>