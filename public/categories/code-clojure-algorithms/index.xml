<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code Clojure Algorithms on Sadique Ali</title>
    <link>http://localhost:1313/categories/code-clojure-algorithms/</link>
    <description>Recent content in Code Clojure Algorithms on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 20 Mar 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/categories/code-clojure-algorithms/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Clojure Dojo - Levenshtein edit distance</title>
      <link>http://localhost:1313/blog/2014/03/20/clojure-dojo---levenshtein-edit-distance/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/03/20/clojure-dojo---levenshtein-edit-distance/</guid>
      <description>

&lt;p&gt;I have been playing around with Clojure and after familiarising myself with the core, I decided to start writing little programs that forces me to choose the right idioms. I am starting off with Levenshtein edit distance of two strings.&lt;/p&gt;

&lt;h3 id=&#34;levenshtein-edit-distance:d5d4c3a7257ad508bc68cd569fb16682&#34;&gt;Levenshtein edit distance&lt;/h3&gt;

&lt;p&gt;Levenshtein edit distance between two string is a way of quantifying how similar or dissimilar they are, lower distance implying higher similarity. The algorithm to calculate Levenshtein distance is fairly simple - the algorithm cares about three operations that can be performed at a particular position in a string to move it towards the other - insertion, deletion and substitution.&lt;/p&gt;

&lt;p&gt;This can be recursively solved for two strings &lt;code&gt;A0:AS&lt;/code&gt; and &lt;code&gt;B0:BS&lt;/code&gt; by comparing &lt;code&gt;AS&lt;/code&gt;, &lt;code&gt;B0:BS&lt;/code&gt;; &lt;code&gt;A0:AS&lt;/code&gt;, &lt;code&gt;BS&lt;/code&gt; and &lt;code&gt;AS&lt;/code&gt;, &lt;code&gt;BS&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&#34;code:d5d4c3a7257ad508bc68cd569fb16682&#34;&gt;Code&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns clojure_dojo.core)

(defn edit-distance
  &amp;quot;Return the Levenshtein edit distance between two strings&amp;quot;
  [first second]
  (cond
   (empty? first) (count second)
   (empty? second) (count first)
   :else (min (+ 1 (edit-distance (drop 1 first) second))
              (+ 1 (edit-distance first (drop 1 second)))
              (+ (cond
                  (= (take 1 first) (take 1 second)) 0
                  :else 1)
                 (edit-distance (drop 1 first) (drop 1 second))))))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;test:d5d4c3a7257ad508bc68cd569fb16682&#34;&gt;Test&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-clojure&#34;&gt;(ns clojure_dojo.t-core
  (:use midje.sweet)
  (:use [clojure_dojo.core]))

(facts &amp;quot;about `edit-distance`&amp;quot;
       (fact &amp;quot;it returns length of other string if one string is empty&amp;quot;
             (edit-distance &amp;quot;foo&amp;quot; &amp;quot;&amp;quot;) =&amp;gt; 3
             (edit-distance &amp;quot;&amp;quot; &amp;quot;foo&amp;quot;) =&amp;gt; 3)
       (fact &amp;quot;detects deletions&amp;quot;
             (edit-distance &amp;quot;foo&amp;quot; &amp;quot;oo&amp;quot;) =&amp;gt; 1)
       (fact &amp;quot;detects substitutions&amp;quot;
             (edit-distance &amp;quot;ab&amp;quot;, &amp;quot;cd&amp;quot;) =&amp;gt; 2)
       (fact &amp;quot;detects additions needed&amp;quot;
             (edit-distance &amp;quot;oo&amp;quot;, &amp;quot;foo&amp;quot;) =&amp;gt; 1
             (edit-distance &amp;quot;kit&amp;quot;, &amp;quot;sitting&amp;quot;) =&amp;gt; 5
             (edit-distance &amp;quot;intention&amp;quot;, &amp;quot;execution&amp;quot;) =&amp;gt; 5
             (edit-distance &amp;quot;sittin&amp;quot;, &amp;quot;sitting&amp;quot;) =&amp;gt; 1))
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;the-problem-with-this-approach:d5d4c3a7257ad508bc68cd569fb16682&#34;&gt;The problem with this approach&lt;/h3&gt;

&lt;p&gt;This solution looks fine - it passes the tests. However, if we carefully observe the recursion tree, we notice that there are sub-problems that are solved multiple times and this makes this algorithm&amp;rsquo;s order of complexity Î˜(3^min(m, n)). This can be observed from the call tree of this recursion.&lt;/p&gt;

&lt;h3 id=&#34;improvement:d5d4c3a7257ad508bc68cd569fb16682&#34;&gt;Improvement&lt;/h3&gt;

&lt;p&gt;Recursive algorithms of this nature can be improved in two ways - memoization during recursion or applying &lt;a href=&#34;https://en.wikipedia.org/wiki/Dynamic_programming&#34;&gt;Dynamic Programming&lt;/a&gt; in a bottom up manner. The next blog post in this series will deal with how these two approaches can be done in Clojure.&lt;/p&gt;

&lt;p&gt;The code for the above solution is on &lt;a href=&#34;https://github.com/sdqali/clojure-dojo&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>