<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Java on Sadique Ali</title>
    <link>http://sdqali.in/categories/java/</link>
    <description>Recent content in Java on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Thu, 10 Dec 2015 21:45:59 -0500</lastBuildDate>
    <atom:link href="http://sdqali.in/categories/java/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Integration testing challenges for non-web Spring applications</title>
      <link>http://sdqali.in/blog/2015/12/10/integration-testing-challenges-for-non-web-spring-applications/</link>
      <pubDate>Thu, 10 Dec 2015 21:45:59 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/10/integration-testing-challenges-for-non-web-spring-applications/</guid>
      <description>&lt;p&gt;We are building a command line data loader application at work that uses Spring. One of the things that I took us more time that it should have to figure out was how to write an integration test that invokes the command line application with the right command line arguments. This blog post describes this scenario and a potential solution to this problem.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s consider a simple command line application implemented using Spring Boot&amp;rsquo;s &lt;code&gt;CommandLineRunner&lt;/code&gt;. The main application class is fairly simple.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;
@Configuration
@EnableAutoConfiguration
@ComponentScan
public class Application implements CommandLineRunner {
    @Autowired
    DataService dataService;

    public static void main(String[] args) {
        SpringApplication.run(Application.class, args);
    }

    @Override
    public void run(String... args) {
        dataService.perform(args[0]);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;In addition to this, there is a configuration class &lt;code&gt;AppConfiguration&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Configuration
public class AppConfiguration {
    @Bean
    public DataService dataService() {
        return new DataService();
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;DataService&lt;/code&gt; simply prints the argument it receives.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class DataService {
    public void perform(String arg) {
        System.out.println(arg);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were to attempt writing an integration test for this application, it would look like this:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(SpringJUnit4ClassRunner.class)
@SpringApplicationConfiguration(classes = {Application.class})
public class ApplicationIntegrationTest {
    @Autowired
    private Application application;


    @Rule
    public OutputCapture outputCapture = new OutputCapture();

    @Test
    public void shouldGenerateResultFiles() throws Exception {
        application.run(&amp;quot;sampleOutPut&amp;quot;);
        assertTrue(outputCapture.toString().contains(&amp;quot;sampleOutput&amp;quot;));
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That test is straightforward—it loads the Spring context with all the beans, runs the application with parameters and expects the parameter to be printed to the console.&lt;/p&gt;

&lt;p&gt;Except, it does not work. If we were to execute the above test, we will get the following error:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;...
Caused by: java.lang.ArrayIndexOutOfBoundsException: 0
at in.sdqali.springapps.Application.run(Application.java:24) ~[main/:na]
...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;What happened? It looks like the &lt;code&gt;run&lt;/code&gt; method was called with out any arguments while the test configuration was loaded.&lt;/p&gt;

&lt;p&gt;Let‘s try and understand wh
y this happens. Remember how we annotated the test with &lt;code&gt;@SpringApplicationConfiguration&lt;/code&gt;? This annotation is a meta-annotation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1944f35ca6adb86a80e399600f75145d:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1944f35ca6adb86a80e399600f75145d:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; specified as:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ContextConfiguration(loader = SpringApplicationContextLoader.class)
@Documented
@Inherited
@Retention(RetentionPolicy.RUNTIME)
@Target(ElementType.TYPE)
public @interface SpringApplicationConfiguration {
...
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ContextConfiguration&lt;/code&gt; is an annotation that allows tests to specify the information used to load and configure the application context. From the Java doc for this annotation:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; * {@code @ContextConfiguration} defines class-level metadata that is used to determine
 * how to load and configure an {@link org.springframework.context.ApplicationContext
 * ApplicationContext} for integration tests.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This brings us to &lt;code&gt;SpringApplicationContextLoader&lt;/code&gt;‘s &lt;code&gt;loadContext&lt;/code&gt; method and buried deep inside are these line:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;application.setInitializers(initializers);
ConfigurableApplicationContext applicationContext = application.run();
return applicationContext;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;So, regardless of how many arguments our command line application was supposed to take, this loader always call the application without any arguments.&lt;/p&gt;

&lt;p&gt;There are two solutions I have been able to think of for this problem:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Override the&lt;code&gt;SpringApplicationContextLoader&lt;/code&gt; and pass the necessary arguments in &lt;code&gt;application.run()&lt;/code&gt;. This is definitely not an elegant or easy solution.&lt;/li&gt;
&lt;li&gt;Use an environment variable instead of the command line argument as the input to the service. This will allow us to inject this variable using the &lt;code&gt;@IntegrationTest&lt;/code&gt; annotation.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;My next blog post will discuss the second approach.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1944f35ca6adb86a80e399600f75145d:1&#34;&gt;Meta annotations. &lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-meta-annotations&#34;&gt;Spring documentation&lt;/a&gt;. To see how to use meta-annotations to write custom annoations, see &lt;a href=&#34;http://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/&#34;&gt;this blog post&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1944f35ca6adb86a80e399600f75145d:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Implementing custom annotations for Spring MVC</title>
      <link>http://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/</link>
      <pubDate>Sun, 06 Dec 2015 13:28:26 -0800</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/06/implementing-custom-annotations-for-spring-mvc/</guid>
      <description>&lt;p&gt;I often have to work with Spring MVC based code bases that have been living for a while. One of the common trait of these code bases I have observed is the repeated use of the same Spring annotations to achieve the same effect again and again. A really good example of this is annotating a controller method with a combination of &lt;code&gt;@RequestMapping&lt;/code&gt; and &lt;code&gt;@ResponseStatus&lt;/code&gt; to set the expected request and response &lt;code&gt;Content-Type&lt;/code&gt;, the request Method, response status etc. This blog post describes how to compose Spring annotations that produce the same effect as multiple Spring annotations acting together.&lt;/p&gt;

&lt;p&gt;Among the new things introduced in Spring 4 was the idea of meta-annotations. &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b72714563591dcee83238042a831f26c:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b72714563591dcee83238042a831f26c:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; Meta annotations are annotations that can act up on other annotations by modifying and overriding attributes of the target annotations.&lt;/p&gt;

&lt;p&gt;This allows us to build composed annotations &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:b72714563591dcee83238042a831f26c:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:b72714563591dcee83238042a831f26c:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; that combine the behavior of multiple annotations. The &lt;code&gt;@AliasFor&lt;/code&gt; annotation allows us to override attribute names, thereby adding great flexibility while composing.&lt;/p&gt;

&lt;p&gt;This is a common pattern in code bases that use Spring MVC.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @RequestMapping(path = &amp;quot;/register&amp;quot;,
            method = RequestMethod.POST,
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @ResponseStatus(HttpStatus.CREATED)
    public Map register(@RequestBody @Valid EmailRequest emailRequest) {
        return registrationService.register(emailRequest);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The two annotations as applied on this method represent the fact that this is an end point that a client can &lt;code&gt;POST&lt;/code&gt; JSON to and produces JSON and a &lt;code&gt;201 Created&lt;/code&gt; HTTP status when it succeeds. If we had 20 end points that did the similar operations, it would be really useful to have a &lt;code&gt;@PostJson&lt;/code&gt; annotation that did the same thing.&lt;/p&gt;

&lt;p&gt;The following is one way of writing such an annotation.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@Target(METHOD)
@Retention(RUNTIME)
@Documented
@RequestMapping(method = RequestMethod.POST,
        consumes = MediaType.APPLICATION_JSON_VALUE,
        produces = MediaType.APPLICATION_JSON_VALUE
)
@ResponseStatus(HttpStatus.CREATED)
public @interface PostJson {
    @AliasFor(annotation = RequestMapping.class, attribute = &amp;quot;path&amp;quot;)
    String[] path() default {};
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This annotation takes a single parameter &lt;code&gt;path&lt;/code&gt; that represents that URL path to which it will respond to. This can now be applied on the register end point.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @PostJson(path = &amp;quot;/register&amp;quot;)
    public Map register(@RequestBody @Valid EmailRequest emailRequest) {
        return registrationService.register(emailRequest);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we wanted to allow the consumers of &lt;code&gt;@PostJson&lt;/code&gt; to override other parameters of &lt;code&gt;@RequestMapping&lt;/code&gt; or &lt;code&gt;@ResponseStatus&lt;/code&gt;, it can be achieved by adding more aliases. For example, the following will allow users to specify a reason phrase.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @AliasFor(annotation = ResponseStatus.class, attribute = &amp;quot;reason&amp;quot;)
    String[] reason() default {};
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This pattern can easily be extended to introduce annotations like &lt;code&gt;@GetJson&lt;/code&gt;, &lt;code&gt;@PutJson&lt;/code&gt;, &lt;code&gt;@PostXml&lt;/code&gt; and so on and so forth.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:b72714563591dcee83238042a831f26c:1&#34;&gt;Meta annotations. &lt;a href=&#34;http://docs.spring.io/spring/docs/current/spring-framework-reference/html/beans.html#beans-meta-annotations&#34;&gt;Spring documentation&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b72714563591dcee83238042a831f26c:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:b72714563591dcee83238042a831f26c:2&#34;&gt;Composed annotations. &lt;a href=&#34;https://github.com/spring-projects/spring-framework/wiki/Spring-Annotation-Programming-Model#composed-annotations&#34;&gt;Spring documentation&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:b72714563591dcee83238042a831f26c:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Validating RequestParams and PathVariables in Spring MVC</title>
      <link>http://sdqali.in/blog/2015/12/04/validating-requestparams-and-pathvariables-in-spring-mvc/</link>
      <pubDate>Fri, 04 Dec 2015 22:50:24 -0800</pubDate>
      
      <guid>http://sdqali.in/blog/2015/12/04/validating-requestparams-and-pathvariables-in-spring-mvc/</guid>
      <description>&lt;p&gt;Spring MVC provides a convenient way to validate inputs to API end points through the use of &lt;code&gt;JSR-303&lt;/code&gt; annotations. While this mechanism works great for end points that consume a &lt;code&gt;RequestBody&lt;/code&gt; (as is the case with most &lt;code&gt;POST&lt;/code&gt; and &lt;code&gt;PUT&lt;/code&gt; requests), it is not easy to achieve the same effect for end points that consume primitives in the form of path variables or request parameters (as is the case with most &lt;code&gt;GET&lt;/code&gt; requests).&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at how to validate RequestBody inputs using JSR-303.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @RequestMapping(method = RequestMethod.POST,
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @ResponseStatus(HttpStatus.OK)
    public Map register(@RequestBody @Valid EmailRequest emailRequest) {
        return registrationService.register(emailRequest);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The value object &lt;code&gt;EmailRequest&lt;/code&gt; is annotated with the appropriate constraint annotations.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;public class EmailRequest {
    @Email
    public String email;

    private EmailRequest() {
    }

    public String getEmail() {
        return email;
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If we were to attempt a similar approach for a &lt;code&gt;GET&lt;/code&gt; end point that accepts a &lt;code&gt;RequestParam&lt;/code&gt;, the validation would simply not happen.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @RequestMapping(method = RequestMethod.GET,
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @ResponseStatus(HttpStatus.OK)
    public Map search(@Email
                   @Valid
                   @RequestParam(&amp;quot;email&amp;quot;)
                   String email) {
        return emailMessage(email);
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This is where Spring&amp;rsquo;s &lt;code&gt;@Validated&lt;/code&gt; annotation is useful. With &lt;code&gt;@Validated&lt;/code&gt;, we can validate request parameters and path variables.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController
@Validated
public class RegistrationController {
    @RequestMapping(method = RequestMethod.GET,
            consumes = MediaType.APPLICATION_JSON_VALUE,
            produces = MediaType.APPLICATION_JSON_VALUE
    )
    @ResponseStatus(HttpStatus.OK)
    public Map search(@Email
                   @RequestParam(&amp;quot;email&amp;quot;)
                   String email) {
        return emailMessage(email);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;An important thing to note here is that using &lt;code&gt;@Valid&lt;/code&gt; annotation results in &lt;code&gt;MethodArgumentNotValidException&lt;/code&gt; being thrown when validation fails, but &lt;code&gt;@Validated&lt;/code&gt; results in &lt;code&gt;ConstraintViolationException&lt;/code&gt; being thrown. Since these exceptions have different ways of abstracting the error messages associated with validation, it is important to have different error handlers for both of these. An example pattern using &lt;code&gt;ExceptionHandler&lt;/code&gt; will be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@ControllerAdvice
@Component
public class GlobalExceptionHandler {
    @ExceptionHandler
    @ResponseBody
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Map handle(MethodArgumentNotValidException exception) {
        return error(exception.getBindingResult().getFieldErrors()
                .stream()
                .map(FieldError::getDefaultMessage)
                .collect(Collectors.toList()));
    }


    @ExceptionHandler
    @ResponseBody
    @ResponseStatus(HttpStatus.BAD_REQUEST)
    public Map handle(ConstraintViolationException exception) {
        return error(exception.getConstraintViolations()
                .stream()
                .map(ConstraintViolation::getMessage)
                .collect(Collectors.toList()));
    }

    private Map error(Object message) {
        return Collections.singletonMap(&amp;quot;error&amp;quot;, message);
    }
}

&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Testing async responses using MockMvc</title>
      <link>http://sdqali.in/blog/2015/11/24/testing-async-responses-using-mockmvc/</link>
      <pubDate>Tue, 24 Nov 2015 05:45:06 -0500</pubDate>
      
      <guid>http://sdqali.in/blog/2015/11/24/testing-async-responses-using-mockmvc/</guid>
      <description>&lt;p&gt;There are times when a Spring MVC end point performs asynchronous operations. Testing these end points using MockMvc can be tricky because of the asynchronous nature in which the result of the operation is eventually returned. This blog post describes how to write tests in such scenarios.&lt;/p&gt;

&lt;p&gt;Let&amp;rsquo;s take a look at the following example. In this example, we have a simple end point that responds with a JSON object when invoked.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RestController
@RequestMapping(&amp;quot;/test&amp;quot;)
class ExampleController {
    @RequestMapping(value = &amp;quot;/hello&amp;quot;,
            method = GET,
            consumes = APPLICATION_JSON_VALUE,
            produces = APPLICATION_JSON_VALUE)
    @ResponseStatus(OK)
    public Map&amp;lt;String, Object&amp;gt; hello(){
        return helloMessage();
    }

    private Map&amp;lt;String, Object&amp;gt; helloMessage() {
        return Collections.singletonMap(&amp;quot;message&amp;quot;, &amp;quot;hello&amp;quot;);
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Writing a MockMvc test for this controller is fairly simple. The following test invokes the end point and asserts that the end point returns:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;The right HTTP response code &lt;code&gt;200&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The right Content-Type &lt;code&gt;application/json&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The right JSON message&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;@RunWith(MockitoJUnitRunner.class)
public class ExampleControllerTest {

    public static final String CONTENT_TYPE = &amp;quot;Content-Type&amp;quot;;
    private ExampleController controller;
    private MockMvc mockMvc;

    @Before
    public void setUp() {
        controller = new ExampleController();
        mockMvc = MockMvcBuilders
                .standaloneSetup(controller)
                .build();
    }

    @Test
    public void shouldHaveAMessageInResponse() throws Exception {
        mockMvc
                .perform(get(&amp;quot;/test/hello&amp;quot;)
                        .contentType(APPLICATION_JSON))
                .andDo(print())
                .andExpect(status().isOk())
                .andExpect(header().string(CONTENT_TYPE, APPLICATION_JSON_VALUE))
                .andExpect(jsonPath(&amp;quot;message&amp;quot;).value(&amp;quot;hello&amp;quot;));
    }
}

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Now, lets try and write a similar test for an end point uses &lt;code&gt;DeferredResult&lt;/code&gt; to do asynchronous request processing. The end point in this example just wraps the JSON structure in &lt;code&gt;DeferredResult&lt;/code&gt; and returns, whereas there will be a long running asynchronous process in a more useful case. But the idea remains the same.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @RequestMapping(value = &amp;quot;/deferred&amp;quot;,
            method = GET,
            consumes = APPLICATION_JSON_VALUE,
            produces = APPLICATION_JSON_VALUE
    )
    @ResponseStatus(OK)
    public DeferredResult&amp;lt;Map&amp;gt; deferred() {
        DeferredResult&amp;lt;Map&amp;gt; deferredResult = new DeferredResult&amp;lt;&amp;gt;();
        deferredResult.setResult(helloMessage());
        return deferredResult;
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;If our test for this end point were to use the same mechanism as the previous test, we will start observing an interesting error.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @Test
    public void shouldHaveAMessageInDeferredResponse() throws Exception {
        mockMvc
                .perform(get(&amp;quot;/test/deferred&amp;quot;)
                        .contentType(APPLICATION_JSON))
                .andExpect(status().isOk())
                .andExpect(header().string(CONTENT_TYPE, APPLICATION_JSON_VALUE))
                .andExpect(jsonPath(&amp;quot;message&amp;quot;).value(&amp;quot;hello&amp;quot;));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;Response header Content-Type expected:&amp;lt;application/json&amp;gt; but was:&amp;lt;null&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This happened because MockMvc did not wait for the asynchronous process to finish. The solution to this involves using MockMvc&amp;rsquo;s &lt;code&gt;asyncDispatch&lt;/code&gt;. AsyncDispatch creates a new request that continues from the result of a previous MockMvc request that started the asynchronous process.
The test re-written using &lt;code&gt;asyncDispatch&lt;/code&gt; would be as follows:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-java&#34;&gt;    @Test
    public void shouldHaveAMessageInDeferredResponseWithAsyncDispatch() throws Exception {
        MvcResult result = mockMvc
                .perform(get(&amp;quot;/test/deferred&amp;quot;)
                        .contentType(APPLICATION_JSON))
                .andReturn();

        mockMvc
                .perform(asyncDispatch(result))
                .andExpect(status().isOk())
                .andExpect(header().string(CONTENT_TYPE, APPLICATION_JSON_VALUE))
                .andExpect(jsonPath(&amp;quot;message&amp;quot;).value(&amp;quot;hello&amp;quot;));
    }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The same approach can be employed to test when controllers use Java 8&amp;rsquo;s &lt;code&gt;CompletableFuture&lt;/code&gt;.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Running multiple applications in the same Tomcat installation</title>
      <link>http://sdqali.in/blog/2015/06/09/running-multiple-applications-in-the-same-tomcat-installation/</link>
      <pubDate>Tue, 09 Jun 2015 01:11:05 -0400</pubDate>
      
      <guid>http://sdqali.in/blog/2015/06/09/running-multiple-applications-in-the-same-tomcat-installation/</guid>
      <description>

&lt;p&gt;This blog post describes how to set up Tomcat to run multiple applications running as separate JVM processes, using the same Tomcat installation. This method utilizes the &lt;code&gt;CATALINA_HOME&lt;/code&gt; and &lt;code&gt;CATALINA_BASE&lt;/code&gt; environment variables used by Tomcat. I have verified this method against Tomcat versions &lt;code&gt;8.0.x&lt;/code&gt;; other versions should work the same way.&lt;/p&gt;

&lt;h2 id=&#34;a-typical-tomcat-installation:a2ed05b8bb95da785f1e814e64b0e342&#34;&gt;A typical Tomcat installation&lt;/h2&gt;

&lt;p&gt;If we explode the Tomcat 8.0.23 &lt;a href=&#34;http://mirrors.sonic.net/apache/tomcat/tomcat-8/v8.0.23/bin/apache-tomcat-8.0.23.tar.gz&#34;&gt;tarball&lt;/a&gt;, we get the following directory structure:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ tar apache-tomcat-8.0.23.tar.gz

$ ls apache-tomcat-8.0.23/
LICENSE		RELEASE-NOTES	bin		lib		temp		work
NOTICE		RUNNING.txt	conf		logs		webapps
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This distribution, by default runs applications in a single JVM. How does it do this?&lt;/p&gt;

&lt;p&gt;Tomcat control scripts - &lt;code&gt;startup.sh&lt;/code&gt;, &lt;code&gt;shutdown.sh&lt;/code&gt;, &lt;code&gt;catalina.sh&lt;/code&gt; uses the environment variables &lt;code&gt;CATALINA_HOME&lt;/code&gt; and &lt;code&gt;CATALINA_BASE&lt;/code&gt; to locate binaries and configuration files.&lt;/p&gt;

&lt;p&gt;From the documentaion inside &lt;code&gt;catalina.sh&lt;/code&gt; under &lt;code&gt;apache-tomcat-8.0.23/bin/&lt;/code&gt; we can see that:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#   CATALINA_HOME   May point at your Catalina &amp;quot;build&amp;quot; directory.
#
#   CATALINA_BASE   (Optional) Base directory for resolving dynamic portions
#                   of a Catalina installation.  If not present, resolves to
#                   the same directory that CATALINA_HOME points to.

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This allows us to separate the &lt;code&gt;CATALINA_HOME&lt;/code&gt; and &lt;code&gt;CATALINA_BASE&lt;/code&gt; directories. The Tomcat binaries and scripts need to be inside &lt;code&gt;CATALINA_HOME&lt;/code&gt; and our first application can deploy itself to &lt;code&gt;CATALINA_BASE&lt;/code&gt;.&lt;/p&gt;

&lt;h2 id=&#34;separating-catalina-home-and-catalina-base:a2ed05b8bb95da785f1e814e64b0e342&#34;&gt;Separating CATALINA_HOME and CATALINA_BASE&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;app1&lt;/code&gt; directory will have the following directories:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ls -a app1/
.	..	bin	conf	logs	temp	webapps	work
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;bin&lt;/code&gt; directory will have the &lt;code&gt;setenv.sh&lt;/code&gt; script used to set additional environment variables for the application.&lt;/p&gt;

&lt;p&gt;The &lt;code&gt;tomcat&lt;/code&gt; directory will have the following directories:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ ls tomcat/
LICENSE		NOTICE		RELEASE-NOTES	RUNNING.txt	bin		lib
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The &lt;code&gt;bin&lt;/code&gt; directory will have the Tomcat management scripts like &lt;code&gt;startup.sh&lt;/code&gt;, &lt;code&gt;shutdown.sh&lt;/code&gt;, &lt;code&gt;catalina.sh&lt;/code&gt; etc.&lt;/p&gt;

&lt;p&gt;Now we can start &lt;code&gt;app1&lt;/code&gt; by pointing &lt;code&gt;CATALINA_BASE&lt;/code&gt; to &lt;code&gt;app1&lt;/code&gt; and &lt;code&gt;CATALINA_HOME&lt;/code&gt; to &lt;code&gt;tomcat&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ export CATALINA_HOME=/Users/sdqali/src/sandbox/tomcat

$ export CATALINA_BASE=/Users/sdqali/src/sandbox/app1

$ $CATALINA_HOME/bin/startup.sh

$ $CATALINA_HOME/bin/startup.sh
Using CATALINA_BASE:   /Users/sdqali/src/sandbox/app1
Using CATALINA_HOME:   /Users/sdqali/src/sandbox/tomcat
Using CATALINA_TMPDIR: /Users/sdqali/src/sandbox/app1/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home
Using CLASSPATH:       /Users/sdqali/src/sandbox/tomcat/bin/bootstrap.jar:/Users/sdqali/src/sandbox/tomcat/bin/tomcat-juli.jar
Tomcat started.

$ curl -s -D - -o /dev/null http://127.0.0.1:8080
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=UTF-8
Transfer-Encoding: chunked
Date: Tue, 09 Jun 2015 07:37:43 GMT
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Let&amp;rsquo;s try and deploy a second application &lt;code&gt;app2&lt;/code&gt; running on port &lt;code&gt;9090&lt;/code&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;
$ export CATALINA_HOME=/Users/sdqali/src/sandbox/tomcat

$ export CATALINA_BASE=/Users/sdqali/src/sandbox/app2

$ $CATALINA_HOME/bin/startup.sh
Using CATALINA_BASE:   /Users/sdqali/src/sandbox/app2
Using CATALINA_HOME:   /Users/sdqali/src/sandbox/tomcat
Using CATALINA_TMPDIR: /Users/sdqali/src/sandbox/app2/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home
Using CLASSPATH:       /Users/sdqali/src/sandbox/tomcat/bin/bootstrap.jar:/Users/sdqali/src/sandbox/tomcat/bin/tomcat-juli.jar
Tomcat started.

$ curl -s -D - -o /dev/null http://127.0.0.1:9090
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=UTF-8
Transfer-Encoding: chunked
Date: Tue, 09 Jun 2015 07:41:02 GMT
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;tying-it-all-together:a2ed05b8bb95da785f1e814e64b0e342&#34;&gt;Tying it all together&lt;/h2&gt;

&lt;p&gt;At this point, it is useful to create management scripts that abstract away the environment variables and allows for starting up and shutting down applications individually. The &lt;code&gt;start.sh&lt;/code&gt; script will be as follows.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env sh

# start.sh
# Script to start a Tomcat application

show_usage() {
    echo &amp;quot;Usage: ./start.sh &amp;lt;app-name&amp;gt;&amp;quot;;
    exit 1;
}

declare app_name=$1;
[[ -z $app_name ]] &amp;amp;&amp;amp; show_usage;


declare INSTALL_BASE=/Users/sdqali/src/sandbox

export CATALINA_HOME=$INSTALL_BASE/tomcat
export CATALINA_BASE=$INSTALL_BASE/$app_name

$CATALINA_HOME/bin/startup.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Similarly, the &lt;code&gt;stop.sh&lt;/code&gt; script will be:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;#!/usr/bin/env sh

# stop.sh
# Script to stop a Tomcat application

show_usage() {
    echo &amp;quot;Usage: ./stop.sh &amp;lt;app-name&amp;gt;&amp;quot;;
    exit 1;
}

declare app_name=$1;
[[ -z $app_name ]] &amp;amp;&amp;amp; show_usage;


declare INSTALL_BASE=/Users/sdqali/src/sandbox

export CATALINA_HOME=$INSTALL_BASE/tomcat
export CATALINA_BASE=$INSTALL_BASE/$app_name

$CATALINA_HOME/bin/shutdown.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;We can manage individual applications using these scripts:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ ./management/start.sh app2
Using CATALINA_BASE:   /Users/sdqali/src/sandbox/app2
Using CATALINA_HOME:   /Users/sdqali/src/sandbox/tomcat
Using CATALINA_TMPDIR: /Users/sdqali/src/sandbox/app2/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home
Using CLASSPATH:       /Users/sdqali/src/sandbox/tomcat/bin/bootstrap.jar:/Users/sdqali/src/sandbox/tomcat/bin/tomcat-juli.jar
Tomcat started.

$ nc -z  127.0.0.1 9090
Connection to 127.0.0.1 port 9090 [tcp/websm] succeeded!

$ curl -s -D - -o /dev/null http://127.0.0.1:9090
HTTP/1.1 200 OK
Server: Apache-Coyote/1.1
Content-Type: text/html;charset=UTF-8
Transfer-Encoding: chunked
Date: Tue, 09 Jun 2015 08:16:05 GMT


$ ./management/stop.sh app2
Using CATALINA_BASE:   /Users/sdqali/src/sandbox/app2
Using CATALINA_HOME:   /Users/sdqali/src/sandbox/tomcat
Using CATALINA_TMPDIR: /Users/sdqali/src/sandbox/app2/temp
Using JRE_HOME:        /Library/Java/JavaVirtualMachines/jdk1.8.0_45.jdk/Contents/Home
Using CLASSPATH:       /Users/sdqali/src/sandbox/tomcat/bin/bootstrap.jar:/Users/sdqali/src/sandbox/tomcat/bin/tomcat-juli.jar

$ nc -z  127.0.0.1 9090

$ curl -v http://127.0.0.1:9090
* Rebuilt URL to: http://127.0.0.1:9090/
* Hostname was NOT found in DNS cache
*   Trying 127.0.0.1...
* connect to 127.0.0.1 port 9090 failed: Connection refused
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>