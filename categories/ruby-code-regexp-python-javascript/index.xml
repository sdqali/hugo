<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ruby Code Regexp Python Javascript on Sadique Ali</title>
    <link>http://sdqali.in/categories/ruby-code-regexp-python-javascript/</link>
    <description>Recent content in Ruby Code Regexp Python Javascript on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 29 Sep 2013 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://sdqali.in/categories/ruby-code-regexp-python-javascript/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Named Capture Groups in Regular Expressions</title>
      <link>http://sdqali.in/blog/2013/09/29/named-capture-groups-in-regular-expressions/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://sdqali.in/blog/2013/09/29/named-capture-groups-in-regular-expressions/</guid>
      <description>

&lt;p&gt;I will admit that I find regular expressions somewhat hard to parse. While the thinking process needed to write a regular expression is iterative and hence results in the correct expression suitable for the situation, once it is written it lacks readability. I have faced that pain of trying to grok a complex regular expression written years ago. So I was pleasantly surprised when I saw &lt;a href=&#34;https://news.ycombinator.com/item?id=6463144&#34;&gt;this example&lt;/a&gt; from Hacker News user &lt;em&gt;WestCoastJustin&lt;/em&gt;. I found it very easy to understand because of the names he had assigned to each capture group in the expression.&lt;/p&gt;

&lt;h2 id=&#34;ruby&#34;&gt;Ruby&lt;/h2&gt;

&lt;p&gt;Ruby has supported named capture groups since version 1.9. Each match group is named by using &lt;code&gt;?&amp;lt;name&amp;gt;&lt;/code&gt; inside the match group and these matches are made available has a hash and each match can be accessed by using the match group name as the key.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;WestCoastJustin&lt;/em&gt;&amp;rsquo;s example will look like this in Ruby:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

test_string &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Today&amp;#39;s date is: 9/28/2013.&amp;quot;&lt;/span&gt;

match &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; test_string&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;match &lt;span style=&#34;color: #33AAAA&#34;&gt;/(?&amp;lt;month&amp;gt;\d{1,2})\/(?&amp;lt;day&amp;gt;\d{1,2})\/(?&amp;lt;year&amp;gt;\d{4})/&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;puts&lt;/span&gt; match&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;inspect
&lt;span style=&#34;color: #336666&#34;&gt;puts&lt;/span&gt; match&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #FFCC33&#34;&gt;:month&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;puts&lt;/span&gt; match&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #FFCC33&#34;&gt;:day&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;puts&lt;/span&gt; match&lt;span style=&#34;color: #555555&#34;&gt;[&lt;/span&gt;&lt;span style=&#34;color: #FFCC33&#34;&gt;:year&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;]&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is much easier to understand because looking at it, it makes it clear that the intent of matching the first group of 1 or 2 digits is to look for the &lt;strong&gt;month&lt;/strong&gt; in the date. Similarly, the intent of the &lt;em&gt;day&lt;/em&gt; and &lt;em&gt;year&lt;/em&gt; matches are easier to understand.&lt;/p&gt;

&lt;p&gt;This will result in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; ruby /tmp/named_matches.rb
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#&amp;lt;MatchData &amp;quot;9/28/2013&amp;quot; month:&amp;quot;9&amp;quot; day:&amp;quot;28&amp;quot; year:&amp;quot;2013&amp;quot;&amp;gt;&lt;/span&gt;
9
28
2013
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;##Python
Python&amp;rsquo;s &lt;code&gt;re&lt;/code&gt; module supports named match groups using the &lt;code&gt;?P&amp;lt;name&amp;gt;&lt;/code&gt; pattern. After a pattern search, the results are placed in a &lt;code&gt;dict&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#!/usr/bin/env ruby&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;re&lt;/span&gt;

test_string &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Today&amp;#39;s date is: 9/28/2013.&amp;quot;&lt;/span&gt;
pattern &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; re&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;compile(&lt;span style=&#34;color: #CC3300&#34;&gt;r&amp;quot;(?P&amp;lt;month&amp;gt;\d{1,2})\/(?P&amp;lt;day&amp;gt;\d{1,2})\/(?P&amp;lt;year&amp;gt;\d{4})&amp;quot;&lt;/span&gt;)
match_dict &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; pattern&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;search(test_string)&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;groupdict()
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt;(match_dict)
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;JavaScript does not support named capture groups. There are a lot of &lt;a href=&#34;http://trentrichardson.com/2011/08/02/javascript-regexp-match-named-captures/&#34;&gt;hacks&lt;/a&gt; aimed at providing this functionality. The XRegExp library &lt;a href=&#34;http://xregexp.com/syntax/#namedCapture&#34;&gt;supports&lt;/a&gt; named capture groups.&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>