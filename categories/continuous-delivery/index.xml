<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Continuous Delivery on {code that works}</title>
    <link>https://sdqali.in/categories/continuous-delivery/</link>
    <description>Recent content in Continuous Delivery on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Fri, 03 Feb 2012 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://sdqali.in/categories/continuous-delivery/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Bullet proof Jenkins setup</title>
      <link>https://sdqali.in/blog/2012/02/03/bullet-proof-jenkins-setup/</link>
      <pubDate>Fri, 03 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/02/03/bullet-proof-jenkins-setup/</guid>
      <description>&lt;p&gt;In this post, I will describe how a neat setup and some discipline will ensure a Jenkins that can be rolled back and recreated very easily - a bullet proof Jenkins setup.  I have been working on configuring our Jenkins instance. This was the first time I had played around with Jenkins. I am fairly comfortable with &lt;a href=&#34;http://www.thoughtworks-studios.com/go-agile-release-management&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; from ThoughtWorks Studios. All of my past teams used Go as their tool for continuous delivery.&lt;/p&gt;

&lt;p&gt;One of the things I found very different from Go in Jenkins is the absence of the notion of a Pipeline as the basic entity of build, as proposed in &lt;a href=&#34;http://continuousdelivery.com/&#34; target=&#34;_blank&#34;&gt;Continuous Delivery&lt;/a&gt;. Although there are plugins to make this available in Jenkins, we decided to go with Jenkins&amp;rsquo; model of Jobs.&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>