<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>{code that works}</title>
    <link>https://sdqali.in/categories/emacs/index.xml</link>
    <description>Recent content on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://sdqali.in/categories/emacs/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Navigating Stacktraces in Emacs</title>
      <link>https://sdqali.in/blog/2013/08/22/navigating-stacktraces-in-emacs/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/08/22/navigating-stacktraces-in-emacs/</guid>
      <description>&lt;p&gt;I had to debug an issue today and that meant dealing with Rails stack traces. I got tired of having to constantly switch between reading the trace in the terminal and the code in Emacs to figure out what was going wrong and get more context around it. I felt that there should be an easier way of doing this. A quick search &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; did not yield anything. But then I remembered Grep mode &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and it occurred to me that hijacking Grep mode&amp;rsquo;s navigation feature would let me navigate the stack trace better. This is the solution I came up with.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Open the log in a buffer.&lt;/li&gt;
&lt;li&gt;Replace any leading file paths in the logs with the appropriate path for your local copy of the code. In the following case, I would replace all &lt;code&gt;/opt/thoughtworks/mingle&lt;/code&gt; with empty string &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;.
&lt;code&gt;bash
/opt/thoughtworks/mingle/app/models/foo.rb:46:in &#39;compare_bar&#39;
/opt/thoughtworks/mingle/app/controllers/foos_controller.rb:42:in &#39;validate_bar&#39;
...
&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;Load the Grep mode with &lt;code&gt;M-x grep-mode&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Now I can easily press &lt;code&gt;Enter&lt;/code&gt; on the lines of the stack trace and Emacs will navigate to the correct source file and line number.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;I almost wrote &amp;ldquo;quick google&amp;rdquo;, but then remembered that I no longer use Google that much. &lt;a href=&#34;http://duckduckgo.com&#34;&gt;DuckDuckGo&lt;/a&gt; has been my preferred search engine for a while.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Grep mode is an Emacs mode used by the &lt;a href=&#34;http://www.emacswiki.org/emacs/GrepMode&#34;&gt;Grep&lt;/a&gt; command to display the results of a search. It populates the buffer with file paths and line numbers that let the user navigate to lines in the code base.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Typically logs are long and you may want to use &lt;code&gt;replace-string&lt;/code&gt; instead of the default &lt;code&gt;query-replace&lt;/code&gt; for searching and replacing text. The former replaces strings without asking for confirmation while the latter asks you to confirm each replace operation. The latter has it&amp;rsquo;s use, but this use case calls for the former.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Validating JSON in Emacs</title>
      <link>https://sdqali.in/blog/2013/07/31/validating-json-in-emacs/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/07/31/validating-json-in-emacs/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;validate&#34; name=&#34;keywords&#34;&gt;
At work, I have to deal with Amazon CloudFormation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; templates a fair bit. These templates are JSON files. More and more members of our team are moving away from TextMate to Emacs which makes me really happy. We would like to validate these CloudFormation templates in Emacs. Today we set this up and I hope this turns out to be of help to some one else trying to do the same.&lt;/p&gt;

&lt;p&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Grab jsonlint. It is a command line utility that validates JSON. There seems to be two flavors of jsonlint available. A pure JavaScript implementation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; that runs on the Node.js runtime and a native Mac OS X &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; version. We use the Node.js version.&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Ensure that your Emacs can find the jsonlint binary. This can be done by adding the following snippet in your Emacs configuration:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;setenv&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;PATH&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #003333&#34;&gt;concat&lt;/span&gt; (&lt;span style=&#34;color: #003333&#34;&gt;getenv&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;PATH&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;:/usr/local/share/npm/bin&amp;quot;&lt;/span&gt;))
(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;exec-path&lt;/span&gt; (&lt;span style=&#34;color: #336666&#34;&gt;append&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;exec-path&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/usr/local/share/npm/bin&amp;quot;&lt;/span&gt;)))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Of course, the path you add will depend on where your installation process put the binary.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Install &lt;code&gt;flymake-json&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt;, using your Emacs package manager.&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Bind a key to &lt;code&gt;flymake-json-load&lt;/code&gt; which is the command to perform jsonlint on the current file. This can be done with the following snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;global-set-key&lt;/span&gt; (&lt;span style=&#34;color: #003333&#34;&gt;kbd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;C-c j v&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;flymake-json-load&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Enjoy!&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://aws.amazon.com/cloudformation/&#34;&gt;CloudFormation&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;&lt;a href=&#34;https://github.com/zaach/jsonlint&#34;&gt;zaach/jsonlint&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;&lt;a href=&#34;https://github.com/atomicbird/jsonlint&#34;&gt;atomicbird/jsonlint&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:4&#34;&gt;&lt;a href=&#34;http://marmalade-repo.org/packages/flymake-json&#34;&gt;A flymake handler for json using jsonlint&lt;/a&gt;
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:4&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Emacs hack: Viewing Git logs while composing commit messages</title>
      <link>https://sdqali.in/blog/2013/04/29/emacs-hack-viewing-git-logs-while-composing-commit-messages/</link>
      <pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/04/29/emacs-hack-viewing-git-logs-while-composing-commit-messages/</guid>
      <description>&lt;p&gt;I use Emacs as my editor to compose Git commit messages. I almost never commit from the terminal with &lt;code&gt;git commit -m&lt;/code&gt;. This approach has two advantages: I get a chance to verify what is being committed and get to compose the message using a proper editor complete with spell checking provided by &lt;em&gt;flyspell mode&lt;/em&gt;. One thing I wish I had access to while composing commit messages is the git log. This is useful to refer to work items and encourages one to use a consistent style in the messages. This was easier in the terminal as one could do something like &lt;code&gt;git log -n 3&lt;/code&gt; and then commit with the &lt;code&gt;-m&lt;/code&gt; flag.&lt;/p&gt;

&lt;p&gt;I decided to fix this today and some tinkering later came up with a hack tp do this.&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Git commit messages are stored in the &lt;code&gt;COMMIT_EDITMSG&lt;/code&gt; file under &lt;code&gt;.git/&lt;/code&gt;. So the first thing to do is to ensure that this file always gets loaded with a custom minor mode. This can be done as follows:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;\\COMMIT_EDITMSG\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;load-magit-log-when-committing-mode&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The minor mode does not need to do anything. The definition would be like this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;define-minor-mode&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;load-magit-log-when-committing-mode&lt;/span&gt;
  &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;Next step is to add a custom hook that gets run after loading the minor mode. This hook calls the function to load git logs. The code for this is:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;add-hook&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;load-magit-log-when-committing-mode-hook&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;show-magit-log-hook&lt;/span&gt;)
&lt;/pre&gt;&lt;/div&gt;

&lt;ul&gt;
&lt;li&gt;The actual function to load git logs. It calls &lt;code&gt;magit-log&lt;/code&gt; to load the logs and then opens the original &lt;code&gt;COMMIT_EDITMSG&lt;/code&gt; in the other frame.&lt;/li&gt;
&lt;/ul&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;defun&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;show-magit-log-hook&lt;/span&gt; ()
  (&lt;span style=&#34;color: #003333&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;)
  (&lt;span style=&#34;color: #003333&#34;&gt;magit-log&lt;/span&gt;)
  (&lt;span style=&#34;color: #003333&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;COMMIT_EDITMSG&amp;quot;&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is how Emacs looks while committing with this hack in place:&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://sdqali.in/images/screenshot_git_commit_log.png&#34; alt=&#34;&amp;quot;Screenshot showing git commit log&amp;quot;&#34; title=&#34;Screenshot showing git commit log&#34; /&gt;&lt;/p&gt;

&lt;p&gt;If you want to use this, copy the following snippet to your &lt;code&gt;init.el&lt;/code&gt;.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; load-magit-log-when-committing-mode&lt;/span&gt;
(&lt;span style=&#34;color: #003333&#34;&gt;define-minor-mode&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;load-magit-log-when-committing-mode&lt;/span&gt;
  &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;dummy&amp;quot;&lt;/span&gt;)

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; the hook&lt;/span&gt;
(&lt;span style=&#34;color: #336666&#34;&gt;defun&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;show-magit-log-hook&lt;/span&gt; ()
  (&lt;span style=&#34;color: #003333&#34;&gt;cd&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;..&amp;quot;&lt;/span&gt;)
  (&lt;span style=&#34;color: #003333&#34;&gt;magit-log&lt;/span&gt;)
  (&lt;span style=&#34;color: #003333&#34;&gt;switch-to-buffer-other-window&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;COMMIT_EDITMSG&amp;quot;&lt;/span&gt;))

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; add the hook&lt;/span&gt;
(&lt;span style=&#34;color: #003333&#34;&gt;add-hook&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;load-magit-log-when-committing-mode-hook&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;show-magit-log-hook&lt;/span&gt;)

&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;;; load the mode for commit message&lt;/span&gt;
(&lt;span style=&#34;color: #003333&#34;&gt;add-to-list&lt;/span&gt; &lt;span style=&#34;color: #FFCC33&#34;&gt;&amp;#39;auto-mode-alist&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;\\COMMIT_EDITMSG\\&amp;#39;&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;load-magit-log-when-committing-mode&lt;/span&gt;))
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Configure Git&#39;s comment character</title>
      <link>https://sdqali.in/blog/2013/04/14/configure-gits-comment-character/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/04/14/configure-gits-comment-character/</guid>
      <description>&lt;p&gt;TL;DR -
Use the &lt;code&gt;core.commentchar&lt;/code&gt; configuration to change the character Git uses to mark comment lines in commit messages.&lt;/p&gt;

&lt;p&gt;My team has a convention of putting the number of the current Issue/Ticket/Story that we are working on at the beginning of every commit message. This is great because it lets us make sense of the history of our code by helping us answer&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;What were the changes made to the code base to build a feature or fix an issue?&lt;/li&gt;
&lt;li&gt;Given a changeset, why was it put in place?&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;We use the format &lt;code&gt;#123 Foo bar&lt;/code&gt; for the message where &lt;code&gt;123&lt;/code&gt; is the issue number because it lets &lt;a href=&#34;http://www.thoughtworks-studios.com/mingle&#34;&gt;Mingle&lt;/a&gt;, our project management tool track the commits made against each card.&lt;/p&gt;

&lt;p&gt;Things work fine, except for me. I almost never use &lt;code&gt;git ci -m&lt;/code&gt;. I like Git to open up an editor (almost always Emacs), and type my comment message out. But if I type the commit message according to the convention, because the line starts with a &lt;code&gt;#&lt;/code&gt;, Git would treat it as a comment and the commit will be aborted.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;#123 Foobar
# Please enter the commit message for your changes. Lines starting
# with &amp;#39;#&amp;#39; will be ignored, and an empty message aborts the commit.
# On branch source
#
# Changes to be committed:
#   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I have been getting around this issue by pre-pending a space before the message. So I was really happy to see that Git &lt;code&gt;1.8.2&lt;/code&gt; ships with a new configuration &lt;code&gt;core.commentchar&lt;/code&gt;. This let&amp;rsquo;s you configure the characters that marks a comment in the commit message. From the &lt;a href=&#34;http://git-scm.com/docs/git-config&#34;&gt;doc&lt;/a&gt;:
&amp;gt; core.commentchar
&amp;gt;
&amp;gt;    Commands such as commit and tag that lets you edit messages consider a line that begins with this character commented, and removes them after the editor returns (default #).&lt;/p&gt;

&lt;p&gt;So with this set to &lt;code&gt;$&lt;/code&gt;, I can just type in my commit message.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;#123 Foobar
$ Please enter the commit message for your changes. Lines starting
$ with &amp;#39;$&amp;#39; will be ignored, and an empty message aborts the commit.
$ On branch source
$
$ Changes to be committed:
$   (use &amp;quot;git reset HEAD &amp;lt;file&amp;gt;...&amp;quot; to unstage)
...
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This configuration is available only in versions &lt;code&gt;1.8.2&lt;/code&gt; and later.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Reducing Emacs startup time while committing</title>
      <link>https://sdqali.in/blog/2013/01/22/reducing-emacs-startup-time-while-committing/</link>
      <pubDate>Tue, 22 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/01/22/reducing-emacs-startup-time-while-committing/</guid>
      <description>

&lt;p&gt;I use Emacs as my primary text editor and I use it to edit
commit messages for Git. I almost never use the &lt;code&gt;-m&lt;/code&gt;
option with &lt;code&gt;git commit&lt;/code&gt;. Since I have a fairly customised Emacs
configuration based around Sam Aaron&amp;rsquo;s
&lt;a href=&#34;https://github.com/overtone/emacs-live&#34;&gt;Emacs Live&lt;/a&gt;, this means that
for every commit, there is a visible delay for Emacs to start up for the
commit message. I was looking for ways to reduce this and figured out that
running Emacs in &lt;code&gt;daemon&lt;/code&gt; mode and using &lt;code&gt;emacsclient&lt;/code&gt; as the
&lt;code&gt;GIT_EDITOR&lt;/code&gt; would solve this.&lt;/p&gt;

&lt;h1 id=&#34;running-an-emacs-daemon-at-start-up-on-mac-os-x&#34;&gt;Running an Emacs daemon at start up on Mac OS X&lt;/h1&gt;

&lt;p&gt;The recommended way of running an application at start up on Mac OS X is
to use &lt;a href=&#34;http://en.wikipedia.org/wiki/Launchd&#34;&gt;launchd&lt;/a&gt;. Launchd
configurations are written as XML files created in
&lt;code&gt;~/Library/LaunchAgents&lt;/code&gt; or &lt;code&gt;/Library/LaunchAgents&lt;/code&gt; depending on whether
the app needs to be run for the current user or for all users.
Here is the plist file for Emacs at &lt;code&gt;~/Library/LaunchAgents/gnu.emacs.daemon.plist&lt;/code&gt;, taken from
&lt;a href=&#34;http://www.emacswiki.org/emacs/EmacsAsDaemon&#34;&gt;EmacsWiki&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #009999&#34;&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; encoding=&amp;quot;UTF-8&amp;quot;?&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #009999&#34;&gt;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #009999&#34;&gt;&amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;plist&lt;/span&gt; &lt;span style=&#34;color: #330099&#34;&gt;version=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;1.0&amp;quot;&lt;/span&gt;&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;dict&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;Label&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;gnu.emacs.daemon&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ProgramArguments&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;array&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;/Applications/Emacs.app/Contents/MacOS/Emacs&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
      &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;--daemon&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/array&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;RunAtLoad&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;true/&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;ServiceDescription&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;Gnu Emacs Daemon&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;key&amp;gt;&lt;/span&gt;UserName&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/key&amp;gt;&lt;/span&gt;
    &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;string&amp;gt;&lt;/span&gt;YOUR USER NAME&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/string&amp;gt;&lt;/span&gt;
  &lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/dict&amp;gt;&lt;/span&gt;
&lt;span style=&#34;color: #330099; font-weight: bold&#34;&gt;&amp;lt;/plist&amp;gt;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;This is loaded by running&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sudo launchctl load -w ~/Library/LaunchAgents/gnu.emacs.daemon.plist
&lt;/pre&gt;&lt;/div&gt;

&lt;h1 id=&#34;using-emacs-client-as-the-editor&#34;&gt;Using Emacs client as the editor&lt;/h1&gt;

&lt;p&gt;This is done by adding&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;EDITOR&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;export&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;GIT_EDITOR&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/Applications/Emacs.app/Contents/MacOS/bin/emacsclient&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;to &lt;code&gt;.zshrc&lt;/code&gt; or &lt;code&gt;.bashrc&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;This setup significantly reduces the Emacs startup time while committing
changes.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Fixing Flyspell for Emacs in Mac OS X</title>
      <link>https://sdqali.in/blog/2012/05/04/fixing-flyspell-for-emacs-in-mac-os-x/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/05/04/fixing-flyspell-for-emacs-in-mac-os-x/</guid>
      <description>

&lt;p&gt;I use the &lt;a href=&#34;http://www.emacswiki.org/emacs/FlySpell&#34;&gt;flyspell-mode&lt;/a&gt; as a spell checking mechanism in emacs. Recently, I moved to Mac OS X, and I began to get this error whenever I started emacs:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;Error enabling Flyspell mode:
&lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;Searching &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;for&lt;/span&gt; program No such file or directory aspell&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;I had installed aspell with Homebrew. The issue seemed to be that Emacs was unable to find the aspell binary. Homebrew installs binaries in &lt;strong&gt;/usr/local/bin&lt;/strong&gt; and it was in my $PATH. It turns out Emacs uses it&amp;rsquo;s own exec path to look for binaries to execute in sub-processes. So the fix is to add the &lt;strong&gt;/usr/local/bin&lt;/strong&gt; path to the exec-path. This is the change needed to the &lt;strong&gt;~/.emacs&lt;/strong&gt; file:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;exec-path&lt;/span&gt; (&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;quote&lt;/span&gt; (&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/usr/bin&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/bin&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/usr/sbin&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/sbin&amp;quot;&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/usr/local/bin&amp;quot;&lt;/span&gt;))))
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice the &lt;strong&gt;/usr/local/bin&lt;/strong&gt; in there.&lt;/p&gt;

&lt;h2 id=&#34;update&#34;&gt;Update&lt;/h2&gt;

&lt;p&gt;This does not seem to work. A better way to do this is to add the
following:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;(&lt;span style=&#34;color: #003333&#34;&gt;setenv&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;PATH&amp;quot;&lt;/span&gt; (&lt;span style=&#34;color: #003333&#34;&gt;concat&lt;/span&gt; (&lt;span style=&#34;color: #003333&#34;&gt;getenv&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;PATH&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;:/usr/local/bin&amp;quot;&lt;/span&gt;))
(&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;setq&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;exec-path&lt;/span&gt; (&lt;span style=&#34;color: #336666&#34;&gt;append&lt;/span&gt; &lt;span style=&#34;color: #003333&#34;&gt;exec-path&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;&amp;#39;&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/usr/local/bin&amp;quot;&lt;/span&gt;)))
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>