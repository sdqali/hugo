<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Code on {code that works}</title>
    <link>https://sdqali.in/categories/code/</link>
    <description>Recent content in Code on {code that works}</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Wed, 30 Nov 2016 05:50:42 +0000</lastBuildDate>
    
	<atom:link href="https://sdqali.in/categories/code/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 4</title>
      <link>https://sdqali.in/blog/2016/11/30/implementing-feature-toggles-for-a-spring-boot-application-part-4/</link>
      <pubDate>Wed, 30 Nov 2016 05:50:42 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/30/implementing-feature-toggles-for-a-spring-boot-application-part-4/</guid>
      <description>&lt;p&gt;In the fourth part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing &lt;a href=&#34;https://sdqali.in/blog/2016/11/21/implementing-feature-toggles-for-a-spring-boot-application-part-1/&#34;&gt;feature toggles&lt;/a&gt; for a Spring Boot application, we will take a look at how our implementation so far introduced a dependency on the application being restarted for changes to take place.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 3</title>
      <link>https://sdqali.in/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-3/</link>
      <pubDate>Tue, 29 Nov 2016 05:50:39 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/29/implementing-feature-toggles-for-a-spring-boot-application-part-3/</guid>
      <description>&lt;p&gt;In the third part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will take a look at exposing the state of feature flags as a Spring Boot management end point for monitoring and testing purposes.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 2</title>
      <link>https://sdqali.in/blog/2016/11/27/implementing-feature-toggles-for-a-spring-boot-application-part-2/</link>
      <pubDate>Sun, 27 Nov 2016 05:48:48 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/27/implementing-feature-toggles-for-a-spring-boot-application-part-2/</guid>
      <description>&lt;p&gt;In the second part of this &lt;a href=&#34;https://sdqali.in/series/feature-toggles/&#34;&gt;series&lt;/a&gt; about implementing feature toggles for a Spring Boot application, we will look at exposing the features to the Angular front-end so that features can be toggled in UI components.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Implementing feature toggles for a Spring Boot application - Part 1</title>
      <link>https://sdqali.in/blog/2016/11/22/implementing-feature-toggles-for-a-spring-boot-application-part-1/</link>
      <pubDate>Tue, 22 Nov 2016 01:03:03 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2016/11/22/implementing-feature-toggles-for-a-spring-boot-application-part-1/</guid>
      <description>&lt;p&gt;In one of our recent projects at work, we implemented feature toggles for a Spring MVC / Angular JS code base and this &lt;a href=&#34;https://sdqali.in/series/feature-toggles&#34;&gt;series of blog posts&lt;/a&gt; discusses our motivations and requirements, the approach we took and what we learned from it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Importing the Yelp dataset into MongoDB</title>
      <link>https://sdqali.in/blog/2014/08/02/importing-the-yelp-dataset-into-mongodb/</link>
      <pubDate>Sat, 02 Aug 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2014/08/02/importing-the-yelp-dataset-into-mongodb/</guid>
      <description>Today Yelp announced their dataset challenge 1. The dataset they released includes data from 5 cities (Phoenix, Las Vegas, Madison, Waterloo and Edinburgh) and consists of
 42,153 businesses 320,002 business attributes 31,617 check-in sets 252,898 users 955,999 edge social graph 403,210 tips 1,125,458 reviews  The data is available for public consumption, although Yelp owns any derivative dataset you create from the original 2.
The data is available as files with each line representing a JSON object.</description>
    </item>
    
    <item>
      <title>Clojure Dojo - Levenshtein edit distance</title>
      <link>https://sdqali.in/blog/2014/03/20/clojure-dojo-levenshtein-edit-distance/</link>
      <pubDate>Thu, 20 Mar 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2014/03/20/clojure-dojo-levenshtein-edit-distance/</guid>
      <description>I have been playing around with Clojure and after familiarising myself with the core, I decided to start writing little programs that forces me to choose the right idioms. I am starting off with Levenshtein edit distance of two strings.
Levenshtein edit distance Levenshtein edit distance between two string is a way of quantifying how similar or dissimilar they are, lower distance implying higher similarity. The algorithm to calculate Levenshtein distance is fairly simple - the algorithm cares about three operations that can be performed at a particular position in a string to move it towards the other - insertion, deletion and substitution.</description>
    </item>
    
    <item>
      <title>A simple JMeter test with login</title>
      <link>https://sdqali.in/blog/2014/02/17/a-simple-jmeter-test-with-login/</link>
      <pubDate>Mon, 17 Feb 2014 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2014/02/17/a-simple-jmeter-test-with-login/</guid>
      <description>I had to set up a JMeter test last week - the test included logging in to a site, and then hitting a bunch of URLs, all of them being GET requests. I found it hard to find a simple documentation that described how to do this - the ones I found were either incomplete or were trying to teach me a large number of things at the same time.</description>
    </item>
    
    <item>
      <title>Implementing Rate Limiting in Rails - Part 2</title>
      <link>https://sdqali.in/blog/2013/10/13/implementing-rate-limiting-in-rails-part-2/</link>
      <pubDate>Sun, 13 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/13/implementing-rate-limiting-in-rails-part-2/</guid>
      <description>The first part of this series can be found here.
The first part of this series looked at how to implement basic rate limiting in a Rails application. However, as pointed out in the improvements section, the implementation was not complete - it did not provide clients enough information about the rate limiting that is in place and how long they should wait before making further requests once they hit the limit.</description>
    </item>
    
    <item>
      <title>Implementing Rate Limiting in Rails - Part 1</title>
      <link>https://sdqali.in/blog/2013/10/12/implementing-rate-limiting-in-rails-part-1/</link>
      <pubDate>Sat, 12 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/12/implementing-rate-limiting-in-rails-part-1/</guid>
      <description>The second part of this series can be found here.
Rate limiting or throttling is the practice of limiting how frequently legitimate users of a web service can access the service. Rate limiting is often put in place to prevent the hogging of resources by a sub set of the users of the system. Rate limiting works by responding with error messages when a client exceeds their allocated share of requests within a predefined time window.</description>
    </item>
    
    <item>
      <title>Python Hack - Dynamically override an object&#39;s attribute</title>
      <link>https://sdqali.in/blog/2013/10/07/python-hack-dynamically-override-an-objects-attribute/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/07/python-hack-dynamically-override-an-objects-attribute/</guid>
      <description>While working with Locust 1 recently, we ran into a situation where we had to dynamically override an attribute in a class in the Locust library so as to control what value it got assigned. After a lot of scratching our heads and reading the Python documentation, we came across the property function. We were able to use this to hack together a solution that ensures that every time an attribute is read, it returns the result of executing a method.</description>
    </item>
    
    <item>
      <title>Fitting an Image in to a Canvas object</title>
      <link>https://sdqali.in/blog/2013/10/03/fitting-an-image-in-to-a-canvas-object/</link>
      <pubDate>Thu, 03 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/03/fitting-an-image-in-to-a-canvas-object/</guid>
      <description>I have been playing around with Canvas objects and images for a side project I am doing. One of the first things I had to figure out for this project was how to fit an image of arbitrary height and width on to a Canvas object of arbitrary, but known dimensions while preserving the aspect ratios of the image. This blog post is an explanation of the solution I came up with for this.</description>
    </item>
    
    <item>
      <title>Accessing Environment Variables in Gradle</title>
      <link>https://sdqali.in/blog/2013/10/01/accessing-environment-variables-in-gradle/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/01/accessing-environment-variables-in-gradle/</guid>
      <description>I have been writing a fun Android App. Share With Title is a small application that allows you to share web pages you are reading to other applications without having to jump through the messy copy-paste hoop. (You should try it. If you share stuff from the web like I do, it will save you a lot of time and frustration). I have been coding on Android Studio, Google&amp;rsquo;s IntelliJ based IDE for Android development.</description>
    </item>
    
    <item>
      <title>Reading user input in Gradle scripts</title>
      <link>https://sdqali.in/blog/2013/10/01/reading-user-input-in-gradle-scripts/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/01/reading-user-input-in-gradle-scripts/</guid>
      <description>Continuing from the last blog post, I have been looking at reading user input from a Gradle script. This was a result of Stack Overflow user user672009&amp;rsquo;s question about prompting for input from a Gradle script so the one does not have to include passwords in the script while checking in.
Just like the last example, the fact that Gradle scripts are written in a Groovy DSL comes to our help.</description>
    </item>
    
    <item>
      <title>Ruby, Named Capture Groups and Local Variables</title>
      <link>https://sdqali.in/blog/2013/10/01/ruby-named-capture-groups-and-local-variables/</link>
      <pubDate>Tue, 01 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/01/ruby-named-capture-groups-and-local-variables/</guid>
      <description>Ruby&amp;rsquo;s regular expressions support named capture groups, since 1.9. However, there is a weird behaviour while using named capture groups with the Regexp#=~ method. When named capture groups are used with =~, the captured values are placed in local variables with the same name as the capture group. The following example demonstrates this:
#!/usr/bin/env ruby month = &amp;#34;January&amp;#34; test_string = &amp;#34;Today&amp;#39;s date is: 9/28/2013.&amp;#34; /(?&amp;lt;month&amp;gt;\d{1,2})\/(?&amp;lt;day&amp;gt;\d{1,2})\/(?&amp;lt;year&amp;gt;\d{4})/ =~ test_string puts month.inspect This when executed will print 9.</description>
    </item>
    
    <item>
      <title>Named Capture Groups in Regular Expressions</title>
      <link>https://sdqali.in/blog/2013/09/29/named-capture-groups-in-regular-expressions/</link>
      <pubDate>Sun, 29 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/09/29/named-capture-groups-in-regular-expressions/</guid>
      <description>I will admit that I find regular expressions somewhat hard to parse. While the thinking process needed to write a regular expression is iterative and hence results in the correct expression suitable for the situation, once it is written it lacks readability. I have faced that pain of trying to grok a complex regular expression written years ago. So I was pleasantly surprised when I saw this example from Hacker News user WestCoastJustin.</description>
    </item>
    
    <item>
      <title>Decomposing URLs in Python</title>
      <link>https://sdqali.in/blog/2013/09/26/decomposing-urls-in-python/</link>
      <pubDate>Thu, 26 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/09/26/decomposing-urls-in-python/</guid>
      <description>Python&amp;rsquo;s urlparse module breaks down URLs in to components. It supports all the URL schemes specified in RFC 3986 1.
&amp;gt;&amp;gt;&amp;gt; import urlparse &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; urlparse.urlparse(&amp;#34;https://example.com/foo?param=bar&amp;#34;) ParseResult(scheme=&amp;#39;https&amp;#39;, netloc=&amp;#39;example.com&amp;#39;, path=&amp;#39;/foo&amp;#39;, params=&amp;#39;&amp;#39;, query=&amp;#39;param=bar&amp;#39;, fragment=&amp;#39;&amp;#39;) &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; urlparse.urlparse(&amp;#34;file://example.com/etc/fstab&amp;#34;) ParseResult(scheme=&amp;#39;file&amp;#39;, netloc=&amp;#39;example.com&amp;#39;, path=&amp;#39;/etc/fstab&amp;#39;, params=&amp;#39;&amp;#39;, query=&amp;#39;&amp;#39;, fragment=&amp;#39;&amp;#39;) &amp;gt;&amp;gt;&amp;gt; &amp;gt;&amp;gt;&amp;gt; urlparse.urlparse(&amp;#34;news:comp.infosystems.www.misc&amp;#34;) ParseResult(scheme=&amp;#39;news&amp;#39;, netloc=&amp;#39;&amp;#39;, path=&amp;#39;comp.infosystems.www.misc&amp;#39;, params=&amp;#39;&amp;#39;, query=&amp;#39;&amp;#39;, fragment=&amp;#39;&amp;#39;) IETF - RFC for Uniform Resource Identifier (URI): Generic Syntax. [return]   </description>
    </item>
    
    <item>
      <title>Shared history in Bash</title>
      <link>https://sdqali.in/blog/2013/09/15/shared-history-in-bash/</link>
      <pubDate>Sun, 15 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/09/15/shared-history-in-bash/</guid>
      <description>One of the features that I miss most in Bash is the shared history between terminals that Zsh supports. I was hunting down a solution for this and came across this Stack Overflow answer 1 by user lesmana. This code snippet does the trick:
HISTSIZE=9000 HISTFILESIZE=$HISTSIZE HISTCONTROL=ignorespace:ignoredups history() { _bash_history_sync builtin history &amp;#34;$@&amp;#34; } _bash_history_sync() { builtin history -a #1 HISTFILESIZE=$HISTSIZE #2 builtin history -c #3 builtin history -r #4 } PROMPT_COMMAND=&amp;#34;_bash_history_sync;$PROMPT_COMMAND&amp;#34; This is very hacky—This setting overrides the shell prompt to sync history every time the prompt is loaded.</description>
    </item>
    
    <item>
      <title>Managing Gemsets in Rbenv</title>
      <link>https://sdqali.in/blog/2013/09/12/managing-gemsets-in-rbenv/</link>
      <pubDate>Thu, 12 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/09/12/managing-gemsets-in-rbenv/</guid>
      <description>&lt;p&gt;When I was setting up my new laptop today, I decided to use Rbenv &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; to manage my Ruby versions. I have typically used RVM &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and had never used Rbenv. Rbenv is a Ruby version manager written by &lt;a href=&#34;https://github.com/sstephenson/&#34;&gt;Sam Stephenson&lt;/a&gt; and deliberately tries to do less and do it well. Instead of overriding Bash commands like RVM does, Rbenv chooses to use wrappers or &lt;strong&gt;shims&lt;/strong&gt; around Ruby binaries to choose the Ruby executable to run.&lt;/p&gt;

&lt;p&gt;This works well, until you have to manage Gemsets &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. Often, one is working on two projects that use the same version of Ruby, but has entirely different chain of dependency on Gems. RVM&amp;rsquo;s gemsets work really well for this use case. I was looking around to see how one would manage gemsets with Rbenv. There are three ways to do it.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Looking up Compiler params used to compile a Ruby version</title>
      <link>https://sdqali.in/blog/2013/09/08/looking-up-compiler-params-used-to-compile-a-ruby-version/</link>
      <pubDate>Sun, 08 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/09/08/looking-up-compiler-params-used-to-compile-a-ruby-version/</guid>
      <description>Today Kashyap asked how one can identify the compiler parameters passed when compiling a Ruby version. I was curious how to achieve this and like any confused developer started searching for and looking in the Ruby documentation. Searching for compiler parameters in ruby did not yield any interesting results and the group of constants with the RUBY_ prefix 1 loaded in Ruby did not include anything related to compiler flags. Then I came across this blog post 2 by Jan Lelis and I was curious what else RbConfig::CONFIG contains.</description>
    </item>
    
    <item>
      <title>Navigating Stacktraces in Emacs</title>
      <link>https://sdqali.in/blog/2013/08/22/navigating-stacktraces-in-emacs/</link>
      <pubDate>Thu, 22 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/08/22/navigating-stacktraces-in-emacs/</guid>
      <description>&lt;p&gt;I had to debug an issue today and that meant dealing with Rails stack traces. I got tired of having to constantly switch between reading the trace in the terminal and the code in Emacs to figure out what was going wrong and get more context around it. I felt that there should be an easier way of doing this. A quick search &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; did not yield anything. But then I remembered Grep mode &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; and it occurred to me that hijacking Grep mode&amp;rsquo;s navigation feature would let me navigate the stack trace better. This is the solution I came up with.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Python&#39;s bool type</title>
      <link>https://sdqali.in/blog/2013/08/15/pythons-bool-type/</link>
      <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/08/15/pythons-bool-type/</guid>
      <description>Python does not have a true boolean type. The True and False built-in values in Python are wrappers around the integers 1 and 0. This results in some interesting results involving True and False.
&amp;gt;&amp;gt;&amp;gt; True == 1 True &amp;gt;&amp;gt;&amp;gt; False == 0 True &amp;gt;&amp;gt;&amp;gt; True + 9 10 &amp;gt;&amp;gt;&amp;gt; False - 1 -1 &amp;gt;&amp;gt;&amp;gt; str(True) &amp;#39;True&amp;#39; &amp;gt;&amp;gt;&amp;gt; repr(True) &amp;#39;True&amp;#39; The Python bool implementation got formalised in PEP 285 1 in 2002 by Guido van Rossum.</description>
    </item>
    
    <item>
      <title>Graph databases 1 - Modeling</title>
      <link>https://sdqali.in/blog/2013/08/02/graph-databases-1-modeling/</link>
      <pubDate>Fri, 02 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/08/02/graph-databases-1-modeling/</guid>
      <description>&lt;p&gt;I am making my way through the book &lt;em&gt;Graph Databases&lt;/em&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; which is an introductory book to the subject from Neo Technology &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt;, creators of Neo4j &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt;. At work, we are using Neo4j for a cool new thing we are building, and I see it as a great chance to learn some thing new and interesting. In the past, I have gone through a spiral &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:4&#34;&gt;&lt;a href=&#34;#fn:4&#34;&gt;4&lt;/a&gt;&lt;/sup&gt; when it comes to learning stuff and the constant feedback I get is to pick something that one gets to work with everyday and dig deep into it, in order to avoid the frustration and the inevitable spiral.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Validating JSON in Emacs</title>
      <link>https://sdqali.in/blog/2013/07/31/validating-json-in-emacs/</link>
      <pubDate>Wed, 31 Jul 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/07/31/validating-json-in-emacs/</guid>
      <description>&lt;p&gt;&lt;meta content=&#34;validate&#34; name=&#34;keywords&#34;&gt;
At work, I have to deal with Amazon CloudFormation &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; templates a fair bit. These templates are JSON files. More and more members of our team are moving away from TextMate to Emacs which makes me really happy. We would like to validate these CloudFormation templates in Emacs. Today we set this up and I hope this turns out to be of help to some one else trying to do the same.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Emacs hack: Viewing Git logs while composing commit messages</title>
      <link>https://sdqali.in/blog/2013/04/29/emacs-hack-viewing-git-logs-while-composing-commit-messages/</link>
      <pubDate>Mon, 29 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/04/29/emacs-hack-viewing-git-logs-while-composing-commit-messages/</guid>
      <description>I use Emacs as my editor to compose Git commit messages. I almost never commit from the terminal with git commit -m. This approach has two advantages: I get a chance to verify what is being committed and get to compose the message using a proper editor complete with spell checking provided by flyspell mode. One thing I wish I had access to while composing commit messages is the git log.</description>
    </item>
    
    <item>
      <title>Configure Git&#39;s comment character</title>
      <link>https://sdqali.in/blog/2013/04/14/configure-gits-comment-character/</link>
      <pubDate>Sun, 14 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/04/14/configure-gits-comment-character/</guid>
      <description>TL;DR - Use the core.commentchar configuration to change the character Git uses to mark comment lines in commit messages.
My team has a convention of putting the number of the current Issue/Ticket/Story that we are working on at the beginning of every commit message. This is great because it lets us make sense of the history of our code by helping us answer
 What were the changes made to the code base to build a feature or fix an issue?</description>
    </item>
    
    <item>
      <title>Oh I can build it in...</title>
      <link>https://sdqali.in/blog/2013/04/08/oh-i-can-build-it-in.../</link>
      <pubDate>Mon, 08 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/04/08/oh-i-can-build-it-in.../</guid>
      <description>Oh, is this what you guys have been building for three years? I can build it in a month!
 Substitute the two time durations with something appropriate and you end up with how some software developers react after encountering a new project or application. I have seen this happen in multiple situations, where I had more context of how the application in question had evolved which the person making the comment did not have.</description>
    </item>
    
    <item>
      <title>JavaScript, clipboard access and hidden flash widgets</title>
      <link>https://sdqali.in/blog/2013/04/05/javascript-clipboard-access-and-hidden-flash-widgets/</link>
      <pubDate>Fri, 05 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/04/05/javascript-clipboard-access-and-hidden-flash-widgets/</guid>
      <description>Letting users copy text and URLs from a webpage effortlessly is one of those things that sound easy in theory, but is a pain when it comes to implementation. Browsers take great efforts to ensure that web pages are sand boxed in such a way that a web application can not read from or write to the system&amp;rsquo;s clipboard without jumping through hoops. Firefox asks you to change browser configurations to give web applications access to the system clipboard, while Internet Explorer shows a modal dialog to confirm that you really want to allow the application access.</description>
    </item>
    
    <item>
      <title>Reducing Emacs startup time while committing</title>
      <link>https://sdqali.in/blog/2013/01/22/reducing-emacs-startup-time-while-committing/</link>
      <pubDate>Tue, 22 Jan 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/01/22/reducing-emacs-startup-time-while-committing/</guid>
      <description>I use Emacs as my primary text editor and I use it to edit commit messages for Git. I almost never use the -m option with git commit. Since I have a fairly customised Emacs configuration based around Sam Aaron&amp;rsquo;s Emacs Live, this means that for every commit, there is a visible delay for Emacs to start up for the commit message. I was looking for ways to reduce this and figured out that running Emacs in daemon mode and using emacsclient as the GIT_EDITOR would solve this.</description>
    </item>
    
    <item>
      <title>My first Firefox plugin: GetCache - View cached version of the current page</title>
      <link>https://sdqali.in/blog/2012/11/29/my-first-firefox-plugin-getcache-view-cached-version-of-the-current-page/</link>
      <pubDate>Thu, 29 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/11/29/my-first-firefox-plugin-getcache-view-cached-version-of-the-current-page/</guid>
      <description>&lt;p&gt;I released my &lt;a href=&#34;https://addons.mozilla.org/en-US/firefox/addon/getcache-ff/&#34;&gt;first Firefox plugin&lt;/a&gt; today. It
is awaiting review, but if you are adventurous, you can install it right
now. Go on, try it.&lt;/p&gt;

&lt;p&gt;After I had written the &lt;a href=&#34;https://sdqali.in/blog/2012/11/28/getcache-a-chrome-plugin-to-view-cached-version-of-the-current-page/&#34;&gt;Chrome version&lt;/a&gt; yesterday, &lt;a href=&#34;https://twitter.com/ManishChaks&#34;&gt;Manish&lt;/a&gt; suggested
that I should write one for Firefox. There already exist Firfox plugins
that does exactly what GetCache does, but I decided to go ahead and write it
for fun. And of course, the fact that I could publish it without having
to sign up with my Credit Card information was enticing.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>GetCache - A Chrome plugin to view cached version of the current page</title>
      <link>https://sdqali.in/blog/2012/11/28/getcache-a-chrome-plugin-to-view-cached-version-of-the-current-page/</link>
      <pubDate>Wed, 28 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/11/28/getcache-a-chrome-plugin-to-view-cached-version-of-the-current-page/</guid>
      <description>&lt;blockquote&gt;
&lt;p&gt;Download the plugin
&lt;a href=&#34;https://sdqali.in/downloads/GetCache.crx&#34;&gt;here&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;On numerous occasions, I have ran in to the situation where I had to
look up how to load Google&amp;rsquo;s cached version of a particular page. This
happens often when I follow a link from Hacker News or Reddit to a blog
post and the blog has went down due to the great avalanche of traffic
from HN and Reddit.&lt;/p&gt;

&lt;p&gt;After struggling to remember and having to Google how to get the cached
version, I decided to finally solve this issue. I wrote &lt;code&gt;GetCache&lt;/code&gt;, a
dead simple Google Chrome plugin that loads Google&amp;rsquo;s cached version of
the current page.&lt;/p&gt;

&lt;h2 id=&#34;installing&#34;&gt;Installing&lt;/h2&gt;

&lt;p&gt;You can download the plugin
&lt;a href=&#34;https://sdqali.in/downloads/GetCache.crx&#34;&gt;here&lt;/a&gt;. In order to install it, open your
Extensions page (&lt;code&gt;Window -&amp;gt; Extensions&lt;/code&gt;) and drag the downloaded &lt;code&gt;CRX&lt;/code&gt;
file to the page.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>On REST, Content-Type, Google Chrome and Caching</title>
      <link>https://sdqali.in/blog/2012/11/27/on-rest-content-type-google-chrome-and-caching/</link>
      <pubDate>Tue, 27 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/11/27/on-rest-content-type-google-chrome-and-caching/</guid>
      <description>&lt;p&gt;Representational State Transfer (REST) is a style of software
architecture for distributed systems that has replaced technologies like
&lt;a href=&#34;http://en.wikipedia.org/wiki/SOAP&#34;&gt;SOAP&lt;/a&gt; as the predominant Web service
design model. Originally proposed by Roy Fielding in his &lt;a href=&#34;http://www.ics.uci.edu/~fielding/pubs/dissertation/rest_arch_style.htm&#34;&gt;Doctorate
dissertation&lt;/a&gt;,
REST puts a lot of emphasis on resources, their representations and states. Basically a URL indicates a
single resource; the HTTP method (GET, POST, PUT, DELETE) indicates what
action should be performed on that resource; and the ACCEPT header indicates the format that the resource should be presented in.&lt;/p&gt;

&lt;h2 id=&#34;chrome-and-content-type&#34;&gt;Chrome and Content-Type&lt;/h2&gt;

&lt;p&gt;Having seen this, one would assume that if you have a resource, say a
&lt;code&gt;User&lt;/code&gt; on your system and there were two representations of that
resource - HTML and JSON. Let&amp;rsquo;s assume that the HTML representation does
an AJAX call to fetch the JSON representation and renders it. While this
sounds simple enough, Google Chrome, one of the world&amp;rsquo;s most popular
browsers
&lt;a href=&#34;https://code.google.com/p/chromium/issues/detail?id=108766&#34;&gt;totally breaks this&lt;/a&gt;. A
good example of this weird behaviour can be seen &lt;a href=&#34;http://chrome-json-bug.heroku.com/docs&#34;&gt;here&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>How Browsers Detect If You Are Offline</title>
      <link>https://sdqali.in/blog/2012/11/22/how-browsers-detect-if-you-are-offline/</link>
      <pubDate>Thu, 22 Nov 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/11/22/how-browsers-detect-if-you-are-offline/</guid>
      <description>When I saw the newly released Heyoffline.js library, I was curious to see how it figured out if the user was online or not. This led me to the window.navigator.onLine API and how different browsers implement it. Chrome, Safari and Inernet Explorer 10 make sure that the API detects if the user is connected to a network, while Firefox changes this flag if and only if the user chooses the Work Offline option.</description>
    </item>
    
    <item>
      <title>D3.js Workshop</title>
      <link>https://sdqali.in/blog/2012/08/01/d3.js-workshop/</link>
      <pubDate>Wed, 01 Aug 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/08/01/d3.js-workshop/</guid>
      <description>&lt;p&gt;I did a &lt;a href=&#34;http://d3js.org&#34;&gt;d3.js&lt;/a&gt; workshop at ThoughtWorks Bangalore yesterday (31st
July, 2012). I split the workshop in to two parts. The first was a basic
introduction to d3.js - SVG, Scaling, Axes etc. The second part
was an exercise to hack together a Scatterplot with some Cricket
dataset.&lt;/p&gt;

&lt;p&gt;Around 30 people attended the workshop. I spent too much time on the first part and hence we did not have enough
time to complete the second part. This was the first ever workshop I have done
and my time plan was way off. I should fix it the next time.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Visualisation - How European clubs dominate their leagues</title>
      <link>https://sdqali.in/blog/2012/07/21/visualisation-how-european-clubs-dominate-their-leagues/</link>
      <pubDate>Sat, 21 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/07/21/visualisation-how-european-clubs-dominate-their-leagues/</guid>
      <description>Click here to see the visualisation.
This is a visualization showing how various European football clubs have dominated their respective national leagues over various time periods. The visualization shows data for England, France, Germany, Italy, Netherlands and Spain.
The visualization is self-explanatory. You can choose a league to view from the dropdown and then choose the sliders to select an era for which you want to look at the data.</description>
    </item>
    
    <item>
      <title>Understanding Python&#39;s &#34;with&#34; statement</title>
      <link>https://sdqali.in/blog/2012/07/09/understanding-pythons-with-statement/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/07/09/understanding-pythons-with-statement/</guid>
      <description>&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;with&lt;/code&gt; statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.&lt;/p&gt;

&lt;p&gt;Without the &lt;code&gt;with&lt;/code&gt; statement, one would write something along the lines of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/tmp/foo.txt&amp;#34;&lt;/span&gt;)
data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;There are two annoying things here. First, you end up forgetting to close the file handler. The second is how to handle exceptions that may occur once the file handler has been obtained. One could write something like this to get around this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/tmp/foo.txt&amp;#34;&lt;/span&gt;)
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;try&lt;/span&gt;:
    data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;finally&lt;/span&gt;:
    &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;close()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;While this works well, it is unnecessarily verbose. This is where &lt;code&gt;with&lt;/code&gt; is useful. The good thing about &lt;code&gt;with&lt;/code&gt; apart from the better syntax is that it is very good handling exceptions. The above code would look like this, when using &lt;code&gt;with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;/tmp/foo.txt&amp;#34;&lt;/span&gt;) &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;:
   data &lt;span style=&#34;color:#555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color:#366&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color:#555&#34;&gt;.&lt;/span&gt;read()&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    
    <item>
      <title>Heredocs in Ruby and Python</title>
      <link>https://sdqali.in/blog/2012/07/04/heredocs-in-ruby-and-python/</link>
      <pubDate>Wed, 04 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/07/04/heredocs-in-ruby-and-python/</guid>
      <description>&lt;p&gt;I have been doing some coding in Python recently. While playing around with some code, I noticed that the way &lt;a href=&#34;http://en.wikipedia.org/wiki/Here_document&#34;&gt;heredocs&lt;/a&gt; are used in Python is different from Ruby.&lt;/p&gt;

&lt;h2 id=&#34;python&#34;&gt;Python&lt;/h2&gt;

&lt;p&gt;Consider the following snippet:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-python&#34; data-lang=&#34;python&#34;&gt;&lt;span style=&#34;color:#09f;font-style:italic&#34;&gt;# test.py&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;some text in single line&amp;#34;&lt;/span&gt;

&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;As opposed to
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;some text
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;written as
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;heredoc
&lt;/span&gt;&lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;&amp;#34;&amp;#34;&lt;/span&gt;
&lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color:#c30&#34;&gt;&amp;#34;and then another single line&amp;#34;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;When run, this would result in this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34;&gt;&lt;pre style=&#34;background-color:#f0f3f3;-moz-tab-size:4;-o-tab-size:4;tab-size:4&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;bash-3.2$ python test.py
some text in single line

As opposed to
some text
written as
heredoc

and &lt;span style=&#34;color:#069;font-weight:bold&#34;&gt;then&lt;/span&gt; another single line&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Notice how there is a preceding and trailing linebreak around the string printed using heredoc.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Micro Journal - simple Git-backed journal in Python</title>
      <link>https://sdqali.in/blog/2012/06/25/micro-journal-simple-git-backed-journal-in-python/</link>
      <pubDate>Mon, 25 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/06/25/micro-journal-simple-git-backed-journal-in-python/</guid>
      <description>Today, I pushed out Microjournal, a simple and lightweight journal. I wrote Microjournal to reduce the pain of typing a number of commands to create and maintain my daily journal which I type out in Emacs and use Git to store. It is a single file Python script.
Microjournal does not do much on it&amp;rsquo;s own. It creates a Git repository for you, and then you can write down entries whenever you feel like.</description>
    </item>
    
    <item>
      <title>VodQA NCR: Maintaining Large Test Suites</title>
      <link>https://sdqali.in/blog/2012/06/24/vodqa-ncr-maintaining-large-test-suites/</link>
      <pubDate>Sun, 24 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/06/24/vodqa-ncr-maintaining-large-test-suites/</guid>
      <description>Srijayanth Sridhar and I did a talk yesterday at vodQA NCR.
The talk was about what makes maintenance of large test suites a pain and the things that have worked for us and we have seen work for other teams.
It went well and we got a lot of good feedback from the crowd. The prezi for the talk is below:
.prezi-player { width: 550px; } .prezi-player-links { text-align: center; }Maintaining Large Test Suites on Prezi</description>
    </item>
    
    <item>
      <title>Know Your Tools - Don&#39;t Shoot Yourself in the Foot</title>
      <link>https://sdqali.in/blog/2012/06/06/know-your-tools-dont-shoot-yourself-in-the-foot/</link>
      <pubDate>Wed, 06 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/06/06/know-your-tools-dont-shoot-yourself-in-the-foot/</guid>
      <description>&lt;p&gt;Imagine this - Your build is taking forever. You put in a lot of effort and restructure it. Things improve a lot, but it is far from where you would like it to be. You try hard to identify things that could improve the build time, but fail. You blame the platforms you use, you blame Ruby and you even blame the relative position of the Moon to Venus. Slowly you learn to accept the slow build as a part of your life. Months later a new developer joins the team and proves that there is a bug in the build scripts that causes certain tasks to be run twice.&lt;/p&gt;

&lt;p&gt;This happened to us recently, and the subsequent debugging/postmortem revealed that there were things about our tools that we simply did not know.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Managing security certificates from the console - on Windows, Mac OS X and Linux</title>
      <link>https://sdqali.in/blog/2012/06/05/managing-security-certificates-from-the-console-on-windows-mac-os-x-and-linux/</link>
      <pubDate>Tue, 05 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/06/05/managing-security-certificates-from-the-console-on-windows-mac-os-x-and-linux/</guid>
      <description>&lt;p&gt;For me the last two weeks or so have involved a lot of wrestling with SSL certificates. One of the things that took some time to figure out was how to piggy-back on the tools provided by different Operating Systems to manage certificates. We did not want to rewrite &lt;a href=&#34;https://www.mozilla.org/projects/security/pki/nss/&#34; title=&#34;NSS&#34;&gt;NSS&lt;/a&gt;. Luckily for us, all the major OSes provide tools to manage certificates from the command line.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Indian and Pakistani cricketers - who make better debuts?</title>
      <link>https://sdqali.in/blog/2012/05/11/indian-and-pakistani-cricketers-who-make-better-debuts/</link>
      <pubDate>Fri, 11 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/05/11/indian-and-pakistani-cricketers-who-make-better-debuts/</guid>
      <description>&lt;p&gt;Recently a friend and I had an argument about who makes better debuts among Indian and Pakistani cricket players. Now, I am not into cricket. But I do watch the odd matches here and there and am generally aware of what is going on in the game. My stand was that Pakistani players make better debuts compared to Indian players, while my friend was adamant that Indian players make better debuts. My friend is more of a cricket guy than I ever was and he asked me what is the basis of my stand. It was just a gut feel for me and I had to leave it as there was no way for me to prove that my gut feel was correct. But I did want to try, though.&lt;/p&gt;

&lt;p&gt;I decided to see if I could prove my theory. Luckily, Cricinfo has all this data, although they dont make it easy for you to get it. I wrote some scripts to pull this data and decided to visualise this using the awesome d3 library. In the end, this became more about figuring out d3 than winning the argument, but doing this was fun.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Finding un-merged commits with git cherry</title>
      <link>https://sdqali.in/blog/2012/04/29/finding-un-merged-commits-with-git-cherry/</link>
      <pubDate>Sun, 29 Apr 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/04/29/finding-un-merged-commits-with-git-cherry/</guid>
      <description>&lt;p&gt;In a project that I was a part of in the recent past, we used Story Branching. While it afforded us flexibility in pulling and pushing stories in and out of releases, it has given us some scares in the past. Somebody makes commits against a story, but the commit does not get merged to the correct release branch where it is supposed to go or gets merged to another release. The solution was to hunt down the commits that are missing or have creeped in.&lt;/p&gt;

&lt;p&gt;This is where the &lt;a href=&#34;http://linux.die.net/man/1/git-cherry&#34;&gt;git cherry&lt;/a&gt; command is useful. Git cherry finds commits not merged from a branch to another. From the man page:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Every commit that doesn&amp;rsquo;t exist in the upstream branch has its id (sha1) reported, prefixed by a symbol. The ones that have equivalent change already in the upstream branch are prefixed with a minus (-) sign, and those that only exist in the head branch are prefixed with a plus (+) symbol&amp;rdquo;&lt;/p&gt;
&lt;/blockquote&gt;</description>
    </item>
    
    <item>
      <title>Bullet proof Jenkins setup</title>
      <link>https://sdqali.in/blog/2012/02/03/bullet-proof-jenkins-setup/</link>
      <pubDate>Fri, 03 Feb 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/02/03/bullet-proof-jenkins-setup/</guid>
      <description>&lt;p&gt;In this post, I will describe how a neat setup and some discipline will ensure a Jenkins that can be rolled back and recreated very easily - a bullet proof Jenkins setup.  I have been working on configuring our Jenkins instance. This was the first time I had played around with Jenkins. I am fairly comfortable with &lt;a href=&#34;http://www.thoughtworks-studios.com/go-agile-release-management&#34; target=&#34;_blank&#34;&gt;Go&lt;/a&gt; from ThoughtWorks Studios. All of my past teams used Go as their tool for continuous delivery.&lt;/p&gt;

&lt;p&gt;One of the things I found very different from Go in Jenkins is the absence of the notion of a Pipeline as the basic entity of build, as proposed in &lt;a href=&#34;http://continuousdelivery.com/&#34; target=&#34;_blank&#34;&gt;Continuous Delivery&lt;/a&gt;. Although there are plugins to make this available in Jenkins, we decided to go with Jenkins&amp;rsquo; model of Jobs.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Why your project should have a Getting Started guide.</title>
      <link>https://sdqali.in/blog/2012/01/17/why-your-project-should-have-a-getting-started-guide./</link>
      <pubDate>Tue, 17 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/01/17/why-your-project-should-have-a-getting-started-guide./</guid>
      <description>My new team at work is writing a bunch of Rails applications. This is one of those codebases that one would call &amp;ldquo;legacy&amp;rdquo; without much argument. Most of these apps have their own patched, vendorized Rails versions.
Getting up and running was an absolute pain. This project existed before Bundler and the list of gem dependencies are not checked in. I got the output of running gem list on a colleague&amp;rsquo;s box, wrote a Ruby script to generate a shell script that installs all the gems.</description>
    </item>
    
    <item>
      <title>Debugging: C Sharp&#39;s HttpWebRequest, 100-Continue and nginx</title>
      <link>https://sdqali.in/blog/2012/01/16/debugging-c-sharps-httpwebrequest-100-continue-and-nginx/</link>
      <pubDate>Mon, 16 Jan 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/01/16/debugging-c-sharps-httpwebrequest-100-continue-and-nginx/</guid>
      <description>Recently I spent some time debugging an issue our team was facing around some C# code making a request on one of our servers. The request was throwing a The server committed a protocol violation. Section=ResponseStatusLine error.
Initial investigation suggested that this could happen if we are making HTTP/1.1 requests to a server configured for HTTP/1.0. Our Rails application runs on Mongrel fronted with nginx 0.6.5. We modified the C# code to use HTTP/1.</description>
    </item>
    
    <item>
      <title>Wikipedia Page Hopping</title>
      <link>https://sdqali.in/blog/2011/05/17/wikipedia-page-hopping/</link>
      <pubDate>Tue, 17 May 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2011/05/17/wikipedia-page-hopping/</guid>
      <description>I have realized that like most users of Wikipedia, I do a lot of Wikipedia page-hopping [1]. Wikipedia is sort of addictive that way. You start reading about a piece of Flamenco music and after twenty minutes find yourself staring at the page about ETA, a Basque nationalist organization. So I decided to figure out how I exactly do I get lost in the huge list of interconnected articles. I use Chromium, and it stores its history in a SQLite3 database file.</description>
    </item>
    
    <item>
      <title>Empathy Log Parser</title>
      <link>https://sdqali.in/blog/2011/03/24/empathy-log-parser/</link>
      <pubDate>Thu, 24 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2011/03/24/empathy-log-parser/</guid>
      <description>I use Empathy as my preferred IM application. Today, I wanted to have a look at an IM conversation I had with someone. I pulled out the Empathy log corresponding to that conversation, and boom - it is in XML.
Just another excuse to write code. So I came up with the following. It was easy to write and it does not do much - It uses the Hpricot gem to parse the XML and prints the name of the people involved in the chat and their messages in a human readable form.</description>
    </item>
    
    <item>
      <title>Binary Signature Art</title>
      <link>https://sdqali.in/blog/2011/03/23/binary-signature-art/</link>
      <pubDate>Wed, 23 Mar 2011 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2011/03/23/binary-signature-art/</guid>
      <description>I was reading this very interesting thread on the xkcd forum when I noticed a post from a user with the following signature in binary:
01001101 01100001 01100100 01100101 00100000 01011001 01101111 01110101 00100000 01001100 01101111 01101111 01101011 00100001&amp;#34; At first, that did not particularly entice me, mostly because the topic being discussed was really interesting, but it did come back to my focus when I saw that another user had quoted the signature, along with the comment Yeah, you know it.</description>
    </item>
    
    <item>
      <title>Java Arrays in JRuby</title>
      <link>https://sdqali.in/blog/2010/03/16/java-arrays-in-jruby/</link>
      <pubDate>Tue, 16 Mar 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2010/03/16/java-arrays-in-jruby/</guid>
      <description>Recently my team encountered a frustrating thing while working with a Java library in JRuby. It took us long to figure out what was going wrong. This is an attempt to write down what was happening.
You are in Ruby world, a world of weak typing, no type casting and pure bliss in coding. You forget that some languages care about the type of elements in an Array. And you end up spending a lot of time figuring out why you are staring at a stupid looking exception.</description>
    </item>
    
    <item>
      <title>Autorun.py - Execute stuff on file change</title>
      <link>https://sdqali.in/blog/2010/01/09/autorun.py-execute-stuff-on-file-change/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2010/01/09/autorun.py-execute-stuff-on-file-change/</guid>
      <description>I really liked ZenTest&amp;rsquo;s Autospec in action. Recently, when I was trying to write some Python stuff, I thought it would be nice if I would have a tool that would just run the unit tests, so that I don&amp;rsquo;t have to switch between console windows. Better still, I could run it from inside my Emacs.
Clearly, monitoring files for changes, shouldn&amp;rsquo;t be big deal. I decided to write the tool myself in Python.</description>
    </item>
    
  </channel>
</rss>