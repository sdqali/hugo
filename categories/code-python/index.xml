<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Sadique Ali</title>
    <link>https://sdqali.in/categories/code-python/index.xml</link>
    <description>Recent content on Sadique Ali</description>
    <generator>Hugo -- gohugo.io</generator>
    <atom:link href="https://sdqali.in/categories/code-python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Python Hack - Dynamically override an object&#39;s attribute</title>
      <link>https://sdqali.in/blog/2013/10/07/python-hack---dynamically-override-an-objects-attribute/</link>
      <pubDate>Mon, 07 Oct 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/10/07/python-hack---dynamically-override-an-objects-attribute/</guid>
      <description>

&lt;p&gt;While working with Locust &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; recently, we ran into a situation where we had to dynamically override an attribute in a class in the Locust library so as to control what value it got assigned. After a lot of scratching our heads and reading the Python documentation, we came across the &lt;code&gt;property&lt;/code&gt; function. We were able to use this to hack together a solution that ensures that every time an attribute is read, it returns the result of executing a method.&lt;/p&gt;

&lt;p&gt;The following example demonstrates a stripped down version of this hack.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import random

class Foo(object):
    bar = random.random()

foo = Foo()

# Prints the value assigned when the Foo object is initialised.
print(&amp;quot;Before override&amp;quot;)
print(foo.bar)
print(foo.bar)

# Override
Foo.bar = property(lambda self: random.random())

print(&amp;quot;After override&amp;quot;)
print(foo.bar)
print(foo.bar)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This snippet when executed will output the following:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Before override
0.0373028550804
0.0373028550804
After override
0.603160033663
0.501455108419
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;It can be seen that before introducing the override, the value of the &lt;code&gt;bar&lt;/code&gt; attribute is set when the class is initialised and as expected, it does not change how many ever times the attribute is read. However, after the override, the attribute is assigned a new value every time it is read.&lt;/p&gt;

&lt;h2 id=&#34;how-does-this-work&#34;&gt;How does this work?&lt;/h2&gt;

&lt;p&gt;The &lt;code&gt;property()&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:2&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:2&#34;&gt;2&lt;/a&gt;&lt;/sup&gt; function returns an attribute for any class. It allows the creation of Ruby&amp;rsquo;s &lt;code&gt;attr_accessor&lt;/code&gt; &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:3&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:3&#34;&gt;3&lt;/a&gt;&lt;/sup&gt; style attributes on classes so that one can write &lt;code&gt;instance.attrib&lt;/code&gt; to read an attribute value and &lt;code&gt;instance.attrib=&lt;/code&gt; to set an attribute value. What line &lt;code&gt;14&lt;/code&gt; in the snippet does is to re-define the &lt;code&gt;bar&lt;/code&gt; attribute to be a property whose &lt;code&gt;getter&lt;/code&gt; is a &lt;code&gt;lambda&lt;/code&gt;. Every time the &lt;code&gt;bar&lt;/code&gt; attribute is read, the &lt;code&gt;lambda&lt;/code&gt; gets executed.&lt;/p&gt;

&lt;p&gt;A more comprehensive example of this can be found in my &lt;a href=&#34;https://github.com/sdqali/python_dojo/blob/master/dynamic_override/dynamic_override.py&#34;&gt;Python dojo repository&lt;/a&gt; on GitHub.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://locust.io/&#34;&gt;Locust&lt;/a&gt; - a modern load testing framework.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:2&#34;&gt;Python&amp;rsquo;s built-in functions - &lt;a href=&#34;http://docs.python.org/2/library/functions.html#property&#34;&gt;property&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:2&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li id=&#34;fn:3&#34;&gt;Ruby&amp;rsquo;s &lt;a href=&#34;http://www.ruby-doc.org/core-1.9.3/Module.html#method-i-attr_accessor&#34;&gt;&lt;code&gt;attr_accessor&lt;/code&gt; method&lt;/a&gt;.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:3&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Python&#39;s bool type</title>
      <link>https://sdqali.in/blog/2013/08/15/pythons-bool-type/</link>
      <pubDate>Thu, 15 Aug 2013 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2013/08/15/pythons-bool-type/</guid>
      <description>&lt;p&gt;Python does not have a true boolean type. The &lt;code&gt;True&lt;/code&gt; and &lt;code&gt;False&lt;/code&gt; built-in values in Python are wrappers around the integers &lt;code&gt;1&lt;/code&gt; and &lt;code&gt;0&lt;/code&gt;. This results in some interesting results involving True and False.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;
&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;9&lt;/span&gt;
&lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;False&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;-&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;str&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
&lt;span style=&#34;color: #555555&#34;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;repr&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;)
&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;True&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;The Python bool implementation got formalised in PEP 285 &lt;sup class=&#34;footnote-ref&#34; id=&#34;fnref:1&#34;&gt;&lt;a rel=&#34;footnote&#34; href=&#34;#fn:1&#34;&gt;1&lt;/a&gt;&lt;/sup&gt; in 2002 by Guido van Rossum. The specification gives a lot of insight into von Rossum&amp;rsquo;s insistence on maintaining backward compatibility and the Python way. It also touches up on another aspect of truthness in Python. In Python, almost all objects can be used to represent truth values. This means an empty list is false and a non-empty list is true.&lt;/p&gt;

&lt;p&gt;So this&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; []:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Truth&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Falsehood&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will print &amp;ldquo;Falsehood&amp;rdquo; and the following&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; [&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;2&lt;/span&gt;, &lt;span style=&#34;color: #FF6600&#34;&gt;3&lt;/span&gt;]:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Truth&amp;quot;&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;else&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Falsehood&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;will print &amp;ldquo;Truth&amp;rdquo;.&lt;/p&gt;
&lt;div class=&#34;footnotes&#34;&gt;

&lt;hr /&gt;

&lt;ol&gt;
&lt;li id=&#34;fn:1&#34;&gt;&lt;a href=&#34;http://www.python.org/dev/peps/pep-0285/&#34;&gt;Adding a bool type&lt;/a&gt; by Guido van Rossum.
 &lt;a class=&#34;footnote-return&#34; href=&#34;#fnref:1&#34;&gt;&lt;sup&gt;[return]&lt;/sup&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;/div&gt;
</description>
    </item>
    
    <item>
      <title>Understanding Python&#39;s &#34;with&#34; statement</title>
      <link>https://sdqali.in/blog/2012/07/09/understanding-pythons-with-statement/</link>
      <pubDate>Mon, 09 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2012/07/09/understanding-pythons-with-statement/</guid>
      <description>&lt;h2 id=&#34;what-is-it&#34;&gt;What is it?&lt;/h2&gt;

&lt;p&gt;Python&amp;rsquo;s &lt;code&gt;with&lt;/code&gt; statement provides a very convenient way of dealing with the situation where you have to do a setup and teardown to make something happen. A very good example for this is the situation where you want to gain a handler to a file, read data from the file and the close the file handler.&lt;/p&gt;

&lt;p&gt;Without the &lt;code&gt;with&lt;/code&gt; statement, one would write something along the lines of:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/tmp/foo.txt&amp;quot;&lt;/span&gt;)
data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;There are two annoying things here. First, you end up forgetting to close the file handler. The second is how to handle exceptions that may occur once the file handler has been obtained. One could write something like this to get around this:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/tmp/foo.txt&amp;quot;&lt;/span&gt;)
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt;:
    data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;read()
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;finally&lt;/span&gt;:
    &lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;close()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;While this works well, it is unnecessarily verbose. This is where &lt;code&gt;with&lt;/code&gt; is useful. The good thing about &lt;code&gt;with&lt;/code&gt; apart from the better syntax is that it is very good handling exceptions. The above code would look like this, when using &lt;code&gt;with&lt;/code&gt;:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;open&lt;/span&gt;(&lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;/tmp/foo.txt&amp;quot;&lt;/span&gt;) &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;:
   data &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;file&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;read()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;&lt;/p&gt;

&lt;h2 id=&#34;how-does-it-work&#34;&gt;How does it work?&lt;/h2&gt;

&lt;p&gt;While this might look like magic, the way Python handles &lt;code&gt;with&lt;/code&gt; is more clever than magic. The basic idea is that the statement after &lt;code&gt;with&lt;/code&gt; has to evaluate an object that responds to an &lt;code&gt;__enter__()&lt;/code&gt; as well as an &lt;code&gt;__exit__()&lt;/code&gt; function.&lt;/p&gt;

&lt;p&gt;After the statement that follows &lt;code&gt;with&lt;/code&gt; is evaluated, the &lt;code&gt;__enter__()&lt;/code&gt; function on the resulting object is called. The value returned by this function is assigned to the variable following &lt;code&gt;as&lt;/code&gt;. After every statement in the block is evaluated, the &lt;code&gt;__exit__()&lt;/code&gt; function is called.&lt;/p&gt;

&lt;p&gt;This can be demonstrated with the following example:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# with_example01.py&lt;/span&gt;


&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Sample&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__enter__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;In __enter__()&amp;quot;&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Foo&amp;quot;&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__exit__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;type&lt;/span&gt;, value, trace):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;In __exit__()&amp;quot;&lt;/span&gt;


&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;get_sample&lt;/span&gt;():
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; Sample()


&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; get_sample() &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; sample:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;sample:&amp;quot;&lt;/span&gt;, sample
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;When executed, this will result in:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;bash-3.2$ ./with_example01.py
In __enter__&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
sample: Foo
In __exit__&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;As you can see,&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;The &lt;code&gt;__enter__()&lt;/code&gt; function is executed&lt;/li&gt;
&lt;li&gt;The value returned by it - in this case &lt;code&gt;&amp;quot;Foo&amp;quot;&lt;/code&gt; is assigned to &lt;code&gt;sample&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The body of the block is executed, thereby printing the value of &lt;code&gt;sample&lt;/code&gt; ie. &lt;code&gt;&amp;quot;Foo&amp;quot;&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;The &lt;code&gt;__exit__()&lt;/code&gt; function is called.&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;What makes &lt;code&gt;with&lt;/code&gt; really powerful is the fact that it can handle exceptions. You would have noticed that the &lt;code&gt;__exit__()&lt;/code&gt; function for &lt;code&gt;Sample&lt;/code&gt; takes three arguments - &lt;code&gt;val&lt;/code&gt;, &lt;code&gt;type&lt;/code&gt; and &lt;code&gt;trace&lt;/code&gt;. These are useful in exception handling. Let&amp;rsquo;s see how this works by modifying the above example.&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;
&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;# with_example02.py&lt;/span&gt;


&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;Sample&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__enter__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;__exit__&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;type&lt;/span&gt;, value, trace):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;type:&amp;quot;&lt;/span&gt;, &lt;span style=&#34;color: #336666&#34;&gt;type&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;value:&amp;quot;&lt;/span&gt;, value
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;trace:&amp;quot;&lt;/span&gt;, trace

    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;do_something&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;):
        bar &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;&lt;span style=&#34;color: #555555&#34;&gt;/&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;0&lt;/span&gt;
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;return&lt;/span&gt; bar &lt;span style=&#34;color: #555555&#34;&gt;+&lt;/span&gt; &lt;span style=&#34;color: #FF6600&#34;&gt;10&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;with&lt;/span&gt; Sample() &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;as&lt;/span&gt; sample:
    sample&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;do_something()
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Notice how in this example, instead of &lt;code&gt;get_sample()&lt;/code&gt;, &lt;code&gt;with&lt;/code&gt; takes &lt;code&gt;Sample()&lt;/code&gt;. It does not matter, as long as the statement that follows &lt;code&gt;with&lt;/code&gt; evaluates to an object that has an &lt;code&gt;__enter__()&lt;/code&gt; and &lt;code&gt;__exit__()&lt;/code&gt; functions. In this case, &lt;code&gt;Sample()&lt;/code&gt;&amp;rsquo;s &lt;code&gt;__enter__()&lt;/code&gt; returns the newly created instance of &lt;code&gt;Sample&lt;/code&gt; and that is what gets passed to &lt;code&gt;sample&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;When executed:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;bash-3.2$ ./with_example02.py
type: &amp;lt;&lt;span style=&#34;color: #336666&#34;&gt;type&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;#39;exceptions.ZeroDivisionError&amp;#39;&lt;/span&gt;&amp;gt;
value: integer division or modulo by zero
trace: &amp;lt;traceback object at 0x1004a8128&amp;gt;
Traceback &lt;span style=&#34;color: #555555&#34;&gt;(&lt;/span&gt;most recent call last&lt;span style=&#34;color: #555555&#34;&gt;)&lt;/span&gt;:
  File &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;./with_example02.py&amp;quot;&lt;/span&gt;, line 19, in &amp;lt;module&amp;gt;
    sample.do_something&lt;span style=&#34;color: #555555&#34;&gt;()&lt;/span&gt;
  File &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;./with_example02.py&amp;quot;&lt;/span&gt;, line 15, in do_something
    &lt;span style=&#34;color: #003333&#34;&gt;bar&lt;/span&gt; &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; 1/0
ZeroDivisionError: integer division or modulo by zero
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;Essentially, if there are exceptions being thrown from anywhere inside the block, the &lt;code&gt;__exit__()&lt;/code&gt; function for the object is called. As you can see, the type, value and the stack trace associated with the exception thrown is passed to this function. In this case, you can see that there was a &lt;code&gt;ZeroDivisionError&lt;/code&gt; exception being thrown. People implementing libraries can write code that clean up resources, close files etc. in their &lt;code&gt;__exit__()&lt;/code&gt; functions.&lt;/p&gt;

&lt;p&gt;Thus, Python&amp;rsquo;s &lt;code&gt;with&lt;/code&gt; is a nifty construct that makes code a little less verbose and makes cleaning up during exceptions a bit easier.&lt;/p&gt;

&lt;p&gt;I have put the code examples given here on &lt;a href=&#34;https://github.com/sdqali/python_dojo/tree/master/with&#34;&gt;Github&lt;/a&gt;.&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Autorun.py - Execute stuff on file change</title>
      <link>https://sdqali.in/blog/2010/01/09/autorun.py---execute-stuff-on-file-change/</link>
      <pubDate>Sat, 09 Jan 2010 00:00:00 +0000</pubDate>
      
      <guid>https://sdqali.in/blog/2010/01/09/autorun.py---execute-stuff-on-file-change/</guid>
      <description>&lt;p&gt;I really liked ZenTest&amp;rsquo;s Autospec in action. Recently, when I was trying to write some Python stuff, I thought it would be nice if I would have a tool that would just run the unit tests, so that I don&amp;rsquo;t have to switch between console windows. Better still, I could run it from inside my Emacs.&lt;/p&gt;

&lt;p&gt;Clearly, monitoring files for changes, shouldn&amp;rsquo;t be big deal. I decided to write the tool myself in Python. the prime intension was to help myself learn Python. Although that didn&amp;rsquo;t quite workout, I managed to come up with a quick and dirty hack to do it. It uses &lt;code&gt;pyinotify&lt;/code&gt;, which is a Python module for monitoring filesystem changes. Since &lt;code&gt;pyinotify&lt;/code&gt; depends on the Linux kernel, this would work only on Linux boxes.&lt;/p&gt;

&lt;p&gt;I named it &lt;code&gt;autorun.py&lt;/code&gt;. If you want to run some task, depending on file changes in a directory, you navigate to that directory and start autorunner as:&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/src/sdq/ocr$ ./autorun.py &amp;quot;python Test*.py&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;That would start &lt;code&gt;autorun.py&lt;/code&gt; and every time I modify a file in the present directory the command  &lt;code&gt;python Test*.py&lt;/code&gt; is executed. In my case, I am using the unittest framework that comes with Python. So everytime, a file is updates, it runs all my unit tests, as seen below:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;sadiquea@sadiquea-laptop:~/src/sdq/ocr$ ./autorun.py &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;python Test*.py&amp;quot;&lt;/span&gt;
Autorunner in action
.............

----------------------------------------------------------------------

Ran &lt;span style=&#34;color: #FF6600&#34;&gt;13&lt;/span&gt; tests in 0.763s

OK
&lt;/pre&gt;&lt;/div&gt;

&lt;p&gt;If I were working with Ruby and wanted to run all my unit tests when I modify the files, I could start the tool like this: &lt;code&gt;./autorun.py &amp;quot;rake spec&amp;quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;I would really like to add the ability to exclude some files/subdirectories from being watched for changes.&lt;/p&gt;

&lt;p&gt;Here is the code snippet that does the trick:&lt;/p&gt;
&lt;div class=&#34;highlight&#34; style=&#34;background: #f0f3f3&#34;&gt;&lt;pre style=&#34;line-height: 125%&#34;&gt;&lt;span&gt;&lt;/span&gt;&lt;span style=&#34;color: #0099FF; font-style: italic&#34;&gt;#!/usr/bin/env python&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;sys&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;os&lt;/span&gt;
&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;import&lt;/span&gt; &lt;span style=&#34;color: #00CCFF; font-weight: bold&#34;&gt;pyinotify&lt;/span&gt;

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;len&lt;/span&gt;(sys&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;argv)&lt;span style=&#34;color: #555555&#34;&gt;==&lt;/span&gt;&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Please pass a command to excute as a parameter&amp;quot;&lt;/span&gt;
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;For example autorun.py &amp;#39;ruby foo.rb&amp;#39;&amp;quot;&lt;/span&gt;
    sys&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;exit()

commandToRun &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; sys&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;argv[&lt;span style=&#34;color: #FF6600&#34;&gt;1&lt;/span&gt;]

watchManager &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; pyinotify&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;WatchManager()
mask &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; pyinotify&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;IN_MODIFY

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;class&lt;/span&gt; &lt;span style=&#34;color: #00AA88; font-weight: bold&#34;&gt;ActionProcesser&lt;/span&gt;(pyinotify&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;ProcessEvent):
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;def&lt;/span&gt; &lt;span style=&#34;color: #CC00FF&#34;&gt;process_IN_MODIFY&lt;/span&gt;(&lt;span style=&#34;color: #336666&#34;&gt;self&lt;/span&gt;, event):
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;print&lt;/span&gt; &lt;span style=&#34;color: #CC3300&#34;&gt;&amp;quot;Autorunner in action&amp;quot;&lt;/span&gt;
        os&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;system(commandToRun)

notifier &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; pyinotify&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;Notifier(watchManager, ActionProcesser())

wdd &lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt; watchManager&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;add_watch(os&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;getcwd(), mask, rec&lt;span style=&#34;color: #555555&#34;&gt;=&lt;/span&gt;&lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;)

&lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;while&lt;/span&gt; &lt;span style=&#34;color: #336666&#34;&gt;True&lt;/span&gt;:
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;try&lt;/span&gt;:
        notifier&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;process_events()
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;if&lt;/span&gt; notifier&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;check_events():
            notifier&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;read_events()
    &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;except&lt;/span&gt; &lt;span style=&#34;color: #CC0000; font-weight: bold&#34;&gt;KeyboardInterrupt&lt;/span&gt;:
        notifier&lt;span style=&#34;color: #555555&#34;&gt;.&lt;/span&gt;stop()
        &lt;span style=&#34;color: #006699; font-weight: bold&#34;&gt;break&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>